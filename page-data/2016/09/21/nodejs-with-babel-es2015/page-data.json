{"componentChunkName":"component---src-templates-blog-js","path":"/2016/09/21/nodejs-with-babel-es2015/","result":{"data":{"blog":{"id":"0d93902e-31ee-532d-901e-fff9200d80da","html":"<p>最近开始尝试用 nodejs 去写后端 api，和前端类似，为了采用 es6 的语法同样需要做一些 boilerplate 的工作。这里记录下来，加深一下记忆。</p>\n<p>不过首先要先跑个题。其实 babel 不是第一个支持 js 变种的东西，最早出现过 coffeescript 目前比较流行的还有 typescript。typescript 支持强类型，支持 interface，尤其是 interface 这种 oo 的利器，真是让我跃跃欲试。但是有静静地想了想，其实目前 es6 作为一个未来的标准可能还是更有前途一些，并且目前的 es6 对于 oo 的支持已经相对来说好了一些了。应该还算凑合。</p>\n<h1 id=\"install-dependencies\" style=\"position:relative;\">Install Dependencies<a href=\"#install-dependencies\" aria-label=\"install dependencies permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>首先当然是创建项目，安装依赖了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init -y\n<span class=\"token function\">npm</span> i -D babel-cli babel-preset-es2015 nodemon</code></pre></div>\n<p>其中 <code class=\"language-text\">nodemon</code> 是用来检测项目下的文件自动重启 nodejs server 的。</p>\n<h1 id=\"create-babelrc\" style=\"position:relative;\">Create babelrc<a href=\"#create-babelrc\" aria-label=\"create babelrc permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>然后创建一个 <code class=\"language-text\">.babelrc</code> 文件表明所支持的 <code class=\"language-text\">babel</code> 内容。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> .babelrc</code></pre></div>\n<p>.babelrc:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"presets\": [\"es2015\"]\n}</code></pre></div>\n<p>如果想要支持 <code class=\"language-text\">Object Spread Operator</code> 这样的功能（就是 <code class=\"language-text\">...</code> 这个语法）则需要额外安装一个 babel 的插件 <code class=\"language-text\">babel-plugin-transform-object-rest-spread</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-plugin-transform-object-rest-spread -D</code></pre></div>\n<p>然后在 <code class=\"language-text\">.babelrc</code> 添加如下内容</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"plugins\": [\"transform-object-rest-spread\"]\n}</code></pre></div>\n<h1 id=\"dev-command-to-run-es6-node-js\" style=\"position:relative;\">Dev command to run es6 node js<a href=\"#dev-command-to-run-es6-node-js\" aria-label=\"dev command to run es6 node js permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>在完成了 babel 的配置之后，我们就可以采用 es6 的语法去写 js 了。比如这里是一个样例。</p>\n<p><code class=\"language-text\">index.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里用到了 es6 的 <code class=\"language-text\">import</code> 以及 <code class=\"language-text\">=></code> 方法。如果直接执行 <code class=\"language-text\">node index.js</code> 是会报错的。这里我们可以在 <code class=\"language-text\">package.json</code> 中的 <code class=\"language-text\">scripts</code> 下添加一个方法 <code class=\"language-text\">dev</code> 用 <code class=\"language-text\">babel-node</code> 命令执行我们的 es6 语法的文件。</p>\n<p><code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"babel-node index.js\"\n  }\n}</code></pre></div>\n<p>然后通过用 <code class=\"language-text\">nodemon</code> 包裹 <code class=\"language-text\">dev</code> 命令可以做到自动重启 nodejs 的 server。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\"\n  }\n}</code></pre></div>\n<h1 id=\"build-command-to-create-code-for-production\" style=\"position:relative;\">Build command to create code for production<a href=\"#build-command-to-create-code-for-production\" aria-label=\"build command to create code for production permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><code class=\"language-text\">babel-node</code> 仅仅是用于开发环境，每次修改代码后可以自动的编译文件。但是如果我们想要在生产环境部署代码的时候就需要一个专门的命令一次性将所有的代码编译成 <code class=\"language-text\">node</code> 支持的 es5 语法的文件了。</p>\n<p>这里我们在 <code class=\"language-text\">package.json</code> 中再增加一个 <code class=\"language-text\">build</code> 命令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\",\n    \"build\": \"babel src --out-dir dist\"\n  }\n}</code></pre></div>\n<p>通过执行 <code class=\"language-text\">npm run build</code> 可以将 <code class=\"language-text\">src</code> 下的 <code class=\"language-text\">es6</code> 语法的文件编译成 <code class=\"language-text\">dist</code> 下支持 <code class=\"language-text\">es5</code> 语法的文件。</p>\n<p>最后在添加一个 <code class=\"language-text\">start</code> 方法去启动 <code class=\"language-text\">nodejs</code> server。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\",\n    \"build\": \"babel src --out-dir dist\",\n    \"start\" \"node dist/index.js\"\n  }\n}</code></pre></div>\n<p>为了保证每次执行 <code class=\"language-text\">npm run start</code> 命令前都会执行 <code class=\"language-text\">build</code> 命令，我们可以将 <code class=\"language-text\">build</code> 重命名为 <code class=\"language-text\">prestart</code>，<code class=\"language-text\">nodejs</code> 会自动的帮助我们在执行 <code class=\"language-text\">start</code> 之前执行它。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\",\n    \"prestart\": \"babel src --out-dir dist\",\n    \"start\" \"node dist/index.js\"\n  }\n}</code></pre></div>\n<h1 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"http://babeljs.io/docs/plugins/transform-object-rest-spread/\">Object Spread Operator</a></li>\n<li><a href=\"https://github.com/remy/nodemon\">nodemon</a></li>\n<li><a href=\"https://egghead.io/lessons/node-js-using-es6-and-beyond-with-node-js\">Using ES6 and beyond with Node.js - node Video Tutorial</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#install-dependencies\">Install Dependencies</a></li>\n<li><a href=\"#create-babelrc\">Create babelrc</a></li>\n<li><a href=\"#dev-command-to-run-es6-node-js\">Dev command to run es6 node js</a></li>\n<li><a href=\"#build-command-to-create-code-for-production\">Build command to create code for production</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","frontmatter":{"title":"Nodejs with babel es2015","date":"September 21, 2016"}}},"pageContext":{"id":"0d93902e-31ee-532d-901e-fff9200d80da"}},"staticQueryHashes":[]}