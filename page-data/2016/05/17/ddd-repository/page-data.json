{"componentChunkName":"component---src-templates-blog-js","path":"/2016/05/17/ddd-repository/","result":{"data":{"blog":{"id":"e9edb876-cae8-535a-943a-ba02d42f8368","html":"<p>标题是 <code class=\"language-text\">Repository</code>，但是内容是我如何从错用的 <code class=\"language-text\">Repository</code> 变成了感觉还算对的 <code class=\"language-text\">Repository</code> 的过程。</p>\n<h2 id=\"之前的做法\" style=\"position:relative;\">之前的做法<a href=\"#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%81%9A%E6%B3%95\" aria-label=\"之前的做法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>DDD 里面的 <code class=\"language-text\">Repository</code> 是一个处理数据存储或者说是数据持久化的单元。通常一个 <code class=\"language-text\">Aggregate</code> 对应一个 <code class=\"language-text\">Repository</code>。对于通常的 web 服务，很多时候我们都是在与数据存储打交道，以至于很多时候存储就成为了真个应用最关键的逻辑了。那么刚刚接触 DDD 的时候，我就觉得 Repository 就是以前经常使用的类似 DAO 的东西。下面这样的代码经常出现在我们的应用里面。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code class=\"language-text\">applicationRepository</code> 管理了对于应用的创建。为了创建我们的对象 <code class=\"language-text\">app</code> 我们将一堆需要的参数扔进一个 <code class=\"language-text\">applicationRepository</code> 这样子的不知道背后是什么鬼实现的黑盒子，出来就是我们想要的东西了。再看另外一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationRecord</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Record</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> envName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mapper<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里例子里面，<code class=\"language-text\">application</code> 可以有环境变量，在 <code class=\"language-text\">application</code> 中提供了一个 <code class=\"language-text\">removeEnv</code> 的方法，<code class=\"language-text\">mapper</code> 是一个具体的持久层工具 <code class=\"language-text\">Mybatis</code> 需要的东西，可以忽略。当我需要删除环境变量的时候，我只需要做如下的事情。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">ofId</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这里事实上我根本没有显性的调用任何持久化方法，在 <code class=\"language-text\">app</code> 里面持久化就偷偷的帮我把事情做了。然后需要注意的是我的 <code class=\"language-text\">Application</code> 仅仅是一个接口，实现它的是一个 <code class=\"language-text\">ApplicationRecord</code> 它内部通过注入的方式塞进去了 <code class=\"language-text\">Mybatis DataMapper</code> 的东西从而实现了持久化的工作。然后在 <code class=\"language-text\">Mybatis</code> 可以放一个叫做 <code class=\"language-text\">ObjectFactory</code> 的东西使得 <code class=\"language-text\">Mybatis</code> 和 java injector 关联子一起，当从 <code class=\"language-text\">Mybatis</code> 获取对象时 <code class=\"language-text\">Mybatis</code> 会自动的讲所有的依赖注入到这个对象里。</p>\n<p>说白了就是<strong>将数据层和模型绑定在一起，持久层做了业务层的事情</strong>。</p>\n<h2 id=\"希望的样子\" style=\"position:relative;\">希望的样子<a href=\"#%E5%B8%8C%E6%9C%9B%E7%9A%84%E6%A0%B7%E5%AD%90\" aria-label=\"希望的样子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>然而我希望的是可以将业务层做成这个样子：</p>\n<ol>\n<li>没有对什么持久层的依赖，甚至完全不知晓持久层。</li>\n<li>领域模型不应该是接口而已，接口不能描述具体的业务行为，我同意接口和实现分离的方式，但是分离的实现也应该是领域模型重要的一部分而不是和持久层放在一起</li>\n<li><code class=\"language-text\">Repository</code> 作为和存储打交道的组件应该仅仅是做<strong>持久化</strong>，它就是拿来一个对象，然后存到数据库里，没有任何业务逻辑，没有任何花哨的方法。</li>\n</ol>\n<h2 id=\"改进后的样子\" style=\"position:relative;\">改进后的样子<a href=\"#%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90\" aria-label=\"改进后的样子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface ApplicationRepository {\n    void save(Application application);\n    Application ofId(String appId);\n}</code></pre></div>\n<p>没有什么 <code class=\"language-text\">addEnv</code> <code class=\"language-text\">removeEnv</code> 等等，这些都是 <code class=\"language-text\">Application</code> 自己要做的。<code class=\"language-text\">Mybatis</code> 版本的 <code class=\"language-text\">Repository</code> 具体的 <code class=\"language-text\">mapper</code> 仅仅出现在 <code class=\"language-text\">MybatisApplicationRepository</code> 里面，其他地方都不会出现。按照这个思路把上边的代码修改之后是下面这个样子。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>新创建的 <code class=\"language-text\">app</code> 本身就是一个 <code class=\"language-text\">POJO</code> 里面全部都是纯粹的业务代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Envs</span> envs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> envName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        envs<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Application</code> 有一个 <code class=\"language-text\">envs</code> 的属性，在调用 <code class=\"language-text\">removeEnv</code> 之后，<code class=\"language-text\">application</code> 的环境变量就更新了。如果需要持久化，就单独调用 <code class=\"language-text\">applicationRepository</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">ofId</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样的话持久化就和业务逻辑完全的分离开了，所有的 <code class=\"language-text\">POJO</code> 保证即使没有持久化也都可以正常的运转。领域对象是 <code class=\"language-text\">class</code> 而不是 <code class=\"language-text\">interface</code> 保证了内部的逻辑都是包含在业务层的。</p>","tableOfContents":"<ul>\n<li><a href=\"#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%81%9A%E6%B3%95\">之前的做法</a></li>\n<li><a href=\"#%E5%B8%8C%E6%9C%9B%E7%9A%84%E6%A0%B7%E5%AD%90\">希望的样子</a></li>\n<li><a href=\"#%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90\">改进后的样子</a></li>\n</ul>","frontmatter":{"title":"DDD Repository","date":"May 17, 2016"}}},"pageContext":{"id":"e9edb876-cae8-535a-943a-ba02d42f8368"}},"staticQueryHashes":[]}