{"componentChunkName":"component---src-templates-blog-js","path":"/2016/05/05/webpack-setup/","result":{"data":{"blog":{"id":"899b6565-2be7-5b8e-a295-1d576ad8729d","html":"<p>虽然用 <code class=\"language-text\">webpack</code> 有一阵子了，但是上次构建整个体系的时候手忙脚乱的，仅仅是找了乱七八糟的东西堆叠起来，中间的过程忘的一干二净今天去 review 自己以前写的代码完全不知道自己是怎么搞定的。这次写一个小系列把如何构建 <code class=\"language-text\">webpack</code> + <code class=\"language-text\">redux</code> + <code class=\"language-text\">react</code> 的体系记下来，今天是第一部分，<code class=\"language-text\">webpack</code> 的准备工作。</p>\n<p><code class=\"language-text\">webpack</code> 可以认为就是一个 <code class=\"language-text\">node</code> 版本的 <code class=\"language-text\">make</code> 吧，不过自然是有 <code class=\"language-text\">js</code> 特色的 <code class=\"language-text\">make</code> 了，类似的东西有很多，比如 <code class=\"language-text\">browserify</code> 以及 <code class=\"language-text\">gulp</code> 等。<code class=\"language-text\">webpack</code> 最终的目的就是将我们一个有众多文件的 <code class=\"language-text\">js</code> 的 project 变成只有一个或者多个文件的 <code class=\"language-text\">bundles</code>，我在后面会结合例子做展示。并且<code class=\"language-text\">webpack</code> 可以支持 <code class=\"language-text\">loader</code> 将各种诡异的 <code class=\"language-text\">js</code> 方言转换成 <code class=\"language-text\">js</code> 比如当下比较流行的额 <code class=\"language-text\">babel</code> <code class=\"language-text\">jsx</code> 等，所以 <code class=\"language-text\">webpack</code> 配合 <code class=\"language-text\">es2015</code> 以及 <code class=\"language-text\">react</code> 一起使用非常的方便。不过要说明的是对这些方言的支持是 <code class=\"language-text\">loader</code> 的事情，<code class=\"language-text\">webpack</code> 本身是只能处理原生态的 <code class=\"language-text\">js</code> 的。</p>\n<h2 id=\"basic\" style=\"position:relative;\">basic<a href=\"#basic\" aria-label=\"basic permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先自然是安装 <code class=\"language-text\">webpack</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g webpack\nnpm install -S webpack</code></pre></div>\n<p>然后我展示一个 <code class=\"language-text\">webpack</code> 的基本用法。首先看一下我们的目录结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── index.html\n├── index.js\n├── module1.js\n├── module2.js\n└── package.json</code></pre></div>\n<p>其中 <code class=\"language-text\">index.html</code> 基本就是一个空文件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html>\n  &lt;head>\n    &lt;meta charset=\"utf-8\">\n    &lt;title>index&lt;/title>\n  &lt;/head>\n  &lt;body>\n    &lt;script src=\"bundle.js\">&lt;/script>\n  &lt;/body>\n&lt;/html></code></pre></div>\n<p><code class=\"language-text\">module1.js</code> <code class=\"language-text\">module2.js</code> 展示如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log('module 1');</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(\"module 2\");</code></pre></div>\n<p><code class=\"language-text\">index.js</code> 通过 <code class=\"language-text\">require</code> 的方式引用两个模块</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require(\"./module1\");\nrequire(\"./module2\");</code></pre></div>\n<p>然后通过命令 <code class=\"language-text\">webpack ./index.js bundle.js</code> 可以将 <code class=\"language-text\">index.js</code> 以及其所依赖的模块打包生成一个文件 <code class=\"language-text\">bundle.js</code> 这样在浏览器打开 <code class=\"language-text\">index.html</code> 就可以看到 <code class=\"language-text\">console</code> 中的命令了。</p>\n<h2 id=\"use-webpackconfigjs\" style=\"position:relative;\">use webpack.config.js<a href=\"#use-webpackconfigjs\" aria-label=\"use webpackconfigjs permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在上述这么简单的情况下我们就仅仅用 <code class=\"language-text\">webpack</code> 的命令就可以了。不过在处理更复杂的事情的时候需要 <code class=\"language-text\">webpack.config.js</code> 来帮忙。这里我给出一个最小化的 <code class=\"language-text\">webpack.config.js</code> 的实例来替代刚才的命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  entry: [\n    './index'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  }\n};</code></pre></div>\n<p>其中，<code class=\"language-text\">entry</code> 就是我们整个 <code class=\"language-text\">project</code> 的 <code class=\"language-text\">main</code>。就如在前文中 <code class=\"language-text\">webpack ./index.js bundle.js</code> 的 <code class=\"language-text\">./index.js</code> 的角色。<code class=\"language-text\">output</code> 则表示我们要将生成的 <code class=\"language-text\">js</code> 放在哪里。这里我提供了一个不同的 <code class=\"language-text\">path</code>: <code class=\"language-text\">dist</code>，然后依然采用 <code class=\"language-text\">bundle.js</code> 的名字。这样我们执行 <code class=\"language-text\">webpack</code> 就可以看到 <code class=\"language-text\">dist</code> 下出现了 <code class=\"language-text\">bundle.js</code> 这个文件。</p>\n<h2 id=\"use-webpack-dev-server\" style=\"position:relative;\">use webpack dev server<a href=\"#use-webpack-dev-server\" aria-label=\"use webpack dev server permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>那么每次改了文件之后都 <code class=\"language-text\">webpack</code> 是不是很麻烦，应该是有 <code class=\"language-text\">watch</code> 的办法吧。对的，这就是 <code class=\"language-text\">webpack-dev-server</code> 了。首先安装它。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g webpack-dev-server\nnpm install -S webpack-dev-server</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">执行 `webpack-dev-server --inline --hot --content-base dist/`，每次修改代码就可以自动 build 了。</code></pre></div>\n<p>既然这里我们把 <code class=\"language-text\">content-base</code> 设定为了 <code class=\"language-text\">dist</code> 那么需要把 <code class=\"language-text\">index.html</code> 放进去啦。最后的目录结构是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── dist\n│   ├── bundle.js\n│   └── index.html\n├── index.js\n├── module1.js\n├── module2.js\n├── package.json\n└── webpack.config.js</code></pre></div>\n<p>值得一提是在 <code class=\"language-text\">package.json</code> 里有一个专门放置这种启动 server 的地方，就是在 <code class=\"language-text\">scripts</code> 下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"name\": \"webpack-setup\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"webpack\": \"^1.13.0\"\n  }\n}</code></pre></div>\n<p>然后下次执行 <code class=\"language-text\">npm start</code> 就可以启动这个 dev server 啦。</p>\n<h2 id=\"一些参考\" style=\"position:relative;\">一些参考<a href=\"#%E4%B8%80%E4%BA%9B%E5%8F%82%E8%80%83\" aria-label=\"一些参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>webpack.config.js <a href=\"http://webpack.github.io/docs/configuration.html\">https:://webpack.github.io/docs/configuration.html</a></li>\n<li>webpack dev server <a href=\"http://webpack.github.io/docs/webpack-dev-server.html\">https:://webpack.github.io/docs/webpack-dev-server.html</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#basic\">basic</a></li>\n<li><a href=\"#use-webpackconfigjs\">use webpack.config.js</a></li>\n<li><a href=\"#use-webpack-dev-server\">use webpack dev server</a></li>\n<li><a href=\"#%E4%B8%80%E4%BA%9B%E5%8F%82%E8%80%83\">一些参考</a></li>\n</ul>","frontmatter":{"title":"Webpack Setup","date":"May 05, 2016"}}},"pageContext":{"id":"899b6565-2be7-5b8e-a295-1d576ad8729d"}},"staticQueryHashes":[]}