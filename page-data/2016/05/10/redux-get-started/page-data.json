{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/2016/05/10/redux-get-started/",
    "result": {"data":{"blog":{"id":"220d107b-0c85-5da6-92a6-cb120b4d67e5","html":"<h2 id=\"what-is-redux\" style=\"position:relative;\">what is redux<a href=\"#what-is-redux\" aria-label=\"what is redux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>redux</code> 是一个目前比较流行的前端框架，它和 <code>react</code> 配合使用，作为 <code>react</code> 的 数据层。它继承了 <code>flux</code> 的思想，构建一个 <code>store</code> 保存前端所有的 <code>state</code>，但是目前这样的模式也逐渐出现了一些争议，尤其是当一个项目变得比较庞大的时候，在一个 <code>store</code> 里面存储单个页面相关的数据并没有非常大的意义，这部分我以后再说。</p>\n<p><code>redux</code> 的几个关键概念 <code>action</code> <code>reducer</code> <code>store</code> 在 <a href=\"https://redux.js.org\">https://redux.js.org</a> 都有详细的介绍，尤其是在官网推荐的教学视频介绍了 <code>reduex</code> 的一些实现细节，对理解 <code>redux</code> 是如何工作的有很大的帮助，强烈推荐观看</p>\n<h2 id=\"a-simple-redux-example\" style=\"position:relative;\">a simple redux example<a href=\"#a-simple-redux-example\" aria-label=\"a simple redux example permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先安装 <code>redux</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save redux</code></pre></div>\n<p>然后我们构建一个简单的目录结构</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── actions\n├── dist\n│   ├── bundle.js\n│   ├── index.html\n│   └── styles.css\n├── entry.js\n├── package.json\n├── reducers\n├── styles\n│   ├── index.scss\n│   └── theme.scss\n└── webpack.config.js</code></pre></div>\n<p>两个新的文件夹 <code>actions</code> 和 <code>reducers</code> 分别用于存放 <code>action</code> 和 <code>reducer</code>。然后我们实现一下 <code>redux</code> 官网没有视图的 <code>counter</code> 的例子，具体代码如下，其中 <code>actions</code> 用于定义应用所支持的动作，有点像是 <code>request</code>，然后 <code>reducer</code> 定义依据动作的处理，有点像是 <code>controller</code> 中对应的一个个的方法。</p>\n<p><code>actions/index.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export const increment = () => {\n  return {\n    type: \"INCREMENT\"\n  }\n}\n\nexport const decrement = () => {\n  return {\n    type: \"DECREMENT\"\n  }\n}</code></pre></div>\n<p><code>reducers/counter.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default (state=0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n      break;\n    case 'DECREMENT':\n      return state - 1;\n      break;\n    default:\n      return 0;\n  }\n}</code></pre></div>\n<p><code>entry.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require('./styles/index.scss');\n\nimport counter from './reducers/counter';\nimport { increment, decrement } from './actions/index';\nimport { createStore } from 'redux';\n\nlet store = createStore(counter);\n\nconsole.log(store.getState());\n\nlet unsubscribe = store.subscribe(() => console.log(store.getState()));\n\nstore.dispatch(increment());\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(decrement());\n\nunsubscribe();</code></pre></div>\n<h2 id=\"add-test-for-reducer\" style=\"position:relative;\">add test for reducer<a href=\"#add-test-for-reducer\" aria-label=\"add test for reducer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前端越来越复杂，相应的测试也是必不可少的了。我们目前的应用比较简单，最复杂的就是 <code>reducers</code> 所以给 <code>reducers</code> 添加一些测试。我们这里使用 <code>mocha</code> 作为测试框架。<code>redux</code> 官网提供了如何写测试的<a href=\"https://redux.js.org/docs/recipes/WritingTests.html\">文档</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev mocha expect</code></pre></div>\n<p>其中 <code>expect</code> 是一个支持比较 fancy 的 <code>assert</code> 语法的库。</p>\n<p>为了和 <code>babel</code> 一起使用需要另外一个东西 <code>babel-register</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev babel-register</code></pre></div>\n<p>添加一个 <code>test</code> 目录</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir test</code></pre></div>\n<p>添加 <code>reducer</code> 的测试 <code>test/reducers/counter.spec.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import expect from 'expect';\nimport counter from '../../reducers/counter';\n\ndescribe('counter', () => {\n  it('should get init state 0', () => {\n    expect(counter(undefined, {})).toBe(0);\n  });\n  it('should increase state', () => {\n    expect(counter(1, { type: 'INCREMENT' })).toBe(2);\n  });\n  it('should decrease state', () => {\n    expect(counter(1, { type: 'DECREMENT' })).toBe(0);\n  });\n  it('should stay same with unknown action', () => {\n    expect(counter(1, { type: 'NO_ACTION' })).toBe(1);\n  });\n});</code></pre></div>\n<p>是不是觉得全天下的 <code>spec</code> 都一样？</p>\n<p>然后我们执行 <code>mocha --compilers js:babel-register --recursive</code> 跑测试。</p>\n<p>是不是报错了？因为我们没有 <code>.babelrc</code> 文件。因为之前我觉得这是一个隐式声明，不如在 <code>webpack.config.js</code> 显式声明好。但是没办法，其他地方也要用，改回去好了。</p>\n<p><code>.babelrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"presets\": [\"es2015\"]\n}</code></pre></div>\n<p><code>webpack.config.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\"\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(\"styles.css\")\n  ]\n};</code></pre></div>\n<p>和 <code>npm start</code> 类似，我们可以写一个 <code>npm test</code> 把那一堆命令移过去。</p>\n<p><code>package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"name\": \"test-redux\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"dependencies\": {\n    \"redux\": \"^3.5.2\",\n    \"webpack\": \"^1.13.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.8.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"expect\": \"^1.20.1\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"mocha\": \"^2.4.5\",\n    \"node-sass\": \"^3.7.0\",\n    \"sass-loader\": \"^3.2.0\",\n    \"style-loader\": \"^0.13.1\",\n    \"webpack\": \"^1.13.0\"\n  },\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --content-base dist/\",\n    \"test\": \"mocha --compilers js:babel-register --recursive\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}</code></pre></div>\n<p>现在再跑一下 <code>npm test</code> 就和刚才一样的结果。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://redux.js.org\">redux</a></li>\n<li><a href=\"https://github.com/reactjs/redux/tree/master/examples/counter\">redux counter example</a></li>\n<li><a href=\"https://redux.js.org/docs/recipes/WritingTests.html\">redux writing tests</a></li>\n<li><a href=\"https://babeljs.io/docs/usage/babelrc/\">babelrc</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#what-is-redux\">what is redux</a></li>\n<li><a href=\"#a-simple-redux-example\">a simple redux example</a></li>\n<li><a href=\"#add-test-for-reducer\">add test for reducer</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","frontmatter":{"title":"Redux get started","date":"May 10, 2016"},"excerpt":"what is redux redux 是一个目前比较流行的前端框架，它和 react 配合使用，…"}},"pageContext":{"id":"220d107b-0c85-5da6-92a6-cb120b4d67e5"}},
    "staticQueryHashes": ["4202924991"]}