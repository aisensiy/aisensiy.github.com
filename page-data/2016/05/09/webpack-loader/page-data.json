{"componentChunkName":"component---src-templates-blog-js","path":"/2016/05/09/webpack-loader/","result":{"data":{"blog":{"id":"d29fbbbb-02f4-5a60-9514-da0605a14f33","html":"<h2 id=\"loader-是做什么的\" style=\"position:relative;\">loader 是做什么的<a href=\"#loader-%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84\" aria-label=\"loader 是做什么的 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>Loaders allow you to preprocess files as you require() or “load” them. Loaders are kind of like “tasks” are in other build tools, and provide a powerful way to handle frontend build steps. Loaders can transform files from a different language like, CoffeeScript to JavaScript, or inline images as data URLs. Loaders even allow you to do things like require() css files right in your JavaScript!</p>\n</blockquote>\n<p><code>webpack</code> 本身并不能处理乱起八糟的语言，什么 <code>css</code> <code>scss</code> <code>es6</code> <code>jsx</code> 都不可以。<code>loader</code> 就是一个额外的 <code>preprocessor</code> 用于将其他语言翻译成 <code>js</code> 然后再让 <code>webpack</code> 去打包处理。那么目前我们需要处理的<em>其他语言</em>主要就是 <code>scss</code> <code>es6</code> <code>jsx</code> 这几个。</p>\n<h2 id=\"在-webpack-的项目中使用-babel\" style=\"position:relative;\">在 webpack 的项目中使用 babel<a href=\"#%E5%9C%A8-webpack-%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-babel\" aria-label=\"在 webpack 的项目中使用 babel permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>babel</code> 是目前比较主流的 <code>es6</code> to <code>js</code> 的编译器，通过简单的包装就有了在 <code>webpack</code> 中将 <code>es6</code> 转换成 <code>js</code> 的 <code>babel-loader</code>。<code>babel</code> 目前支持 <code>es2015</code> (ECMAScript 2015 is the newest version of the ECMAScript standard)，采用 <code>webpack</code> + <code>babel</code> 的模式，我们就可以直接写 <code>es2015</code> 的 js 脚本。</p>\n<h2 id=\"一个例子\" style=\"position:relative;\">一个例子<a href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\" aria-label=\"一个例子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先自然是安装 <code>babel-loader</code> 了。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev babel-loader babel-core</code></pre></div>\n<p>需要说明的是 <code>babel 6.x</code> 将其可以翻译的语言做了拆分，目前还没有支持默认的翻译器，需要我们在 <code>package.json</code> 中显示的安装所需要的翻译器。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install babel-preset-es2015 --save-dev</code></pre></div>\n<p>这里就是显示的说明我需要 <code>es2015</code> 的翻译器，<strong>不过这个情况貌似在以后的版本会做调整</strong>。</p>\n<p>然后需要在 <code>webpack.config.js</code> 提供一个 <code>loader</code> 的声明，说明什么样子的文件需要使用 <code>babel-loader</code> 这个 <code>loader</code> 做处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n          presets: ['es2015']\n        }\n      }\n    ]\n  }\n};</code></pre></div>\n<p>可以看到在 <code>webpack.config.js</code> 中多了一个 <code>module.loaders</code>，通过 <code>test</code> 匹配末尾为 <code>.js</code> 的文件，并且忽略 <code>node_modules</code> 文件夹下的所有文件。当然，我们也可以加上 <code>include</code> 强调只处理某个文件夹下的文件。然后 <code>query</code> 这部分是 <code>babel-loader</code> 所需要的一个声明，指定需要什么具体的翻译器对这些文件做处理。在 <code>babel</code> 官方文档 <a href=\"https://babeljs.io/docs/setup/#installation\">https://babeljs.io/docs/setup/#installation</a> 中有另外一种申明翻译器的方法：将 <code>query</code> 写在一个单独的 <code>.babelrc</code> 文件下，我个人觉得这样让配置过于分散了，还是采用了直接在 <code>webpack.config.js</code> 声明的办法。</p>\n<p>然后，我们将上一部分的 <code>module1</code> <code>module2</code> 用 <code>es2015</code> 的语法方式写出来。</p>\n<p>module1.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default () => {\n  console.log(\"module1\");\n}</code></pre></div>\n<p>module2.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default () => {\n  console.log(\"module2\");\n}</code></pre></div>\n<p>entry.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import m1 from './module1'\nimport m2 from './module2'\n\nm1();\nm2();</code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://babeljs.io/docs/setup/#installation\">Using babel</a></li>\n<li><a href=\"https://webpack.github.io/docs/loaders.html\">Webpack loaders</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#loader-%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84\">loader 是做什么的</a></li>\n<li><a href=\"#%E5%9C%A8-webpack-%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-babel\">在 webpack 的项目中使用 babel</a></li>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\">一个例子</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","frontmatter":{"title":"Webpack Loader","date":"May 09, 2016"},"excerpt":"loader 是做什么的 Loaders allow you to preprocess file…"}},"pageContext":{"id":"d29fbbbb-02f4-5a60-9514-da0605a14f33"}},"staticQueryHashes":["4202924991"]}