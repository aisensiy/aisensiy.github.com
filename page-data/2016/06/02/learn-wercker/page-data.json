{"componentChunkName":"component---src-templates-blog-js","path":"/2016/06/02/learn-wercker/","result":{"data":{"blog":{"id":"9af50496-906e-5b91-9b14-93616ba4910b","html":"<p>半年来一直在做一个 PaaS 的项目，比较关注市面上的相关产品。最近发现一个叫做 wercker 的项目，感觉做的还不错，介绍一下。</p>\n<h2 id=\"wercker-要解决的问题\" style=\"position:relative;\">wercker 要解决的问题<a href=\"#wercker-%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"wercker 要解决的问题 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>目前有很多的平台（如 mesos, rancher, kubernetes）都支持以 <code class=\"language-text\">docker image</code> 的形式进行应用的部署，但是却没有很多的工具帮助将 ci/cd 与这些平台进行更好的对接。而 wercker 的口号是 <code class=\"language-text\">From code to container</code>，强调自己可以做 ci/cd 的事情将代码转化为容器。那么之后就可以将这个容器作为交付的内容在需要的环境进行部署了。</p>\n<h2 id=\"wercker-的特性\" style=\"position:relative;\">wercker 的特性<a href=\"#wercker-%E7%9A%84%E7%89%B9%E6%80%A7\" aria-label=\"wercker 的特性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>\n<p>pipeline as cde</p>\n<p>wercker 提供一个类似于 <code class=\"language-text\">ansible</code> 的 <code class=\"language-text\">wercker.yml</code> 并提供与 <code class=\"language-text\">ansible</code> 类似的自定义命令来做部署的工作。</p>\n<p>自定义命令的功能非常的强大，种类也非常的丰富。例如 <code class=\"language-text\">npm-install</code> 安装 <code class=\"language-text\">node</code> 的依赖，<code class=\"language-text\">internal/docker-push</code> 将生成的 <code class=\"language-text\">image</code> 上传到 <code class=\"language-text\">docker registry</code>，<code class=\"language-text\">marathon-deploy</code> 将应用部署到 <code class=\"language-text\">marathon</code> 平台。</p>\n<p>整个 <code class=\"language-text\">pipeline</code> 可以通过这些命令拼装起来，所有的 pipeline 都可以通过一个 <code class=\"language-text\">wercker.yml</code> 文件进行管理。</p>\n</li>\n<li>\n<p>本地环境</p>\n<p>wercker 有一个命令行工具 <code class=\"language-text\">wercker-cli</code> 支持在本地通过 <code class=\"language-text\">docker</code> 和 <code class=\"language-text\">wercker-cli</code> 构建一个本地的开发环境，并且支持在本地环境提供 <code class=\"language-text\">backing service</code>。</p>\n</li>\n<li>\n<p>多 vendor 支持</p>\n<p>wercker 可以和多个 <code class=\"language-text\">PaaS</code> 对接的，包括 <code class=\"language-text\">heroku</code> <code class=\"language-text\">kubernetes</code> <code class=\"language-text\">marathon</code> <code class=\"language-text\">ecs</code> 等。这一点非常的难能可贵，想象一下，作为一个开发者，当有了类似于 <code class=\"language-text\">ecs</code> 或者 <code class=\"language-text\">heroku</code> 这样的公有云之后再配合 <code class=\"language-text\">wercker</code> 这样的工具可以快速的搭建 <code class=\"language-text\">pipeline</code> 以及完成以前需要花费更多时间才能得到的 <code class=\"language-text\">ci/cd</code> 开发效率真是大大的提升。</p>\n</li>\n<li>\n<p>ui 界面</p>\n<p>提供一个 ui 界面管理整个 pipeline</p>\n</li>\n<li>\n<p>与 github &#x26; bitbucket 对接</p>\n<p>支持 github bitbucket hook，在有新的 commit 之后自动构建、部署。\n管理关键数据，有些数据不适合存放在 <code class=\"language-text\">wercker.yml</code> 中，例如 <code class=\"language-text\">heroku</code> 的 <code class=\"language-text\">accesskey</code>，<code class=\"language-text\">docker-hub</code> 的账号密码。</p>\n</li>\n</ol>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"http://wercker.com\">wercker</a></p>","tableOfContents":"<ul>\n<li><a href=\"#wercker-%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">wercker 要解决的问题</a></li>\n<li><a href=\"#wercker-%E7%9A%84%E7%89%B9%E6%80%A7\">wercker 的特性</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","frontmatter":{"title":"Learn wercker","date":"June 02, 2016"}}},"pageContext":{"id":"9af50496-906e-5b91-9b14-93616ba4910b"}},"staticQueryHashes":[]}