{"componentChunkName":"component---src-templates-blog-js","path":"/angluar-resource-rails-integration","result":{"data":{"blog":{"id":"4d442626-eebc-598b-be4d-7a42ded631dd","html":"<p>最近本来是在折腾 parse angular rails 的一个项目。一直想把 parse 封装成和 rails 自带的 activerecord 那样的的 api 但是最终由于各种原因还是放弃了。整体来说还是因为 parse 的社区不够大，需求量不够大，导致周边做的不是很给力。要啥啥没有也就罢了，关键是 parse 目前处于高不成低不就的地步：要啥有啥，但是，做的不好，不完善。</p>\n<p>浪费了一天在 <code class=\"language-text\">parse-resource</code> 上无果很是伤心。总想做点东西去弥补下损失，起码找到个可以用于目前项目的，简化项目开发的东西吧？那就从这个的周边入手吧。我一直都在想如果 backend restful 的这个接口搞定了，那前面就可以尝试 <code class=\"language-text\">angular-resource</code> 了。虽说目前后端没有搞定，但是我们依然可以去尝试它。</p>\n<p><code class=\"language-text\">angular-resource</code> 就是一个可以简化 <code class=\"language-text\">angular</code> 写 restful 接口的工具。之前不使用它是因为有这样一个疑问：我并不是仅仅有 restful CRUD 的接口。当我有其他的自定义的动作的时候 <code class=\"language-text\">angular-resource</code> 能支持吗？今天我终于把这个问题弄清楚了。</p>\n<p>首先，要给 <code class=\"language-text\">angular-resource</code> 提供一个完整的 restful 的 backend。这里我就用 rails 做了一个。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ApplicationController</span>\n  respond_to <span class=\"token symbol\">:json</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">index</span></span>\n    <span class=\"token variable\">@posts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>all\n\n    respond_with <span class=\"token variable\">@posts</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n\n    respond_with <span class=\"token variable\">@post</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>update_attributes<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">destroy</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>destroy <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">reset</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n      <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'reset as default content'</span>\n      <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n    <span class=\"token keyword\">end</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">top2</span></span>\n    <span class=\"token variable\">@posts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    respond_with <span class=\"token variable\">@posts</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>这个 controller 在错误的处理以及 http code 的返回上可能还有一些问题，但是我们先忽略这些。关键的提供一个如下的 routes。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">resources <span class=\"token symbol\">:posts</span> <span class=\"token keyword\">do</span>\n  member <span class=\"token keyword\">do</span>\n    post <span class=\"token symbol\">:reset</span>\n  <span class=\"token keyword\">end</span>\n  collection <span class=\"token keyword\">do</span>\n    get <span class=\"token symbol\">:top2</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$: rake routes\n\nreset_post POST   /posts/:id/reset(.:format) posts#reset\ntop2_posts GET    /posts/top2(.:format)      posts#top2\n     posts GET    /posts(.:format)           posts#index\n           POST   /posts(.:format)           posts#create\n  new_post GET    /posts/new(.:format)       posts#new\n edit_post GET    /posts/:id/edit(.:format)  posts#edit\n      post GET    /posts/:id(.:format)       posts#show\n           PUT    /posts/:id(.:format)       posts#update\n           DELETE /posts/:id(.:format)       posts#destroy</code></pre></div>\n<p>好，有了这些之后，我们就可以用 <code class=\"language-text\">angular-resource</code> 构建一个 <code class=\"language-text\">Post</code> 的 module 来处理 restful 的请求啦。</p>\n<p>首先 ngResource 的文档在这里 <a href=\"https://docs.angularjs.org/api/ngResource.$resource\">https://docs.angularjs.org/api/ngResource.$resource</a> 虽然大家都吐槽 angular 的文档很糟糕，但是没有别的办法，这个就是最官方的出处了。而且起码我觉得这篇讲的还算说的过去。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">App <span class=\"token operator\">=</span> angular<span class=\"token punctuation\">.</span>module <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ngResource'</span><span class=\"token punctuation\">]</span>\n\nApp<span class=\"token punctuation\">.</span>factory <span class=\"token string\">'Post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>$resource<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  <span class=\"token function\">$resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts/:id/:verb'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'@id'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    reset<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>verb<span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    top2<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>verb<span class=\"token operator\">:</span> <span class=\"token string\">'top2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> isArray<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上所示，对于有自定义的 restful 接口的情况，我提供了一个额外的参数 <code class=\"language-text\">verb</code>。对默认的 restful 接口 <code class=\"language-text\">angular-resource</code> 可以帮我们处理了，我们只需要处理额外的自定义的即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reset: { method: 'POST', params: {verb: 'reset'} }</code></pre></div>\n<p>设置 verb: reset 就可以将这个动作和 url 绑定了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    post <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span>$scope<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">)</span>\n    post<span class=\"token punctuation\">.</span><span class=\"token function\">$reset</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success!!'</span><span class=\"token punctuation\">)</span>\n        $scope<span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> data\n    <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>同理，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">top2: { method: 'GET', params: {verb: 'top2'}, isArray: true }</code></pre></div>\n<p>verb: top2 就对应 posts/top2 的 url。不过这里有一个额外的参数 <code class=\"language-text\">isArray</code> 这个就好像 rails routes 里面声明的 <code class=\"language-text\">collection</code> 一样，说明不是针对单个元素的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">App.controller 'IndexController', ($scope, Post) ->\n  $scope.posts = Post.top2()</code></pre></div>\n<hr>\n<p>虽然这里还没有涉及嵌套的情况，但是整体来说应该是类似的。</p>\n<p>顺便说一句，项目用到了一个 gem <code class=\"language-text\">bower-rails</code> 把 bower 整合进来。可以更简单的安装 各种 css js 资源。<a href=\"https://pete-hamilton.co.uk/2013/07/13/angularjs-and-rails-with-bower/\">https://pete-hamilton.co.uk/2013/07/13/angularjs-and-rails-with-bower/</a> 的讲解推荐一看。</p>\n<p>再多说一句，前面有一篇讲述 webapps 的文章，这篇其实和它也有一点关系。目前我比较看好 angularjs 希望用它作为 webapp 的开发框架。</p>","tableOfContents":"","frontmatter":{"title":"angluar-resource rails integration","date":"July 31, 2013"}}},"pageContext":{"id":"4d442626-eebc-598b-be4d-7a42ded631dd"}},"staticQueryHashes":[]}