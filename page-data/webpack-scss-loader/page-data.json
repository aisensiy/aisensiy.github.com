{"componentChunkName":"component---src-templates-blog-js","path":"/webpack-scss-loader","result":{"data":{"blog":{"id":"e2cb0ff6-8341-50d0-aee1-2ad7ac7bee1b","html":"<h2 id=\"add-css-in-webpack\" style=\"position:relative;\">Add css in webpack<a href=\"#add-css-in-webpack\" aria-label=\"add css in webpack permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前面介绍了 <code class=\"language-text\">webpack</code> 的 <code class=\"language-text\">loader</code> 也提及了它是用来将各种语言转换成 js 的翻译器。但是有一个特殊的情况，就是有一个 <code class=\"language-text\">style-loader</code> 和 <code class=\"language-text\">css-loader</code>，他们并不是 <code class=\"language-text\">js</code> 但是最终可以以 <code class=\"language-text\">text</code> 的形式放到我们打包的那个文件 <code class=\"language-text\">bundle.js</code> 中去，并且这里是将两个 <code class=\"language-text\">loader</code> 一起使用，有点像是 <code class=\"language-text\">filter &amp; pipeline</code> 的模式。虽然这里的 <code class=\"language-text\">style-loader</code> 并不知道为什么要单独分出来，听起来好像是 <code class=\"language-text\">html</code> 的 style 还可以有除了 <code class=\"language-text\">css</code> 之外的东西，不明觉厉。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">css file  | css-loader | style-loader > bundle.js</code></pre></div>\n<p>当然，我们现在都不怎么写纯粹的 <code class=\"language-text\">css</code> 了，都是采用 <code class=\"language-text\">less</code> 或者是 <code class=\"language-text\">sass</code> 写了之后再翻译成 <code class=\"language-text\">css</code>，<code class=\"language-text\">webpack</code> 也支持 <code class=\"language-text\">sass-loader</code> 这样的东西，最终的流程是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sass file | sass-loader | css-loader | style-loader > bundle.js</code></pre></div>\n<h2 id=\"一个例子\" style=\"position:relative;\">一个例子<a href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\" aria-label=\"一个例子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先安装 <code class=\"language-text\">sass-loader</code> 以及其所依赖的 <code class=\"language-text\">sass</code> to <code class=\"language-text\">css</code> 的翻译器 <code class=\"language-text\">node-sass</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev sass-loader node-sass</code></pre></div>\n<p>然后安装 <code class=\"language-text\">style-loader</code> 以及 <code class=\"language-text\">css-loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev style-loader css-loader</code></pre></div>\n<p>和配置 <code class=\"language-text\">es2015</code> 类似，在 <code class=\"language-text\">webpack.config.js</code> 中添加 <code class=\"language-text\">loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n          presets: ['es2015']\n        }\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: \"style!css!sass\"\n      }\n    ]\n  }\n};</code></pre></div>\n<p>这里的 <code class=\"language-text\">loader</code> 是一个 <code class=\"language-text\">pipeline</code> 的感觉，和 <code class=\"language-text\">es2015</code> 的有些不一样。多个 <code class=\"language-text\">loader</code> 以 <code class=\"language-text\">!</code> 分隔，并且顺序是倒序的。</p>\n<p>然后我们添加一个 <code class=\"language-text\">styles</code> 的目录，并且添加两个 <code class=\"language-text\">scss</code> 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── dist\n│   ├── bundle.js\n│   └── index.html\n├── entry.js\n├── module1.js\n├── module2.js\n├── package.json\n├── styles\n│   ├── index.scss\n│   └── theme.scss\n└── webpack.config.js</code></pre></div>\n<p><code class=\"language-text\">index.scss</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@import './theme.scss';</code></pre></div>\n<p><code class=\"language-text\">theme.scss</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">body {\n  background-color: yellow;\n}</code></pre></div>\n<p>这里只用了一个 <code class=\"language-text\">@import</code> 的 <code class=\"language-text\">scss</code> 语法，不过这样也应该足够验证 <code class=\"language-text\">scss</code> 了。</p>\n<p>最后，在 <code class=\"language-text\">entry.js</code> 中添加对 <code class=\"language-text\">index.scss</code> 的引用。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import m1 from './module1'\nimport m2 from './module2'\n\nrequire('./styles/index.scss')\n\nm1();\nm2();</code></pre></div>\n<p>对的，不要怀疑，就是在 <code class=\"language-text\">js</code> 里面引入了 <code class=\"language-text\">scss</code>，<code class=\"language-text\">npm start</code> 一下，看看是不是 <code class=\"language-text\">body</code> 的背景色变了。</p>\n<h2 id=\"拆分-css-和-js\" style=\"position:relative;\">拆分 css 和 js<a href=\"#%E6%8B%86%E5%88%86-css-%E5%92%8C-js\" aria-label=\"拆分 css 和 js permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>不过 <code class=\"language-text\">css</code> 和 <code class=\"language-text\">js</code> 放在一起总觉得怪怪的，可不可以拆分出来？当然可以了，这里需要一个额外的 <code class=\"language-text\">webpack</code> 插件。<code class=\"language-text\">plugin</code> 有点像是 <code class=\"language-text\">webpack</code> 的 <code class=\"language-text\">postprocessor</code> 是在 <code class=\"language-text\">webpack</code> 打包之后进行进一步处理的工具。这里我们用到了 <a href=\"https://github.com/webpack/extract-text-webpack-plugin\">extract-text-webpack-plugin</a> 把 <code class=\"language-text\">css</code> 拆分出来放到一个单独的文件中。</p>\n<p>首先安装</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev extract-text-webpack-plugin</code></pre></div>\n<p>然后修改 <code class=\"language-text\">webpack.config.js</code> 注册这个插件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n          presets: ['es2015']\n        }\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(\"styles.css\")\n  ]\n};</code></pre></div>\n<p>注意，我们的 <code class=\"language-text\">loader</code> 这部分也会采用 <code class=\"language-text\">ExtractTextPlugin</code> 进行重写</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")</code></pre></div>\n<p>然后 <code class=\"language-text\">plugin</code> 这部分说明我们最终要将 <code class=\"language-text\">css</code> 文件保存为 <code class=\"language-text\">styles.css</code>，这里要说明的是 <code class=\"language-text\">styles.css</code> 文件是要遵循 <code class=\"language-text\">webpack.config.js</code> 文件中的 <code class=\"language-text\">output</code> 路径的，也就是说它会保存到 <code class=\"language-text\">dist/styles.css</code>。我们修改一下 <code class=\"language-text\">index.html</code>，引入这个文件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html>\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;title>Document&lt;/title>\n  &lt;link rel=\"stylesheet\" href=\"styles.css\" type=\"text/css\" media=\"screen\" title=\"no title\" charset=\"utf-8\">\n&lt;/head>\n&lt;body>\n  &lt;script type=\"text/javascript\" src=\"bundle.js\">&lt;/script>\n&lt;/body>\n&lt;/html></code></pre></div>\n<p>执行 <code class=\"language-text\">webpack</code> 看看是不是在 <code class=\"language-text\">dist</code> 下多了一个 <code class=\"language-text\">styles.css</code>。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"http://webpack.github.io/docs/tutorials/getting-started/\">webpack get started</a></li>\n<li><a href=\"https://webpack.github.io/docs/loaders.html#loader-order\">webpack loader order</a></li>\n<li><a href=\"https://github.com/webpack/docs/wiki/list-of-plugins\">webpack plugins</a></li>\n<li><a href=\"https://github.com/webpack/extract-text-webpack-plugin\">extract-text-webpack-plugin</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#add-css-in-webpack\">Add css in webpack</a></li>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\">一个例子</a></li>\n<li><a href=\"#%E6%8B%86%E5%88%86-css-%E5%92%8C-js\">拆分 css 和 js</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83\">参考</a></li>\n</ul>","frontmatter":{"title":"Webpack Scss Loader","date":"May 09, 2016"}}},"pageContext":{"id":"e2cb0ff6-8341-50d0-aee1-2ad7ac7bee1b"}},"staticQueryHashes":[]}