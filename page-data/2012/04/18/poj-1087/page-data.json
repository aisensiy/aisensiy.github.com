{"componentChunkName":"component---src-templates-blog-js","path":"/2012/04/18/poj-1087/","result":{"data":{"blog":{"id":"9c1cf8c4-9aef-5e54-870b-39aeb238d377","html":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token comment\">/*\n * 题目: A Plug for UNIX | POJ 1087\n * http://poj.org/problem?id=1087\n *\n * 核心是最大流算法\n * 不过我倒是觉得更重要的是如何构造这个图\n *\n * @author: aisensiy(http://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIM</span> <span class=\"token expression\"><span class=\"token number\">600</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">100000</span></span></span>\n\n<span class=\"token keyword\">int</span> graph<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">//二维数组的图结构</span>\n<span class=\"token keyword\">int</span> q<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//广度遍历所有需要的队列</span>\n<span class=\"token keyword\">int</span> front<span class=\"token punctuation\">,</span> rear<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//队列的头尾</span>\n<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//残留网络</span>\n\n<span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//追朔广度遍历结果的前驱数组</span>\n\nmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> id<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//用于生成字符串映射正数</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> order <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//初始ID</span>\n<span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * &lt;h2>关于构建最大流的图&lt;/h2>\n * 在算法导论里面有讲，这种多源点多汇点的网络问题，都可以\n * 为其添加一个超级源点与超级汇点来解决。\n * 那么如何构建这个图使之转化为通解的最大流问题就成了这个\n * 题的重点。\n *\n * 首先按照题意可知，设备算是源点，而插口算是汇点。\n * 那么需要在设备之前添加超级源点s，在插口之后添加超级汇点\n * t。\n *\n * 由于插口的数量是有限的，那么插口到超级汇点的容量c(u, t)应\n * 当等于插口的个数，counter(u) = 1。\n * 这个个数我们可以在输入的时候计算出来。\n * 超级源点与设备之间的容量c(s, v)可以为构建这种方法的默认值INF。\n *\n * &lt;h2>关于如何把字符串转换成图中的节点&lt;/h2>\n * 这是我一开始很头疼的事情。\n * 在网上找了一些这道题的解析，受益匪浅。\n * http://blog.csdn.net/ChinaCzy/article/details/5713749\n * 这个我觉得非常不错。\n * 作者用一个map&lt;string, int>为输入的字符串指定一个id就像是数据库里面\n * 设定为自增的主键一样。非常不错的想法。\n */</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">create_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring plug<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> adaptor<span class=\"token punctuation\">;</span>\n\n\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcin<span class=\"token operator\">>></span>plug<span class=\"token punctuation\">;</span>\n\t\tid<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tgraph<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tcin<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcin<span class=\"token operator\">>></span>device<span class=\"token operator\">>></span>plug<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tid<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tgraph<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n\t\tgraph<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 建立适配器插口与接口的关系，由于适配器是无限多的</span>\n\t<span class=\"token comment\">// 设定capacity = INF</span>\n\tcin<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcin<span class=\"token operator\">>></span>adaptor<span class=\"token operator\">>></span>plug<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>adaptor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>adaptor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\tgraph<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>adaptor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 广度遍历</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> front <span class=\"token operator\">=</span> rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq<span class=\"token punctuation\">[</span>rear<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>rear <span class=\"token operator\">></span> front<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tu <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>front<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tpre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n\t\t\t\tq<span class=\"token punctuation\">[</span>rear<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 最大流算法</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max_flow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\tinc <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span> v<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">;</span> v<span class=\"token operator\">=</span>u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tu <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> inc<span class=\"token punctuation\">)</span> inc <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span> v<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">;</span> v<span class=\"token operator\">=</span>u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tu <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> inc<span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> inc<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tmax <span class=\"token operator\">+=</span> inc<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">create_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">max_flow</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>m <span class=\"token operator\">-</span> max<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"","frontmatter":{"title":"POJ 1087","date":"April 18, 2012"}}},"pageContext":{"id":"9c1cf8c4-9aef-5e54-870b-39aeb238d377"}},"staticQueryHashes":[]}