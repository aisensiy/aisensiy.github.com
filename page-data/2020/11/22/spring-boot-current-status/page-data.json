{"componentChunkName":"component---src-templates-blog-js","path":"/2020/11/22/spring-boot-current-status/","result":{"data":{"blog":{"id":"0f171a22-d74e-5373-93b2-9bed45a03fef","html":"<h2 id=\"目前的问题\" style=\"position:relative;\">目前的问题<a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"目前的问题 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>很久之前记录的一篇文章<a href=\"/spring-mvc-error-handler\">在用 Spring MVC 构建 RESTful API 时进行验证和异常处理</a>，讨论了基本的 rest 的校验思路：</p>\n<ol>\n<li>区分 <code>FormObject</code> 和 <code>Domain Entity</code> 尽量以 user-case 的场景为每一个 input 做独立的校验；</li>\n<li>基本结构校验（Bean Validation）和业务校验（Service Business Logic）分别处理；</li>\n<li>基本结构校验在 MVC 层，通过 <code>ControllerAdvice</code> 和 <code>BindingResult</code> 对其校验内容做转换暴露给客户端；</li>\n</ol>\n<p>在最近几年的项目里，基本还是依照这个思路来的。但是有以下几个痛点没有解决：</p>\n<ol>\n<li>业务逻辑和基本校验的逻辑很多时候边界很模糊，对于客户端来说，其实没什么区别，强行区分显得不是那么优雅；</li>\n<li>随着业务逻辑的越发复杂，大量的校验逻辑肯定是会放在 <code>application</code> 层的，那么关注点分离的需求愈发明显，将校验逻辑和正常流程区分才能让代码变得更清晰易懂；</li>\n<li><code>Exception</code> 的类别越来越多，报错信息五花八门，需要对其进行统一的梳理，并整理出一套规则，方便后续的维护开发套用；</li>\n</ol>\n<h2 id=\"目前的尝试\" style=\"position:relative;\">目前的尝试<a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E5%B0%9D%E8%AF%95\" aria-label=\"目前的尝试 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>为了解决以上问题，曾经做过以下的改进：</p>\n<p>对于第一条，并没有做处理，依然让业务逻辑和基本校验做了分离，尤其是对于那种需要触碰数据库的业务（比如查重）还是把它当作是业务逻辑的，仅仅是说通过 <code>BindingResult</code> 返回一致的报错结果了。这部分还是很希望能够把一些更复杂的校验也放到 Bean Validation 中去的。</p>\n<p>对于第二条，首先在 <code>application</code> 层也提供了一个 <code>ValidationResult</code> 它实现了 <code>org.springframework.validation.Errors</code> 可是说是在 <code>application</code> 层 <code>BindingResult</code> 的同类了，这样子就可以在 <code>application</code> 层返回和 <code>web</code> 层一样的报错结果了。然后提出了一个 <code>Validator</code> 的概念，专门用来做校验工作。举一个例子，下面是一个创建 <code>AutoML</code> 的方法，可以看到第一步就是做校验：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token class-name\">AutoML</span> <span class=\"token function\">createAutoML</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateModelCommand</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    autoMLValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>而 <code>AutoMLValidator</code> 内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoMLValidator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateModelCommand</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ValidationResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    modelTemplateValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    autoMLNameValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resourceValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidRequestException</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    autoMLDataBindingsValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidRequestException</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    parallelRunningCountValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ClusterResource</span> clusterResource <span class=\"token operator\">=</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    resourceRelatedValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateJobLimitationAndComputationAndStorage</span><span class=\"token punctuation\">(</span>\n        command<span class=\"token punctuation\">.</span><span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clusterResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">hasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidRequestException</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，这里面使用了 <code>web</code> 层类似的逻辑：</p>\n<ol>\n<li>有一个和 <code>BindingResult</code> 等价的 <code>ValidationResult</code> 用于收集校验结果;</li>\n<li>当校验不通过时，抛出异常 <code>InvalidRequestException(validationResult)</code>;</li>\n</ol>\n<p>这个方法很好的将业务逻辑异常拆出来了，还是很能解决问题的，也没太多副作用。硬要说的话就是 <code>ValidationResult</code> 有点难看，<code>InvalidRequestException</code> 有点像是 web 层漏到 application 层了，应该用个更好的类替代。</p>\n<p>对于第三点，整理出了一个类 <code>ErrorCode</code> 用来安放 <code>ErrorCode</code> 与 <code>ErrorMessage</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ErrorCode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">TRANSFER_REQUEST_TARGET_USER_EXISTED</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"资源已经有目标用户，请先将之前请求撤销\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">RESOURCE_NAME_NOTMATCH</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 资源名称不匹配\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">RESOURCE_TRANSFER_TO_SELF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 不许与资源拥有者将资源传递给自己\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">RESET_PASSWORD_MISMATCH</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无效的验证码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">CODE_MISMATCH</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无效的验证码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  \n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">ErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在具体的报错的时候将 ad-hoc 的报错替换成这样的 KV 对即可。很显然这个写法有点像一个低配版本的国际化方案，显得有点拙劣，干嘛不直接换成 i18n 的 messages 呢？并且这个报错的格式也没有做统一，依然显得有点混乱。</p>\n<p>为了进一步的解决以上依然存在的问题，最近也开始重新看了 spring / springmvc / springboot 异常处理和校验的一些内容，后面应该会做以下事情：</p>\n<ol>\n<li>梳理目前 spring exception 的方式</li>\n<li>提出适合当前项目的最佳实践</li>\n<li>对目前的校验做改进，提出校验方面的最佳实践</li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E9%97%AE%E9%A2%98\">目前的问题</a></li>\n<li><a href=\"#%E7%9B%AE%E5%89%8D%E7%9A%84%E5%B0%9D%E8%AF%95\">目前的尝试</a></li>\n</ul>","frontmatter":{"title":"对目前校验与异常处理的总结","date":"November 22, 2020"},"excerpt":"目前的问题 很久之前记录的一篇文章在用 Spring MVC 构建 RESTful API 时进行…"}},"pageContext":{"id":"0f171a22-d74e-5373-93b2-9bed45a03fef"}},"staticQueryHashes":["4202924991"]}