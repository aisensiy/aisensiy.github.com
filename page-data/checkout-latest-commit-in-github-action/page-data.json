{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/checkout-latest-commit-in-github-action",
    "result": {"data":{"blog":{"id":"9cf571c4-8dd7-59fb-a356-83c81daf7072","html":"<p>有 helm charts 管理经验的人都晓得 helm charts 发布后需要打包一个 tar 放到目录里面。helm 会要求一个特定的目录结构获取不同版本的 tar 包。在 openbayes 就有这么一个 helm charts 项目里面存放了一系列的 tar 包。目前来看这些 tar 包都很小（只有几百 K）为了方便部署，就直接把这些文件和 nginx 打包到镜像里了，部署起来就能直接提供服务了，没有其他对象存储之类的外部依赖。</p>\n<p>我们也希望把打包部署的流程通过 github workflow 实现自动化。按照上面的描述，可以分成两个步骤：</p>\n<ol>\n<li>release: 提交一个新 tag 触发 release 流程，将特定目录的文件达成 tar 包并以特定的名字保存到 packages 目录下，然后提交这个 tar 包</li>\n<li>build-and-push: 创建一个新的镜像包含刚才打的 tar 包，并提交到镜像仓库</li>\n</ol>\n<p>同时，为了适用 <a href=\"https://docs.github.com/en/actions/learn-github-actions/reusing-workflows\">reusable workflow</a> ，可调用的 workflow 必须是一个独立的 job 出现在调用方的 workflow 里。我们需要把上述两个工作分成 github workflow 中两个独立的 job：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> release a new helm version\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  \n  <span class=\"token key atrule\">release</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">...</span>\n\n  <span class=\"token key atrule\">build-and-push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> release\n    <span class=\"token punctuation\">...</span></code></pre></div>\n<p>但遇到一个很奇怪的问题，<strong>在 release 中明明提交了新的内容，在 build-and-push 中却拿不到</strong>。我的第一感觉就怀疑是 github 的 <code>actions/checkout@v2</code> action 的行为有点问题。简单搜索了下，发现 <code>actions/checkout@v2</code> 默认会获取触发这次 github workflow 的 commit。也就是说，虽然我在 release 有新的提交，但是我在下一步 build-and-push 的 job 里还是 checkout 了上一个 commit 而已。</p>\n<p>查看 <code>actions/checkout@v2</code> 的 README 发现，如果想要修改上述的行为，需要修改其 <code>ref</code> 参数。修改成想要获取最新 commit 的 branch 名称即可。而具体在 github action 里则可以使用 <code>github.ref_name</code>（在 <a href=\"https://docs.github.com/en/actions/learn-github-actions/contexts#github-context\">https://docs.github.com/en/actions/learn-github-actions/contexts#github-context</a> 可以看到相关文档）这个变量获取当前的 branch。这里我提供一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test commit\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">make-commit</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest \n    \n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          FILENAME=`date  +\"%y%m%d%H%M%S\"`.txt\n          echo 123 > $FILENAME\n          echo \"::set-output name=$FILENAME\"</span>\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> write\n      \n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> stefanzweifel/git<span class=\"token punctuation\">-</span>auto<span class=\"token punctuation\">-</span>commit<span class=\"token punctuation\">-</span>action@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">commit_message</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"add ${{ steps.write.outputs.name }}\"</span>\n  \n  <span class=\"token key atrule\">checkout-commit</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">needs</span><span class=\"token punctuation\">:</span> make<span class=\"token punctuation\">-</span>commit\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ref</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.ref_name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\"># &lt;-------- 如果不修改这里就拿不到上面提交的文件</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          ls -lh</span></code></pre></div>\n<p>我在 <a href=\"https://github.com/aisensiy/github-checkout-test\">github-checkout-test</a> 这个仓库里做了上述的 workflow 的测试。增加 <code>ref</code> 参数为 <code>${{ github.ref_name }}</code> 就可以获取最新的提交文件了。</p>","tableOfContents":"","frontmatter":{"title":"在 Github Actions 中获取最最最新的 commit","date":"December 09, 2021","tags":["github-action","tricks"]},"excerpt":"有 helm charts 管理经验的人都晓得 helm charts 发布后需要打包一个 tar…"}},"pageContext":{"id":"9cf571c4-8dd7-59fb-a356-83c81daf7072"}},
    "staticQueryHashes": ["4202924991"]}