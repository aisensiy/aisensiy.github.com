{"componentChunkName":"component---src-templates-blogs-js","path":"/page/20","result":{"data":{"blogs":{"nodes":[{"id":"220d107b-0c85-5da6-92a6-cb120b4d67e5","frontmatter":{"title":"Redux get started","date":"2016 May-10"},"html":"<h2 id=\"what-is-redux\" style=\"position:relative;\">what is redux<a href=\"#what-is-redux\" aria-label=\"what is redux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">redux</code> 是一个目前比较流行的前端框架，它和 <code class=\"language-text\">react</code> 配合使用，作为 <code class=\"language-text\">react</code> 的 数据层。它继承了 <code class=\"language-text\">flux</code> 的思想，构建一个 <code class=\"language-text\">store</code> 保存前端所有的 <code class=\"language-text\">state</code>，但是目前这样的模式也逐渐出现了一些争议，尤其是当一个项目变得比较庞大的时候，在一个 <code class=\"language-text\">store</code> 里面存储单个页面相关的数据并没有非常大的意义，这部分我以后再说。</p>\n<p><code class=\"language-text\">redux</code> 的几个关键概念 <code class=\"language-text\">action</code> <code class=\"language-text\">reducer</code> <code class=\"language-text\">store</code> 在 <a href=\"http://redux.js.org\">http://redux.js.org</a> 都有详细的介绍，尤其是在官网推荐的教学视频介绍了 <code class=\"language-text\">reduex</code> 的一些实现细节，对理解 <code class=\"language-text\">redux</code> 是如何工作的有很大的帮助，强烈推荐观看</p>\n<h2 id=\"a-simple-redux-example\" style=\"position:relative;\">a simple redux example<a href=\"#a-simple-redux-example\" aria-label=\"a simple redux example permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先安装 <code class=\"language-text\">redux</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save redux</code></pre></div>\n<p>然后我们构建一个简单的目录结构</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── actions\n├── dist\n│   ├── bundle.js\n│   ├── index.html\n│   └── styles.css\n├── entry.js\n├── package.json\n├── reducers\n├── styles\n│   ├── index.scss\n│   └── theme.scss\n└── webpack.config.js</code></pre></div>\n<p>两个新的文件夹 <code class=\"language-text\">actions</code> 和 <code class=\"language-text\">reducers</code> 分别用于存放 <code class=\"language-text\">action</code> 和 <code class=\"language-text\">reducer</code>。然后我们实现一下 <code class=\"language-text\">redux</code> 官网没有视图的 <code class=\"language-text\">counter</code> 的例子，具体代码如下，其中 <code class=\"language-text\">actions</code> 用于定义应用所支持的动作，有点像是 <code class=\"language-text\">request</code>，然后 <code class=\"language-text\">reducer</code> 定义依据动作的处理，有点像是 <code class=\"language-text\">controller</code> 中对应的一个个的方法。</p>\n<p><code class=\"language-text\">actions/index.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export const increment = () => {\n  return {\n    type: \"INCREMENT\"\n  }\n}\n\nexport const decrement = () => {\n  return {\n    type: \"DECREMENT\"\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">reducers/counter.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default (state=0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n      break;\n    case 'DECREMENT':\n      return state - 1;\n      break;\n    default:\n      return 0;\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">entry.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require('./styles/index.scss');\n\nimport counter from './reducers/counter';\nimport { increment, decrement } from './actions/index';\nimport { createStore } from 'redux';\n\nlet store = createStore(counter);\n\nconsole.log(store.getState());\n\nlet unsubscribe = store.subscribe(() => console.log(store.getState()));\n\nstore.dispatch(increment());\nstore.dispatch(increment());\nstore.dispatch(decrement());\nstore.dispatch(decrement());\n\nunsubscribe();</code></pre></div>\n<h2 id=\"add-test-for-reducer\" style=\"position:relative;\">add test for reducer<a href=\"#add-test-for-reducer\" aria-label=\"add test for reducer permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前端越来越复杂，相应的测试也是必不可少的了。我们目前的应用比较简单，最复杂的就是 <code class=\"language-text\">reducers</code> 所以给 <code class=\"language-text\">reducers</code> 添加一些测试。我们这里使用 <code class=\"language-text\">mocha</code> 作为测试框架。<code class=\"language-text\">redux</code> 官网提供了如何写测试的<a href=\"http://redux.js.org/docs/recipes/WritingTests.html\">文档</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev mocha expect</code></pre></div>\n<p>其中 <code class=\"language-text\">expect</code> 是一个支持比较 fancy 的 <code class=\"language-text\">assert</code> 语法的库。</p>\n<p>为了和 <code class=\"language-text\">babel</code> 一起使用需要另外一个东西 <code class=\"language-text\">babel-register</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev babel-register</code></pre></div>\n<p>添加一个 <code class=\"language-text\">test</code> 目录</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir test</code></pre></div>\n<p>添加 <code class=\"language-text\">reducer</code> 的测试 <code class=\"language-text\">test/reducers/counter.spec.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import expect from 'expect';\nimport counter from '../../reducers/counter';\n\ndescribe('counter', () => {\n  it('should get init state 0', () => {\n    expect(counter(undefined, {})).toBe(0);\n  });\n  it('should increase state', () => {\n    expect(counter(1, { type: 'INCREMENT' })).toBe(2);\n  });\n  it('should decrease state', () => {\n    expect(counter(1, { type: 'DECREMENT' })).toBe(0);\n  });\n  it('should stay same with unknown action', () => {\n    expect(counter(1, { type: 'NO_ACTION' })).toBe(1);\n  });\n});</code></pre></div>\n<p>是不是觉得全天下的 <code class=\"language-text\">spec</code> 都一样？</p>\n<p>然后我们执行 <code class=\"language-text\">mocha --compilers js:babel-register --recursive</code> 跑测试。</p>\n<p>是不是报错了？因为我们没有 <code class=\"language-text\">.babelrc</code> 文件。因为之前我觉得这是一个隐式声明，不如在 <code class=\"language-text\">webpack.config.js</code> 显式声明好。但是没办法，其他地方也要用，改回去好了。</p>\n<p><code class=\"language-text\">.babelrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"presets\": [\"es2015\"]\n}</code></pre></div>\n<p><code class=\"language-text\">webpack.config.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\"\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(\"styles.css\")\n  ]\n};</code></pre></div>\n<p>和 <code class=\"language-text\">npm start</code> 类似，我们可以写一个 <code class=\"language-text\">npm test</code> 把那一堆命令移过去。</p>\n<p><code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"name\": \"test-redux\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"dependencies\": {\n    \"redux\": \"^3.5.2\",\n    \"webpack\": \"^1.13.0\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.8.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"expect\": \"^1.20.1\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"mocha\": \"^2.4.5\",\n    \"node-sass\": \"^3.7.0\",\n    \"sass-loader\": \"^3.2.0\",\n    \"style-loader\": \"^0.13.1\",\n    \"webpack\": \"^1.13.0\"\n  },\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --content-base dist/\",\n    \"test\": \"mocha --compilers js:babel-register --recursive\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}</code></pre></div>\n<p>现在再跑一下 <code class=\"language-text\">npm test</code> 就和刚才一样的结果。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"http://redux.js.org\">redux</a></li>\n<li><a href=\"https://github.com/reactjs/redux/tree/master/examples/counter\">redux counter example</a></li>\n<li><a href=\"http://redux.js.org/docs/recipes/WritingTests.html\">redux writing tests</a></li>\n<li><a href=\"https://babeljs.io/docs/usage/babelrc/\">babelrc</a></li>\n</ol>","fields":{"slug_without_date":"/redux-get-started"}},{"id":"d29fbbbb-02f4-5a60-9514-da0605a14f33","frontmatter":{"title":"Webpack Loader","date":"2016 May-09"},"html":"<h2 id=\"loader-是做什么的\" style=\"position:relative;\">loader 是做什么的<a href=\"#loader-%E6%98%AF%E5%81%9A%E4%BB%80%E4%B9%88%E7%9A%84\" aria-label=\"loader 是做什么的 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>Loaders allow you to preprocess files as you require() or “load” them. Loaders are kind of like “tasks” are in other build tools, and provide a powerful way to handle frontend build steps. Loaders can transform files from a different language like, CoffeeScript to JavaScript, or inline images as data URLs. Loaders even allow you to do things like require() css files right in your JavaScript!</p>\n</blockquote>\n<p><code class=\"language-text\">webpack</code> 本身并不能处理乱起八糟的语言，什么 <code class=\"language-text\">css</code> <code class=\"language-text\">scss</code> <code class=\"language-text\">es6</code> <code class=\"language-text\">jsx</code> 都不可以。<code class=\"language-text\">loader</code> 就是一个额外的 <code class=\"language-text\">preprocessor</code> 用于将其他语言翻译成 <code class=\"language-text\">js</code> 然后再让 <code class=\"language-text\">webpack</code> 去打包处理。那么目前我们需要处理的<em>其他语言</em>主要就是 <code class=\"language-text\">scss</code> <code class=\"language-text\">es6</code> <code class=\"language-text\">jsx</code> 这几个。</p>\n<h2 id=\"在-webpack-的项目中使用-babel\" style=\"position:relative;\">在 webpack 的项目中使用 babel<a href=\"#%E5%9C%A8-webpack-%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-babel\" aria-label=\"在 webpack 的项目中使用 babel permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">babel</code> 是目前比较主流的 <code class=\"language-text\">es6</code> to <code class=\"language-text\">js</code> 的编译器，通过简单的包装就有了在 <code class=\"language-text\">webpack</code> 中将 <code class=\"language-text\">es6</code> 转换成 <code class=\"language-text\">js</code> 的 <code class=\"language-text\">babel-loader</code>。<code class=\"language-text\">babel</code> 目前支持 <code class=\"language-text\">es2015</code> (ECMAScript 2015 is the newest version of the ECMAScript standard)，采用 <code class=\"language-text\">webpack</code> + <code class=\"language-text\">babel</code> 的模式，我们就可以直接写 <code class=\"language-text\">es2015</code> 的 js 脚本。</p>\n<h2 id=\"一个例子\" style=\"position:relative;\">一个例子<a href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\" aria-label=\"一个例子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先自然是安装 <code class=\"language-text\">babel-loader</code> 了。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev babel-loader babel-core</code></pre></div>\n<p>需要说明的是 <code class=\"language-text\">babel 6.x</code> 将其可以翻译的语言做了拆分，目前还没有支持默认的翻译器，需要我们在 <code class=\"language-text\">package.json</code> 中显示的安装所需要的翻译器。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install babel-preset-es2015 --save-dev</code></pre></div>\n<p>这里就是显示的说明我需要 <code class=\"language-text\">es2015</code> 的翻译器，<strong>不过这个情况貌似在以后的版本会做调整</strong>。</p>\n<p>然后需要在 <code class=\"language-text\">webpack.config.js</code> 提供一个 <code class=\"language-text\">loader</code> 的声明，说明什么样子的文件需要使用 <code class=\"language-text\">babel-loader</code> 这个 <code class=\"language-text\">loader</code> 做处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n          presets: ['es2015']\n        }\n      }\n    ]\n  }\n};</code></pre></div>\n<p>可以看到在 <code class=\"language-text\">webpack.config.js</code> 中多了一个 <code class=\"language-text\">module.loaders</code>，通过 <code class=\"language-text\">test</code> 匹配末尾为 <code class=\"language-text\">.js</code> 的文件，并且忽略 <code class=\"language-text\">node_modules</code> 文件夹下的所有文件。当然，我们也可以加上 <code class=\"language-text\">include</code> 强调只处理某个文件夹下的文件。然后 <code class=\"language-text\">query</code> 这部分是 <code class=\"language-text\">babel-loader</code> 所需要的一个声明，指定需要什么具体的翻译器对这些文件做处理。在 <code class=\"language-text\">babel</code> 官方文档 <a href=\"https://babeljs.io/docs/setup/#installation\">https://babeljs.io/docs/setup/#installation</a> 中有另外一种申明翻译器的方法：将 <code class=\"language-text\">query</code> 写在一个单独的 <code class=\"language-text\">.babelrc</code> 文件下，我个人觉得这样让配置过于分散了，还是采用了直接在 <code class=\"language-text\">webpack.config.js</code> 声明的办法。</p>\n<p>然后，我们将上一部分的 <code class=\"language-text\">module1</code> <code class=\"language-text\">module2</code> 用 <code class=\"language-text\">es2015</code> 的语法方式写出来。</p>\n<p>module1.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default () => {\n  console.log(\"module1\");\n}</code></pre></div>\n<p>module2.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export default () => {\n  console.log(\"module2\");\n}</code></pre></div>\n<p>entry.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import m1 from './module1'\nimport m2 from './module2'\n\nm1();\nm2();</code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://babeljs.io/docs/setup/#installation\">Using babel</a></li>\n<li><a href=\"https://webpack.github.io/docs/loaders.html\">Webpack loaders</a></li>\n</ol>","fields":{"slug_without_date":"/webpack-loader"}},{"id":"e2cb0ff6-8341-50d0-aee1-2ad7ac7bee1b","frontmatter":{"title":"Webpack Scss Loader","date":"2016 May-09"},"html":"<h2 id=\"add-css-in-webpack\" style=\"position:relative;\">Add css in webpack<a href=\"#add-css-in-webpack\" aria-label=\"add css in webpack permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前面介绍了 <code class=\"language-text\">webpack</code> 的 <code class=\"language-text\">loader</code> 也提及了它是用来将各种语言转换成 js 的翻译器。但是有一个特殊的情况，就是有一个 <code class=\"language-text\">style-loader</code> 和 <code class=\"language-text\">css-loader</code>，他们并不是 <code class=\"language-text\">js</code> 但是最终可以以 <code class=\"language-text\">text</code> 的形式放到我们打包的那个文件 <code class=\"language-text\">bundle.js</code> 中去，并且这里是将两个 <code class=\"language-text\">loader</code> 一起使用，有点像是 <code class=\"language-text\">filter &amp; pipeline</code> 的模式。虽然这里的 <code class=\"language-text\">style-loader</code> 并不知道为什么要单独分出来，听起来好像是 <code class=\"language-text\">html</code> 的 style 还可以有除了 <code class=\"language-text\">css</code> 之外的东西，不明觉厉。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">css file  | css-loader | style-loader > bundle.js</code></pre></div>\n<p>当然，我们现在都不怎么写纯粹的 <code class=\"language-text\">css</code> 了，都是采用 <code class=\"language-text\">less</code> 或者是 <code class=\"language-text\">sass</code> 写了之后再翻译成 <code class=\"language-text\">css</code>，<code class=\"language-text\">webpack</code> 也支持 <code class=\"language-text\">sass-loader</code> 这样的东西，最终的流程是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sass file | sass-loader | css-loader | style-loader > bundle.js</code></pre></div>\n<h2 id=\"一个例子\" style=\"position:relative;\">一个例子<a href=\"#%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90\" aria-label=\"一个例子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先安装 <code class=\"language-text\">sass-loader</code> 以及其所依赖的 <code class=\"language-text\">sass</code> to <code class=\"language-text\">css</code> 的翻译器 <code class=\"language-text\">node-sass</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev sass-loader node-sass</code></pre></div>\n<p>然后安装 <code class=\"language-text\">style-loader</code> 以及 <code class=\"language-text\">css-loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev style-loader css-loader</code></pre></div>\n<p>和配置 <code class=\"language-text\">es2015</code> 类似，在 <code class=\"language-text\">webpack.config.js</code> 中添加 <code class=\"language-text\">loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n          presets: ['es2015']\n        }\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: \"style!css!sass\"\n      }\n    ]\n  }\n};</code></pre></div>\n<p>这里的 <code class=\"language-text\">loader</code> 是一个 <code class=\"language-text\">pipeline</code> 的感觉，和 <code class=\"language-text\">es2015</code> 的有些不一样。多个 <code class=\"language-text\">loader</code> 以 <code class=\"language-text\">!</code> 分隔，并且顺序是倒序的。</p>\n<p>然后我们添加一个 <code class=\"language-text\">styles</code> 的目录，并且添加两个 <code class=\"language-text\">scss</code> 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── dist\n│   ├── bundle.js\n│   └── index.html\n├── entry.js\n├── module1.js\n├── module2.js\n├── package.json\n├── styles\n│   ├── index.scss\n│   └── theme.scss\n└── webpack.config.js</code></pre></div>\n<p><code class=\"language-text\">index.scss</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@import './theme.scss';</code></pre></div>\n<p><code class=\"language-text\">theme.scss</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">body {\n  background-color: yellow;\n}</code></pre></div>\n<p>这里只用了一个 <code class=\"language-text\">@import</code> 的 <code class=\"language-text\">scss</code> 语法，不过这样也应该足够验证 <code class=\"language-text\">scss</code> 了。</p>\n<p>最后，在 <code class=\"language-text\">entry.js</code> 中添加对 <code class=\"language-text\">index.scss</code> 的引用。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import m1 from './module1'\nimport m2 from './module2'\n\nrequire('./styles/index.scss')\n\nm1();\nm2();</code></pre></div>\n<p>对的，不要怀疑，就是在 <code class=\"language-text\">js</code> 里面引入了 <code class=\"language-text\">scss</code>，<code class=\"language-text\">npm start</code> 一下，看看是不是 <code class=\"language-text\">body</code> 的背景色变了。</p>\n<h2 id=\"拆分-css-和-js\" style=\"position:relative;\">拆分 css 和 js<a href=\"#%E6%8B%86%E5%88%86-css-%E5%92%8C-js\" aria-label=\"拆分 css 和 js permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>不过 <code class=\"language-text\">css</code> 和 <code class=\"language-text\">js</code> 放在一起总觉得怪怪的，可不可以拆分出来？当然可以了，这里需要一个额外的 <code class=\"language-text\">webpack</code> 插件。<code class=\"language-text\">plugin</code> 有点像是 <code class=\"language-text\">webpack</code> 的 <code class=\"language-text\">postprocessor</code> 是在 <code class=\"language-text\">webpack</code> 打包之后进行进一步处理的工具。这里我们用到了 <a href=\"https://github.com/webpack/extract-text-webpack-plugin\">extract-text-webpack-plugin</a> 把 <code class=\"language-text\">css</code> 拆分出来放到一个单独的文件中。</p>\n<p>首先安装</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev extract-text-webpack-plugin</code></pre></div>\n<p>然后修改 <code class=\"language-text\">webpack.config.js</code> 注册这个插件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  entry: [\n    './entry'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\",\n        query: {\n          presets: ['es2015']\n        }\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(\"styles.css\")\n  ]\n};</code></pre></div>\n<p>注意，我们的 <code class=\"language-text\">loader</code> 这部分也会采用 <code class=\"language-text\">ExtractTextPlugin</code> 进行重写</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\", \"sass-loader\")</code></pre></div>\n<p>然后 <code class=\"language-text\">plugin</code> 这部分说明我们最终要将 <code class=\"language-text\">css</code> 文件保存为 <code class=\"language-text\">styles.css</code>，这里要说明的是 <code class=\"language-text\">styles.css</code> 文件是要遵循 <code class=\"language-text\">webpack.config.js</code> 文件中的 <code class=\"language-text\">output</code> 路径的，也就是说它会保存到 <code class=\"language-text\">dist/styles.css</code>。我们修改一下 <code class=\"language-text\">index.html</code>，引入这个文件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html>\n&lt;head>\n  &lt;meta charset=\"UTF-8\">\n  &lt;title>Document&lt;/title>\n  &lt;link rel=\"stylesheet\" href=\"styles.css\" type=\"text/css\" media=\"screen\" title=\"no title\" charset=\"utf-8\">\n&lt;/head>\n&lt;body>\n  &lt;script type=\"text/javascript\" src=\"bundle.js\">&lt;/script>\n&lt;/body>\n&lt;/html></code></pre></div>\n<p>执行 <code class=\"language-text\">webpack</code> 看看是不是在 <code class=\"language-text\">dist</code> 下多了一个 <code class=\"language-text\">styles.css</code>。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"http://webpack.github.io/docs/tutorials/getting-started/\">webpack get started</a></li>\n<li><a href=\"https://webpack.github.io/docs/loaders.html#loader-order\">webpack loader order</a></li>\n<li><a href=\"https://github.com/webpack/docs/wiki/list-of-plugins\">webpack plugins</a></li>\n<li><a href=\"https://github.com/webpack/extract-text-webpack-plugin\">extract-text-webpack-plugin</a></li>\n</ol>","fields":{"slug_without_date":"/webpack-scss-loader"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":20,"pageCount":36}}},"pageContext":{"limit":3,"skip":57}},"staticQueryHashes":[]}