{"componentChunkName":"component---src-templates-blogs-js","path":"/page/20/","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"daed1149-a5c1-5cfa-b186-030a641509bc","frontmatter":{"title":"一道简单的图算法题 El Nino !","date":"2017 October-25"},"html":"<p><a href=\"https://www.hackerearth.com/\">HackerEarch</a> 是我最近发觉的一个不错的算法练习的平台。这里首先对这个平台做一些介绍，包括它与其他平台相比的优缺点。然后介绍一个简单的图算法题的解法。</p>\n<h1 id=\"hackerearth-又一个编程练习网站\" style=\"position:relative;\">HackerEarth 又一个编程练习网站<a href=\"#hackerearth-%E5%8F%88%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99\" aria-label=\"hackerearth 又一个编程练习网站 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>虽然自己的工作和复杂的算法关系不是很大，但是始终觉得这种对基础的熟练掌握和了解是做各种计算机行业相关工作的基础，然后自己也是总觉得自己在这方面有着一些兴趣，所有会经常找一些练习算法的平台刷刷题。之前有使用过 TopCoder、HackerRank、LeetCode 等。和 HackerRank 类似，HackerEarth 也是出自印度小哥之手。</p>\n<p>虽然它本身有很多的问题，比如测试的执行不够稳定，比如很多题目的测试用例很少，比如 web page 存在各种展示的 bug等。但是 HackerEarth 有一个功能让我眼前一亮：它对各种题目进行了清晰的分门别类，让我这种练习者可以更针对性的进行训练。</p>\n<p>另外一个对练习者友好的功能是它可以随意的查看一个 test cases 的输入和输出。如果我的一个提交出错了可以直接点击链接就能看到具体的输入和输出，虽然 HackerRank 也可以查看具体某一个 TestCase 但是需要自己通过在其网站上获取的点券购买，相比这里直接点击还是稍稍麻烦了一点。下面则是介绍一个我在这里写的一道图算法练习题。</p>\n<h1 id=\"el-nino--一个-dfs-算法题目\" style=\"position:relative;\">El Nino ! 一个 DFS 算法题目<a href=\"#el-nino--%E4%B8%80%E4%B8%AA-dfs-%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE\" aria-label=\"el nino  一个 dfs 算法题目 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>题目在<a href=\"https://www.hackerearth.com/zh/practice/algorithms/graphs/depth-first-search/practice-problems/algorithm/el-nino/\">这里</a> 题目大概翻译一下如下：</p>\n<blockquote>\n<p>你有一个包含 N 个节点的树 T，其中根为节点 1，还有一个长度为 M 的无重复整数的数组 A。</p>\n<p>需要你去找到所有符合这样条件的三元组 (U, V, K)，其中 V 属于 U 节点的子树，然后他们之间的距离恰好是 A[K]。而两个节点之间的距离就是他们之间的最短路径，即边的个数。</p>\n<p>输入：第一行包含空格分割的两个整数 N 和 M\n第二行包含 M 个空格分离的整数\n第三行包含 N - 1 个空格分隔的整数，其中第 i 个整数是 i + 1 节点的父节点（注意，前者是<strong>第 i 个整数</strong>，而后者是指 <strong>节点 i + 1</strong>）</p>\n<p>输出：T 中产生的符合上述描述的三元组的个数</p>\n</blockquote>\n<h2 id=\"尝试-1\" style=\"position:relative;\">尝试 1<a href=\"#%E5%B0%9D%E8%AF%95-1\" aria-label=\"尝试 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先可是知道这是一个以 DFS （深度遍历）为中心的算法：每次深度遍历增加一个节点之后将其所有的祖先节点记录下来，并且检查数组 A 是否存在对应的距离。如果存在则计数 +1。于是有了第一个版本的提交：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 用 HashSet 存储数组 A</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lens<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 用邻接表建立图</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> node <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ancestors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g<span class=\"token punctuation\">,</span> \n                           <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> \n                           <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist<span class=\"token punctuation\">,</span> \n                           <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ancestors<span class=\"token punctuation\">,</span> \n                           <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// 每遍历到一个新的节点就去检查其与所有祖先的距离</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">:</span> ancestors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 计算与祖先的距离</span>\n                <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> dist<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 如果这个距离在 A 中存在就计数 +1</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// 在下一次遍历之前添加已经处理完的节点</span>\n            ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在处理兄弟节点之前将当前节点从祖先列表前删除</span>\n            ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后只有三分之一左右的用例过了...其中一大部分超时，还有一部分报错。虽然我觉得这个算法的效率可能有点问题，但是我没想到居然有些是报错了。点开其中的一个报错的 Case 一看，发现自己没有处理 A 中包含 0 的情况。</p>\n<h2 id=\"尝试-2考虑包含长度-0-的情况\" style=\"position:relative;\">尝试 2，考虑包含长度 0 的情况<a href=\"#%E5%B0%9D%E8%AF%95-2%E8%80%83%E8%99%91%E5%8C%85%E5%90%AB%E9%95%BF%E5%BA%A6-0-%E7%9A%84%E6%83%85%E5%86%B5\" aria-label=\"尝试 2考虑包含长度 0 的情况 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>知道错在哪里就好修改了。距离为零意味着三元组 [U, V, K] 中 U 和 V 应该一样。那么就是 N 的个数。所以我就做一个特殊检查：如果 <code>A.contains(0)</code> 那么 <code>cnt += n</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 用 HashSet 存储数组 A</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lens<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 如果 A 中包含 0 计数 +n</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cnt <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 用邻接表建立图</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> node <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ancestors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 和尝试 1 一样，就省略了</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这次所有通过的就是真的通过了，但是还是有大量的超时和系统错误。大概分析一下，超时肯定是说算法的复杂度太高了，可以看到默认的 DFS 的复杂度是 <code>O(V + E)</code> 对于树来说，就是 <code>O(V + V - 1)</code> 而已。但是每次处理新的节点时都有一个过程：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 每遍历到一个新的节点就去检查其与所有祖先的距离</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">:</span> ancestors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 计算与祖先的距离</span>\n    <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> dist<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果这个距离在 A 中存在就计数 +1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是一个 <code>O(V)</code> 的复杂度，所以整体的复杂度有 <code>O(V^2)</code>。</p>\n<p>而报错则很有可能是栈溢出了，那么需要将目前的递归变成遍历。</p>\n<h2 id=\"尝试-3将-ov-提升到-ologv\" style=\"position:relative;\">尝试 3，将 <code>O(v)</code> 提升到 <code>O(log(V))</code><a href=\"#%E5%B0%9D%E8%AF%95-3%E5%B0%86-ov-%E6%8F%90%E5%8D%87%E5%88%B0-ologv\" aria-label=\"尝试 3将 ov 提升到 ologv permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>计算所有祖先中存在的距离与 A 数组中的距离耗费的时间是 <code>O(v)</code>，但是仔细想想，对于一个没有权重的树来说，其实每一个路径中，如果当前节点 v 有 k 个祖先，那么出现的距离一定是 0 到 k 了。我们不用每次都去检查有哪些祖先，其祖先的个数就是 <code>d[v]</code> 而已，那么上面的那部分可以改成如下的样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncnt <span class=\"token operator\">+=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 range 为：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是很遗憾，这样的复杂度并没有减少，<code>retainAll</code> 和 <code>range</code> 依然需要 <code>O(V)</code> 的复杂度。不过我觉得重点就是如何将目前这个 <code>O(V)</code> 做提升了。这个时候我想到了 binary search...我们当前的问题是在 <code>range(dist[v])</code> 和数组 <code>A</code> 之间找并集，那么如果将 A 排序，我们找的就是在 <code>A</code> 中最大的那个 <strong>小于等于 <code>dist[v]</code></strong> 的索引，这就是可以用 binary search 解决的问题了。于是，最终的提交如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> node <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">long</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 同时用遍历替代递归，引入一个 stack 处理 DFS</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt <span class=\"token operator\">+=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                idx <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 索引 + 1 就是并集的个数，如果没找到 -1 + 1 就是 0</span>\n                cnt <span class=\"token operator\">+=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 找到最大的那个小于等 value 的索引</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> lens<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                low <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样修改之后就有了 <code>O(Vlog(V))</code> 的复杂度，成功的 AC 了。</p>\n<p>当然，其实中间还是有很多的坑，比如之前采用的计数是 <code>int</code> 现在改成了 <code>long</code>，再比如搜索索引之后就不再需要考虑有没有 0 距离的特殊情况了。</p>\n<p>虽然看起来是一个不算难的 DFS 算法题，HackerEarth 也把它标记成简单，但是依然花了一番心思才优化成这个最终的版本。</p>\n<h1 id=\"参考资料\" style=\"position:relative;\">参考资料<a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\" aria-label=\"参考资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"https://www.topcoder.com/community/data-science/data-science-tutorials/binary-search/\">binary search 以及其变种</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=AfSk24UTFS8&#x26;t=1s\">图算法，深度优先遍历 MIT 在线课程</a></li>\n<li><a href=\"https://www.hackerearth.com/zh/practice/algorithms/graphs/depth-first-search/practice-problems/algorithm/el-nino/\">HackerEarth EL NINO!</a></li>\n</ol>","fields":{"slug_without_date":"/el-nino"}},{"id":"553b8ee3-6035-5458-9747-3a34fd2e94de","frontmatter":{"title":"用 Feign Hystrix 进行服务集成","date":"2017 October-16"},"html":"<p>不论是否采用微服务的架构，我们都有将自己的服务与其他的服务集成的需求。比如我这里有一个需求就是在系统中创建一个项目的时候通过其所提供的 GitHub 项目的地址获取其默认的 <code>README.md</code> 文件内容作为项目的描述。再比如现在很多的项目都将其<strong>用户管理系统</strong>作为一个独立的系统，当我自己的系统需要用户认证的时候需要从<strong>用户系统</strong>特定的接口获取用户信息。这篇文章就介绍如何使用 Feign，Hystrix 这些 spring cloud 所使用的依赖与其他服务做集成，当然，为了更好的保证服务的可靠性，我这里还展示了通过 wiremock 建立了一系列测试保证我们可以覆盖各种特殊的情况。</p>\n<p>项目代码在 <a href=\"https://github.com/aisensiy/demo-for-feign-and-hystrix\">GitHub</a>。</p>\n<h1 id=\"声明式-http-客户端-feign\" style=\"position:relative;\">声明式 http 客户端 Feign<a href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F-http-%E5%AE%A2%E6%88%B7%E7%AB%AF-feign\" aria-label=\"声明式 http 客户端 feign permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>Feign 是一个声明式的 Http 客户端。其优势自然是它的\"声明式\"：可以更清晰更简单的对其他服务进行请求。虽然目前 Feign 类库已经放在了 OpenFeign 这个 Github 账号之下，但是鉴于更多的人是将其作为 spring cloud 的一环一起使用的，所以这里我所使用的代码也都是引入的 spring cloud 的 <code>org.springframework.cloud:spring-cloud-starter-feign</code> 而不是其 <code>io.github.openfeign:feign-core</code> 的独立依赖。</p>\n<p><code>build.gradle</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>feign'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>projectlombok<span class=\"token operator\">:</span>lombok'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test'<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>然后，创建我们的 GitHubService:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"${github.url}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GitHubService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{git}/master/{filename}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在 <code>@SpringBootApplication</code> 注解的类添加注解 <code>@EnableFeignClients</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoForFeignAndHystrixApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoForFeignAndHystrixApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Feign 本身是可以支持很多套语法的，在 spring cloud 下默认使用的 SpringMVC 的方式。</p>\n<h1 id=\"用-wiremock-测试-feign-client\" style=\"position:relative;\">用 wiremock 测试 Feign Client<a href=\"#%E7%94%A8-wiremock-%E6%B5%8B%E8%AF%95-feign-client\" aria-label=\"用 wiremock 测试 feign client permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>在有了 <code>GitHubService</code> 之后，如果想要对其进行测试就需要一种 mock 服务端请求的方式。这里我们采用 <a href=\"https://wiremock.org/\">WireMock</a> 来实现。</p>\n<p>首先在 <code>build.gradle</code> 引入依赖：</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token punctuation\">...</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.github.tomakehurst:wiremock-standalone:2.7.1'</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">...</span></code></pre></div>\n<p>然后在 resources 目录下定义 application-test.yml 文件，定义 <code>github.url</code> 在测试环境下的地址：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github:\n  url: http://localhost:10087</code></pre></div>\n<p>最后我们编写相应的测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Rule</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WireMockRule</span> wireMockRule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WireMockRule</span><span class=\"token punctuation\">(</span><span class=\"token function\">wireMockConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">10087</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GitHubService</span> gitHubService<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_fetch_meta_file_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n        <span class=\"token class-name\">String</span> metaFile <span class=\"token operator\">=</span> gitHubService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>metaFile<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>我们需要引入 SpringBoot 的环境帮助我们自动注入 [2] 的 <code>GitHubService</code>，因此添加了 <code>@SpringBootTest</code> 的注解，并指定 profile 为 <code>test</code> 以便加载 <code>application-test.yml</code> 的配置</li>\n<li>自动注入 GitHubService 并按照 test profile 做相应的配置</li>\n<li>创建 WireMockRule 并指定其端口与 <code>application-test.yml</code> 相同</li>\n<li>采用 WireMock 的语法指定在请求 \"/aisensiy/hello-project/master/meta.yml\" 时返回所需要的结果</li>\n<li>执行 FeighClient</li>\n<li>比较其结果是否与我们的预期符合</li>\n</ol>\n<h1 id=\"用-hystrix-进行请求容错\" style=\"position:relative;\">用 Hystrix 进行请求容错<a href=\"#%E7%94%A8-hystrix-%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E5%AE%B9%E9%94%99\" aria-label=\"用 hystrix 进行请求容错 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>可以看到 Feign 定义客户端是非常简单的，但是只做到上面的那些是不够的。对于这种网络请求为了保证系统的鲁棒性，还需要处理超时，请求错误等问题。正如 Hystrix 的文档中所提到的，如果你所访问的服务直接挂了，那没什么可怕的，你就直接报错就好了；最怕的是它没有挂但是它的访问速度比预期的要慢很多，这会导致你自身的服务也出现相应的延时，最终可能会导致你自身的一些异步调用的线程池被用尽。</p>\n<p>为了增加 Feign 的鲁棒性，我们可以引入 hystrix 的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>feign'<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>hystrix'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>projectlombok<span class=\"token operator\">:</span>lombok'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span>'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test'<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span>'com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token operator\">:</span>wiremock<span class=\"token operator\">-</span>standalone<span class=\"token operator\">:</span><span class=\"token number\">2.7</span><span class=\"token number\">.1</span>'<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>在添加 hystrix 依赖之后，如果在 <code>@FeignClient</code> 中不添加 Hystrix 的 fallback Hystrix 是默认不使用的，可以在 <code>application.yml</code> 添加配置启动：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>这样 feign 会默认使用 <code>HystrixFeign</code> 的 builder 构建 FeignClient，并为其添加默认的超时处理。其默认的超时时间为 1000 毫秒。我们可以通过为 WireMock 增加默认的延迟返回来测试这个超时处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span><span class=\"token punctuation\">(</span>expected <span class=\"token operator\">=</span> <span class=\"token class-name\">HystrixRuntimeException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_fail_for_fetching_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n        gitHubService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>我们通过 wiremock 所提供的 API 为其返回添加一个 5 秒的固定延时，其已经远远大于 Hystrix 默认 1 秒的超时了</li>\n<li>添加 expected，捕获超时产生的 <code>HystrixRuntimeException</code></li>\n</ol>\n<h2 id=\"hystrix-fallback\" style=\"position:relative;\">hystrix fallback<a href=\"#hystrix-fallback\" aria-label=\"hystrix fallback permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>对于一些应用，有了超时处理并在超时或请求失败的时候抛出异常就可以了。但是有的时候我们需要为请求添加一个默认的 fallback：也就是说如果请求失败了，我们需要给客户端返回点默认的结果，这个时候就可以使用 Hystrix 的 fallback 机制：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceFallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AnotherGitHubService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"NONE\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们声明一个和 <code>GitHubService</code> 一模一样的接口 <code>AnotherGitHubService</code> 用于测试 fallback 机制，然后创建一个 <code>GitHubServiceFallback</code> 类并实现相应的接口。</p>\n<p>然后，我们在 <code>AnotherGitHubService</code> 中声明需要的 fallback 类：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span> \n    url <span class=\"token operator\">=</span> <span class=\"token string\">\"${github.url}\"</span><span class=\"token punctuation\">,</span> \n    fallback <span class=\"token operator\">=</span> <span class=\"token class-name\">GitHubServiceFallback</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AnotherGitHubService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{git}/master/{filename}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后我们在添加一个测试验证这个 fallback 是否工作：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_fallback_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> serviceWithFallback<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GitHubServiceFallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这次虽然添加了 5000 毫秒的延迟，但是一旦超过默认的 1 秒延时后就会使用默认的结果返回而不会抛出任何异常了。</p>\n<h2 id=\"hystrix-断路器\" style=\"position:relative;\">hystrix 断路器<a href=\"#hystrix-%E6%96%AD%E8%B7%AF%E5%99%A8\" aria-label=\"hystrix 断路器 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>讲到这里才了解到了 hystrix 的一些基本用法，Hystrix 自己实现了断路器的机制：通过请求窗口周期性判定调用服务的可靠性并按照一定的策略屏蔽不健康的系统，从而保证了自身系统的可靠性。</p>\n<p>这里我们还是用过一些接口来展示其断路器的效果：</p>\n<p>首先我们定义一个假的第三方服务：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OtherService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后定义两个 API 对其进行调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Api</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Api</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherService <span class=\"token operator\">=</span> otherService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/safe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span>HystrixCommand</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                otherService<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/unsafe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">unsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> otherService<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span>HystrixCommand<span class=\"token punctuation\">.</span>Setter</span> <span class=\"token function\">setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">HystrixCommand<span class=\"token punctuation\">.</span>Setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">withGroupKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixCommandGroupKey<span class=\"token punctuation\">.</span>Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">asKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"External\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">andCommandKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixCommandKey<span class=\"token punctuation\">.</span>Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">asKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/safe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code>/unsafe</code> 接口直接请求 OtherService 而 <code>/safe</code> 通过 Hystrix 包装后请求 OtherService。我们启动这个 Spring Boot 项目，并用 <a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">apachebench</a> 分别对两个接口进行压测看看效果。</p>\n<p>首先访问 /unsafe 接口</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab <span class=\"token parameter variable\">-n</span> <span class=\"token number\">200</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">5</span> http://localhost:8080/unsafe\n\nConnection Times <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n              min  mean<span class=\"token punctuation\">[</span>+/-sd<span class=\"token punctuation\">]</span> median   max\nConnect:        <span class=\"token number\">0</span>    <span class=\"token number\">0</span>   <span class=\"token number\">0.1</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>\nProcessing:  <span class=\"token number\">2002</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.7</span>   <span class=\"token number\">2006</span>    <span class=\"token number\">2196</span>\nWaiting:     <span class=\"token number\">2001</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.1</span>   <span class=\"token number\">2006</span>    <span class=\"token number\">2192</span>\nTotal:       <span class=\"token number\">2002</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.7</span>   <span class=\"token number\">2007</span>    <span class=\"token number\">2197</span>\n\nPercentage of the requests served within a certain <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">50</span>%   <span class=\"token number\">2007</span>\n  <span class=\"token number\">66</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">75</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">80</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">90</span>%   <span class=\"token number\">2010</span>\n  <span class=\"token number\">95</span>%   <span class=\"token number\">2012</span>\n  <span class=\"token number\">98</span>%   <span class=\"token number\">2195</span>\n  <span class=\"token number\">99</span>%   <span class=\"token number\">2196</span>\n <span class=\"token number\">100</span>%   <span class=\"token number\">2197</span> <span class=\"token punctuation\">(</span>longest request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到所有的请求都保持了 2 秒以上的请求时间。</p>\n<p>然后我们再请求一下 /safe 接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab <span class=\"token parameter variable\">-n</span> <span class=\"token number\">200</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">5</span> http://localhost:8080/safe\n\nConnection Times <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n              min  mean<span class=\"token punctuation\">[</span>+/-sd<span class=\"token punctuation\">]</span> median   max\nConnect:        <span class=\"token number\">0</span>    <span class=\"token number\">0</span>   <span class=\"token number\">0.4</span>      <span class=\"token number\">0</span>       <span class=\"token number\">2</span>\nProcessing:     <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.8</span>      <span class=\"token number\">5</span>    <span class=\"token number\">1248</span>\nWaiting:        <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.7</span>      <span class=\"token number\">4</span>    <span class=\"token number\">1248</span>\nTotal:          <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.8</span>      <span class=\"token number\">5</span>    <span class=\"token number\">1248</span>\n\nPercentage of the requests served within a certain <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">50</span>%      <span class=\"token number\">5</span>\n  <span class=\"token number\">66</span>%      <span class=\"token number\">6</span>\n  <span class=\"token number\">75</span>%      <span class=\"token number\">7</span>\n  <span class=\"token number\">80</span>%      <span class=\"token number\">8</span>\n  <span class=\"token number\">90</span>%   <span class=\"token number\">1014</span>\n  <span class=\"token number\">95</span>%   <span class=\"token number\">1016</span>\n  <span class=\"token number\">98</span>%   <span class=\"token number\">1248</span>\n  <span class=\"token number\">99</span>%   <span class=\"token number\">1248</span>\n <span class=\"token number\">100</span>%   <span class=\"token number\">1248</span> <span class=\"token punctuation\">(</span>longest request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>你会发现并不是所有的请求都会是在超过 1 秒后进行超时处理并返回，这就是断路器的效果：当 Hystrix 发现所访问的请求不能达到预期的时候其依据自己周期内请求的成功比例定义是否开启断路器功能。一旦开启断路功能，外部服务将被默认是失败的，在此期间 Hystrix 不再尝试请求服务而是直接返回 fallback 结果（或者抛出异常）。在 <a href=\"https://www.youtube.com/watch?v=-gL-nO2cqwU\">Hystrix – managing failures in distributed systems</a> 中，演讲者给出了一个很详细的示例展示了这个功能，如果想要更进一步了解断路器可以看看这个演讲。</p>\n<h1 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"https://github.com/OpenFeign/feign\">Open Feign</a></li>\n<li><a href=\"https://github.com/Netflix/Hystrix/wiki\">Hystrix</a></li>\n<li><a href=\"https://wiremock.org/docs/stubbing/\">WireMock Stub</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-gL-nO2cqwU\">Talk: Hystrix – managing failures in distributed systems</a></li>\n</ol>","fields":{"slug_without_date":"/feign-hystrix"}},{"id":"f297406a-abee-53e9-bc0e-2e452bf1d72e","frontmatter":{"title":"Jackson 在 Spring Boot 中的使用小结 2","date":"2017 September-19"},"html":"<p><a href=\"/jackson-practices\">上一篇</a>介绍了三个用于 jackson 自定义序列化的场景。这一篇继续介绍其他一些实践。同样，所有的代码都可以在<a href=\"https://github.com/aisensiy/demo-for-jackson\">GitHub</a>找到。</p>\n<h2 id=\"清理输入数据的外层包装unwrap\" style=\"position:relative;\">清理输入数据的外层包装（unwrap）<a href=\"#%E6%B8%85%E7%90%86%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%96%E5%B1%82%E5%8C%85%E8%A3%85unwrap\" aria-label=\"清理输入数据的外层包装unwrap permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>json api 不单单是数据的输出格式为 json 通常数据的输入（POST 或者 PUT 的 request body）也是 json 格式。很多情况下会需要默认将输入的 json 数据以一个父级对象包裹。例如在 <a href=\"https://github.com/gothinkster/realworld/tree/master/api\">realworld</a> 项目的 api 规范中在创建一个 <code>article</code> 时，其输入的数据格式为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"article\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"How to train your dragon\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ever wonder how?\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"You have to believe\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"tagList\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"reactjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"angularjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dragons\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其真正的数据被 <code>article</code> 这个属性包裹起来了。而在实际使用的时候，如果每次都要去自行解包这个层次实在是不够优雅。好在 jackson 可以通过配置自动帮我们 unwrap 这里的对象，只需要在 <code>application.(yml|properties)</code> 增加一个配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jackson.deserialization.unwrap-root-value=true</code></pre></div>\n<p>比如我有一个这样的输入格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"wrap\": {\n    \"name\": \"name\"\n  }\n}</code></pre></div>\n<p>为了对其自动解包，我们对要解析的对象提供相应的 <code>@JsonRootName</code> 即可:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonRootName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapJson</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WrapJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">WrapJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>但是，要注意这个配置是全局有效的，意味着一旦设置了之后所有的解析都会尝试将数据解包，即使没有提供 <code>@JsonRootName</code> 的注解，其依然会尝试使用类名称等方式去解包。因此，除了这个测试使用 <code>spring.jackson.deserialization.unwrap-root-value</code> 外默认关闭它</strong>。</p>\n<h2 id=\"处理枚举类型\" style=\"position:relative;\">处理枚举类型<a href=\"#%E5%A4%84%E7%90%86%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B\" aria-label=\"处理枚举类型 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 java 为了展示的方便，我们通常是需要将枚举按照字符串来处理的，jackson 默认也是这么做的。</p>\n<p><code>OrderStatus</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">UNPAID</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PREPARING</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COMPLETED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANCELED</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>OrderWithStatus</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderWithStatus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">OrderWithStatus</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNPAID</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于 <code>order</code> 来说，其默认的序列化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UNPAID\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然对其进行反序列化也是会成功的，这是处理枚举最简单的情况了，不过 jackson 还支持自定义的序列化与反序列化，比如如果我们需要将原有的枚举变成小写：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unpaid\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以写自定义的 serializer 和 deserializer:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonSerialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderStatusSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonDeserialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderStatusDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">UNPAID</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PREPARING</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COMPLETED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANCELED</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderStatusSerializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">></span></span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonGenerator</span> gen<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerProvider</span> provider<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderStatusDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdDeserializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> vc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>vc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> ctxt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>处理使用自定义的反序列化外或者我们也可以提供一个包含 <code>@JsonCreator</code> 标注的构造函数进行自定义的反序列化，并用上一篇提到的 <code>@JsonValue</code> 进行序列化：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">UNPAID</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PREPARING</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COMPLETED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANCELED</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@JsonCreator</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@JsonValue</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">ofValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>@JsonCreator</code> 有点像是 MyBatis 做映射的时候那个 <code>&#x3C;constructor></code> 它可以让你直接使用一个构造函数或者是静态工厂方法来构建这个对象，可以在这里做一些额外的初始化或者是默认值选定的工作，有了它在反序列化的时候就不需要那个很讨厌的默认的无参数构造函数了。</p>\n<p>当然枚举的处理还有一些更诡异的方式，<a href=\"https://www.baeldung.com/jackson-serialize-enums\">这里</a>有讲解，我就不再赘述了。</p>\n<h2 id=\"对多态的支持\" style=\"position:relative;\">对多态的支持<a href=\"#%E5%AF%B9%E5%A4%9A%E6%80%81%E7%9A%84%E6%94%AF%E6%8C%81\" aria-label=\"对多态的支持 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 DDD 中有领域事件（domain event）的概念，有时候我们需要将这些事件保存下来。由于每一个事件的结构是千差万别的，不论是存储在关系型数据库还是 nosql 数据库，在将其序列化保存的时候我们需要保留其原有的类型信息以便在反序列化的时候将其解析为之前的类型。jackson 对这种多态有很好的支持。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonTypeInfo</span><span class=\"token punctuation\">(</span>\n    use <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonTypeInfo<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NAME</span><span class=\"token punctuation\">,</span>\n    include <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonTypeInfo<span class=\"token punctuation\">.</span>As</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROPERTY</span><span class=\"token punctuation\">,</span>\n    property <span class=\"token operator\">=</span> <span class=\"token string\">\"type\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonSubTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@JsonSubTypes.Type</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">UserCreatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@JsonSubTypes.Type</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">ArticleCreatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"article_created\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@JsonTypeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_created\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserCreatedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@JsonTypeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"article_created\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleCreatedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code>@JsonTypeInfo</code> 定义类型信息以什么方式保留在 json 数据中，这里就是采用了 <code>type</code> 的属性。<code>@JsonSubTypes</code> 定义了一系列子类与类型的映射关系。最后 <code>@JsonTypeName</code> 为每一个子类型定义了其名称，与 <code>@JsonSubTypes</code> 相对应。</p>\n<p>那么对于 <code>UserCreatedEvent</code> 和 <code>ArticleCreatedEvent</code> 类型，其解析的 json 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user_created\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"article_created\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"使用-mixin\" style=\"position:relative;\">使用 mixin<a href=\"#%E4%BD%BF%E7%94%A8-mixin\" aria-label=\"使用 mixin permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>这是我非常喜欢的一个功能，第一次见到是在 <a href=\"https://github.com/olivergierke/spring-restbucks\">spring restbucks</a> 的例子里。它有点像是 ruby 里面的 mixin 的概念，就是在不修改已知类代码、甚至是不添加任何注释的前提下为其提供 jackson 序列化的一些设定。在两种场景下比较适用 mixin:</p>\n<ol>\n<li>你需要对一个外部库的类进行自定义的序列化和反序列化</li>\n<li>你希望自己的业务代码不包含一丝丝技术细节：写代码的时候很希望自己创建的业务类是 POJO，一个不需要继承自特定对象甚至是不需要特定技术注解的类，它强调的是一个业务信息而不是一个技术信息</li>\n</ol>\n<p>这里就提供一个解析 <code>joda time</code> 的 mixin 的示例，它提供了一个 <code>DateTimeSerializer</code> 将 <code>joda.DateTime</code> 解析为 ISO 的格式。代码见<a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app/blob/master/src/main/java/io/spring/JacksonCustomizations.java\">这里</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JacksonCustomizations</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Module</span> <span class=\"token function\">realWorldModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealWorldModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealWorldModules</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleModule</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RealWorldModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">addSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateTimeSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeSerializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DateTimeSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonGenerator</span> gen<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerProvider</span> provider<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ISODateTimeFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">dateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withZoneUTC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"其他\" style=\"position:relative;\">其他<a href=\"#%E5%85%B6%E4%BB%96\" aria-label=\"其他 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"jsonpropertyorder\" style=\"position:relative;\">@JsonPropertyOrder<a href=\"#jsonpropertyorder\" aria-label=\"jsonpropertyorder permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonPropertyOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>按照其指定的顺序解析为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"My bean\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"展示空数据的策略\" style=\"position:relative;\">展示空数据的策略<a href=\"#%E5%B1%95%E7%A4%BA%E7%A9%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AD%96%E7%95%A5\" aria-label=\"展示空数据的策略 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>有这么一个对象:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们希望其任何为空的数据都不再显示，即其序列化结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而不是</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，遇到 <code>null</code> 的时候也不希望出现这样的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了达到这个效果我们可以为 <code>User.java</code> 提供 <code>@JsonInclude(JsonInclude.Include.NON_EMPTY)</code> 注解：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonInclude<span class=\"token punctuation\">.</span>Include</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_EMPTY</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>除了 <code>NON_EMPTY</code> 还有很多其他的配置可以使用。</p>\n<p>如果希望这个策略在我们的整个应用中都起效（而不是单个类）我们可以在 <code>application.properties | application.yml</code> 做配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jackson.default-property-inclusion=non_empty</code></pre></div>\n<h3 id=\"自定义标注\" style=\"position:relative;\">自定义标注<a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E6%B3%A8\" aria-label=\"自定义标注 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>如果一个注解的组合频繁出现在我们的项目中，我们可以通过 <code>@JacksonAnnotationsInside</code> 将其打包使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JacksonAnnotationsInside</span>\n<span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Include</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonPropertyOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dateCreated\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CustomAnnotation</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@CustomAnnotation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanWithCustomAnnotation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> dateCreated<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">BeanWithCustomAnnotation</span> bean \n      <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanWithCustomAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"My bean\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于对象 <code>bean</code> 来说，其解析结果为</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"My bean\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://www.baeldung.com/jackson-annotations\">Jackson Annotation Examples</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-annotations\">Jackson Annotation document</a></li>\n<li><a href=\"https://www.baeldung.com/jackson-serialize-enums\">How To Serialize Enums as JSON Objects with Jackson</a></li>\n<li><a href=\"https://github.com/olivergierke/spring-restbucks\">spring restbucks</a></li>\n<li><a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app/blob/master/src/main/java/io/spring/JacksonCustomizations.java\">mixin code</a></li>\n</ul>","fields":{"slug_without_date":"/jackson-practices-2"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":20,"pageCount":47}}},"pageContext":{"limit":3,"skip":57}},"staticQueryHashes":["26522286"],"slicesMap":{}}