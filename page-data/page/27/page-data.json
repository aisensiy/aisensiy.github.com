{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/27",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"075e5bd5-b3fa-5b94-a5e3-3ed3706df7e4","frontmatter":{"title":"mysql and python tips","date":"2013 September-28"},"html":"<p>最近又写 python 了，感觉好久不写又手生了。用 mysql 导数据，记下点东西吧。</p>\n<h2 id=\"python-mysqldb-的安装\" style=\"position:relative;\">python-MySQLdb 的安装<a href=\"#python-mysqldb-%E7%9A%84%E5%AE%89%E8%A3%85\" aria-label=\"python mysqldb 的安装 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在安装 pip 之前需要执行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apt-get install libmysqlclient-dev python-dev</code></pre></div>\n<h2 id=\"关于中文\" style=\"position:relative;\">关于中文<a href=\"#%E5%85%B3%E4%BA%8E%E4%B8%AD%E6%96%87\" aria-label=\"关于中文 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"table-creation\" style=\"position:relative;\">table creation<a href=\"#table-creation\" aria-label=\"table creation permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>要想让 mysql 很好的支持中文，在创建 table 的时候就要小心了。看了一下 ruby migration 生成的 sql table 是这个样子的:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>projects<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">COLLATE</span> utf8_unicode_ci <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>description<span class=\"token punctuation\">`</span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">COLLATE</span> utf8_unicode_ci<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>created_at<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>updated_at<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">`</span>is_archived<span class=\"token punctuation\">`</span> <span class=\"token keyword\">tinyint</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>index_projects_on_user_id<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_unicode_ci<span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意最下面的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;</code></pre></div>\n<p>是一定要加的。</p>\n<h3 id=\"python-lang-support\" style=\"position:relative;\">python lang support<a href=\"#python-lang-support\" aria-label=\"python lang support permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>python 2 3 分离确实是个很让人揪心的事情。虽说 python3 已经对于 unicode 做了很好的支持，但是可惜 python3 一直发展不起来。我还是要苦逼的用着 python2.7 每次对于 string 都要自己去做一下转换。在把 string 扔给 MySQLdb 之前都要搞成 unicode 的。</p>\n<h3 id=\"setdefaultencoding\" style=\"position:relative;\">setdefaultencoding<a href=\"#setdefaultencoding\" aria-label=\"setdefaultencoding permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>通常在 linux 系统中的默认编码是 'ascii' 这导致 <code>urllib2.urlopen().read()</code> 出来的结果会有一些问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reload(sys)\nsys.setdefaultencoding('utf-8')</code></pre></div>\n<p>这样会避免很多问题。</p>\n<p>然后 <a href=\"https://docs.python.org/2/howto/unicode.html\">HOWTO UNICODE</a> 对于编码问题讲的非常的透彻。</p>\n<h3 id=\"python-mysqldb\" style=\"position:relative;\">python MySQLdb<a href=\"#python-mysqldb\" aria-label=\"python mysqldb permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>MySQLdb 的一个 connection 是不支持多线程的。要想支持多线程，需要对每一个线程建立 connection。</p>\n<h2 id=\"connect-mysql-from-remote\" style=\"position:relative;\">connect mysql from remote<a href=\"#connect-mysql-from-remote\" aria-label=\"connect mysql from remote permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 <code>/etc/mysql/my.cnf</code> 里面有一个 bind_network 如果允许远程连接的话，一定不能是 <code>127.0.0.1</code>。</p>\n<p>然后就是给用户提升权限，让他可以 remote 连接。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> adminm<span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'123456'</span></code></pre></div>\n<h2 id=\"mysql-text-limit\" style=\"position:relative;\">mysql text limit<a href=\"#mysql-text-limit\" aria-label=\"mysql text limit permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  TINYBLOB, TINYTEXT       L + 1 bytes, where L &lt; 2^8    (255 Bytes)\n  BLOB, TEXT               L + 2 bytes, where L &lt; 2^16   (64 Kilobytes)\n  MEDIUMBLOB, MEDIUMTEXT   L + 3 bytes, where L &lt; 2^24   (16 Megabytes)\n  LONGBLOB, LONGTEXT       L + 4 bytes, where L &lt; 2^32   (4 Gigabytes)</code></pre></div>\n<p>text 最多支持 16K。</p>\n<h2 id=\"mysql-text-index\" style=\"position:relative;\">mysql text index<a href=\"#mysql-text-index\" aria-label=\"mysql text index permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果想要给 text 字段建立索引那就需要指定索引的长度。</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> index_name <span class=\"token keyword\">ON</span> misc_info <span class=\"token punctuation\">(</span><span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>UPDATE:</strong> 我后来木有这么做了，我对 url 做了 md5 这样我就有了一个长度为 32 的十六进制字符串。我对 md5 做了索引。</p>\n<h2 id=\"mysql-operationalerror-2006-mysql-server-has-gone-away\" style=\"position:relative;\">mysql OperationalError: (2006, 'MySQL server has gone away')<a href=\"#mysql-operationalerror-2006-mysql-server-has-gone-away\" aria-label=\"mysql operationalerror 2006 mysql server has gone away permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>这个问题也困扰了我好久。先描述一下，大概是因为 mysql 的连接有一个最长的连接时间。然后由于爬虫需要长时间的连接或者是等待连接，因此会导致在某些时候这个连接就断开了。</p>\n<p>先去 /etc/mysql/my.cnf 看一些所有有关 <code>timeout</code> 的参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">connect_timeout         = 10\nwait_timeout            = 180\nnet_read_timeout        = 30\nnet_write_timeout       = 30</code></pre></div>\n<p>这里的时间单位都是秒，我查了一下资料，有对这些参数的具体解释，在<a href=\"https://www.taobaodba.com/html/433_mysql_timeout_analyze.html\">这里</a></p>\n<p><code>connect_timeout</code> 在很多地方都存在，就是连接 mysql 时候的超时时间。应该不是这个。\n<code>wait_timeout</code> 在连接建立之后 mysql 等待一个连接有动作的时间。也就是说如果连接在这个时间之内没有动作就会断开连接了。</p>\n<p>即使连接没有处于sleep状态，即客户端忙于计算或者存储数据，MySQL也选择了有条件的等待。在数据包的分发过程中，客户端可能来不及响应（发送、接收、或者处理数据包太慢）。为了保证连接不被浪费在无尽的等待中，MySQL也会选择有条件（net_read_timeout和net_write_timeout）地主动断开连接。</p>\n<p>这就让我纠结了，我尝试了修改以上的参数却没有从根本上解决这个问题。最后我就采用了比较暴力的方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token keyword\">def</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kvargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      cursor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kvargs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>AttributeError<span class=\"token punctuation\">,</span> MySQLdb<span class=\"token punctuation\">.</span>OperationalError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cursor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kvargs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cursor</code></pre></div>\n<p>哈，就是如果断开，我就重连...</p>\n<p>这个解决的不太好，但是确实有效。</p>\n<h2 id=\"sql-性能问题\" style=\"position:relative;\">sql 性能问题<a href=\"#sql-%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\" aria-label=\"sql 性能问题 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> url <span class=\"token keyword\">from</span> taobao <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span> <span class=\"token keyword\">offset</span> <span class=\"token number\">2000000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这条语句在我有 300w 的表里要跑个十几秒...\nexplain 如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql> explain select url from taobao limit 1 offset 2000000;\n+---------------+------+---------+------+---------+-------+\n| possible_keys | key  | key_len | ref  | rows    | Extra |\n|---------------|------|---------|------|---------|-------|\n| NULL          | NULL | NULL    | NULL | 3298171 |       |\n+---------------+------+---------+------+---------+-------+</code></pre></div>\n<p>换一种方式</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql> explain select url from taobao where id &lt; 2000001 and id >= 2000000;\n+---------------+---------+---------+------+------+-------------+\n| possible_keys | key     | key_len | ref  | rows | Extra       |\n+---------------+---------+---------+------+------+-------------+\n| PRIMARY       | PRIMARY | 4       | NULL |    1 | Using where |\n+---------------+---------+---------+------+------+-------------+</code></pre></div>\n<p>0.05 秒的速度。</p>","fields":{"slug_without_date":"/mysql-tips"}},{"id":"a42cbe7e-e5d4-5d1f-9c0b-9262d9f5d3f0","frontmatter":{"title":"Self join graph relation in rails","date":"2013 August-24"},"html":"<p>最近有一个诡异的需求，需要做一个多对多的图关系。情况是这样的，有一堆本来是扁平关系的标签，现在需要给他们组织出来层级关系了。那么一个 tag 就会有很多的 父节点 以及 子节点。那么，简单来看，其实就是一个自身元素的多对多关系了。</p>\n<p>通常的，针对两个 model 的多对多关系是这样的。<a href=\"https://guides.rubyonrails.org/association_basics.html#the-has-and-belongs-to-many-association\">link here</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Physician</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  has_many <span class=\"token symbol\">:appointments</span>\n  has_many <span class=\"token symbol\">:patients</span><span class=\"token punctuation\">,</span> through<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:appointments</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Appointment</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  belongs_to <span class=\"token symbol\">:physician</span>\n  belongs_to <span class=\"token symbol\">:patient</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Patient</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  has_many <span class=\"token symbol\">:appointments</span>\n  has_many <span class=\"token symbol\">:physicians</span><span class=\"token punctuation\">,</span> through<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:appointments</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>而对于通常的，对于自身做树级关系的 model 如下: <a href=\"https://guides.rubyonrails.org/association_basics.html#self-joins\">link here</a></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  has_many <span class=\"token symbol\">:subordinates</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Employee\"</span><span class=\"token punctuation\">,</span>\n                          foreign_key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"manager_id\"</span>\n\n  belongs_to <span class=\"token symbol\">:manager</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Employee\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>那么，我现在所需要的差不多就是把这两个结合一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Word</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n\n  has_many <span class=\"token symbol\">:parent_relations</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:WordRelation</span><span class=\"token punctuation\">,</span> foreign_key<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:child_id</span>\n  has_many <span class=\"token symbol\">:child_relations</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:WordRelation</span><span class=\"token punctuation\">,</span> foreign_key<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:parent_id</span>\n\n  has_many <span class=\"token symbol\">:parents</span><span class=\"token punctuation\">,</span> through<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:parent_relations</span>\n  has_many <span class=\"token symbol\">:children</span><span class=\"token punctuation\">,</span> through<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:child_relations</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordRelation</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n  attr_accessible <span class=\"token symbol\">:child_id</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:parent_id</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:parent</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:child</span>\n\n  belongs_to <span class=\"token symbol\">:parent</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:Word</span>\n  belongs_to <span class=\"token symbol\">:child</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:Word</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>两个 model <code>word</code> 以及 <code>word_relation</code>。对于这种 self join 的关系，通常是不能按照默认的外键的。那么就像第二个例子一样。我们需要自己指定 <code>foreign_key</code>。这里有个比较特别的地方。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">has_many <span class=\"token symbol\">:parent_relations</span><span class=\"token punctuation\">,</span> class_name<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:WordRelation</span><span class=\"token punctuation\">,</span> foreign_key<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:child_id</span></code></pre></div>\n<p><code>parent_relations</code> 需要的外键居然是 <code>child_id</code> 感觉有点奇怪吧。不过理清 activerecord 帮你生成的 sql 是什么样子就明白了。为了找其父亲节点，那么 sql 语句大概如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> word_relations <span class=\"token keyword\">where</span> <span class=\"token punctuation\">[</span>one <span class=\"token keyword\">column</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'[this word id]'</span></code></pre></div>\n<p>要找父亲节点，那么 where 中就是找 <em>哪个节点的子节点是这个 word</em>。所以就应当是反着的才对的。</p>\n<hr>\n<p>做了上述的工作之后，一个图状的 word 关系就可以搞定了。</p>","fields":{"slug_without_date":"/self-join-graph-relatiion-in-rails"}},{"id":"4d442626-eebc-598b-be4d-7a42ded631dd","frontmatter":{"title":"angluar-resource rails integration","date":"2013 July-31"},"html":"<p>最近本来是在折腾 parse angular rails 的一个项目。一直想把 parse 封装成和 rails 自带的 activerecord 那样的的 api 但是最终由于各种原因还是放弃了。整体来说还是因为 parse 的社区不够大，需求量不够大，导致周边做的不是很给力。要啥啥没有也就罢了，关键是 parse 目前处于高不成低不就的地步：要啥有啥，但是，做的不好，不完善。</p>\n<p>浪费了一天在 <code>parse-resource</code> 上无果很是伤心。总想做点东西去弥补下损失，起码找到个可以用于目前项目的，简化项目开发的东西吧？那就从这个的周边入手吧。我一直都在想如果 backend restful 的这个接口搞定了，那前面就可以尝试 <code>angular-resource</code> 了。虽说目前后端没有搞定，但是我们依然可以去尝试它。</p>\n<p><code>angular-resource</code> 就是一个可以简化 <code>angular</code> 写 restful 接口的工具。之前不使用它是因为有这样一个疑问：我并不是仅仅有 restful CRUD 的接口。当我有其他的自定义的动作的时候 <code>angular-resource</code> 能支持吗？今天我终于把这个问题弄清楚了。</p>\n<p>首先，要给 <code>angular-resource</code> 提供一个完整的 restful 的 backend。这里我就用 rails 做了一个。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ApplicationController</span>\n  respond_to <span class=\"token symbol\">:json</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">index</span></span>\n    <span class=\"token variable\">@posts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>all\n\n    respond_with <span class=\"token variable\">@posts</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n\n    respond_with <span class=\"token variable\">@post</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>update_attributes<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">destroy</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>destroy <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">reset</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n      <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'reset as default content'</span>\n      <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n    <span class=\"token keyword\">end</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">top2</span></span>\n    <span class=\"token variable\">@posts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    respond_with <span class=\"token variable\">@posts</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>这个 controller 在错误的处理以及 http code 的返回上可能还有一些问题，但是我们先忽略这些。关键的提供一个如下的 routes。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">resources <span class=\"token symbol\">:posts</span> <span class=\"token keyword\">do</span>\n  member <span class=\"token keyword\">do</span>\n    post <span class=\"token symbol\">:reset</span>\n  <span class=\"token keyword\">end</span>\n  collection <span class=\"token keyword\">do</span>\n    get <span class=\"token symbol\">:top2</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$: rake routes\n\nreset_post POST   /posts/:id/reset(.:format) posts#reset\ntop2_posts GET    /posts/top2(.:format)      posts#top2\n     posts GET    /posts(.:format)           posts#index\n           POST   /posts(.:format)           posts#create\n  new_post GET    /posts/new(.:format)       posts#new\n edit_post GET    /posts/:id/edit(.:format)  posts#edit\n      post GET    /posts/:id(.:format)       posts#show\n           PUT    /posts/:id(.:format)       posts#update\n           DELETE /posts/:id(.:format)       posts#destroy</code></pre></div>\n<p>好，有了这些之后，我们就可以用 <code>angular-resource</code> 构建一个 <code>Post</code> 的 module 来处理 restful 的请求啦。</p>\n<p>首先 ngResource 的文档在这里 <a href=\"https://docs.angularjs.org/api/ngResource.$resource\">https://docs.angularjs.org/api/ngResource.$resource</a> 虽然大家都吐槽 angular 的文档很糟糕，但是没有别的办法，这个就是最官方的出处了。而且起码我觉得这篇讲的还算说的过去。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">App <span class=\"token operator\">=</span> angular<span class=\"token punctuation\">.</span>module <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ngResource'</span><span class=\"token punctuation\">]</span>\n\nApp<span class=\"token punctuation\">.</span>factory <span class=\"token string\">'Post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>$resource<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  <span class=\"token function\">$resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts/:id/:verb'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'@id'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    reset<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>verb<span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    top2<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>verb<span class=\"token operator\">:</span> <span class=\"token string\">'top2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> isArray<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上所示，对于有自定义的 restful 接口的情况，我提供了一个额外的参数 <code>verb</code>。对默认的 restful 接口 <code>angular-resource</code> 可以帮我们处理了，我们只需要处理额外的自定义的即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reset: { method: 'POST', params: {verb: 'reset'} }</code></pre></div>\n<p>设置 verb: reset 就可以将这个动作和 url 绑定了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    post <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span>$scope<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">)</span>\n    post<span class=\"token punctuation\">.</span><span class=\"token function\">$reset</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success!!'</span><span class=\"token punctuation\">)</span>\n        $scope<span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> data\n    <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>同理，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">top2: { method: 'GET', params: {verb: 'top2'}, isArray: true }</code></pre></div>\n<p>verb: top2 就对应 posts/top2 的 url。不过这里有一个额外的参数 <code>isArray</code> 这个就好像 rails routes 里面声明的 <code>collection</code> 一样，说明不是针对单个元素的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">App.controller 'IndexController', ($scope, Post) ->\n  $scope.posts = Post.top2()</code></pre></div>\n<hr>\n<p>虽然这里还没有涉及嵌套的情况，但是整体来说应该是类似的。</p>\n<p>顺便说一句，项目用到了一个 gem <code>bower-rails</code> 把 bower 整合进来。可以更简单的安装 各种 css js 资源。<a href=\"https://pete-hamilton.co.uk/2013/07/13/angularjs-and-rails-with-bower/\">https://pete-hamilton.co.uk/2013/07/13/angularjs-and-rails-with-bower/</a> 的讲解推荐一看。</p>\n<p>再多说一句，前面有一篇讲述 webapps 的文章，这篇其实和它也有一点关系。目前我比较看好 angularjs 希望用它作为 webapp 的开发框架。</p>","fields":{"slug_without_date":"/angluar-resource-rails-integration"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":27,"pageCount":40}}},"pageContext":{"limit":3,"skip":78}},
    "staticQueryHashes": []}