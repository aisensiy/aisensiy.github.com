{"componentChunkName":"component---src-templates-blogs-js","path":"/page/19","result":{"data":{"blogs":{"nodes":[{"id":"f5a38157-397b-51cc-afce-eeba70f2f278","frontmatter":{"title":"Webpack with Bootstrap","date":"2016 May-20"},"html":"<p>最近开始利用业余时间采用 <code class=\"language-text\">react + redux</code> 的前端架构山寨一个金数据（或者说是 WuFoo，毕竟两个东西看起来真的很像）以增加自己对这些框架的熟练度。在这个过程中记录下一些自己遇到的坑。今天就是一个 <code class=\"language-text\">webpack</code> 如何和 <code class=\"language-text\">bootstrap</code> 结合的坑。</p>\n<p>为了在项目之初就一个不是那么丑的界面，都会选择一些比较成熟的前端 css 框架。<code class=\"language-text\">bootstrap</code> 是比较流行的一个。<code class=\"language-text\">bootstrap</code> 一方面是基本的 <code class=\"language-text\">css</code> 另一方面还有一些 <code class=\"language-text\">jQuery</code> 的插件形式的类库支持其中的一些组件，当然还有一些它所需要的字体文件。那么这里问题就来了：</p>\n<ol>\n<li>如何在 <code class=\"language-text\">webpack</code> 中引入 <code class=\"language-text\">jQuery</code> 以及它的插件</li>\n<li>如何在 <code class=\"language-text\">webpack</code> 引入一些其他类型的文件，例如字体</li>\n</ol>\n<h2 id=\"引入-bootstrap\" style=\"position:relative;\">引入 bootstrap<a href=\"#%E5%BC%95%E5%85%A5-bootstrap\" aria-label=\"引入 bootstrap permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，我们还是要安装 <code class=\"language-text\">bootstrap</code> 以及它所依赖的 <code class=\"language-text\">jquery</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save bootstrap-sass jquery</code></pre></div>\n<p>这里顺便说一句，虽然 <code class=\"language-text\">jquery</code> 看似过时了，但是它所构建的生态是非常庞大的，尤其是像 <code class=\"language-text\">jquery-ui</code> 这样的东西可以说是一些富交互应用所必须的。那么如何将 <code class=\"language-text\">react</code> 的 <code class=\"language-text\">component</code> 和 <code class=\"language-text\">jquery</code> 的一些组件很好的结合是在选择 <code class=\"language-text\">react</code> 这样的框架之初就考虑进去的。后面在涉及到一些复杂的交互的时候会出现 <code class=\"language-text\">jquery-ui</code> 与 <code class=\"language-text\">react</code> 一起使用的例子。</p>\n<p>然后，我们可以在 <code class=\"language-text\">webpack.config.js</code> 中以 entry 的形式引入 <code class=\"language-text\">bootstrap-loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  devtool: 'cheap-module-source-map',\n  entry: [\n    'bootstrap-loader',\n    './index.js'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\"\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: \"style!css!sass\"\n      }\n    ]\n  }\n};</code></pre></div>\n<p>注意看 <code class=\"language-text\">entry</code> 本来就是一个数组，我们可以在这里引入多个入口。</p>\n<h2 id=\"use-bootstrap-loader\" style=\"position:relative;\">Use bootstrap-loader<a href=\"#use-bootstrap-loader\" aria-label=\"use bootstrap loader permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>做了一番调研之后发现其实没必要自己把所有的事情都做了，有这么一个 <code class=\"language-text\">bootstrap-loader</code> 可以帮助在 <code class=\"language-text\">webpack</code> 的项目中引入 <code class=\"language-text\">bootstrap</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev bootstrap-loader</code></pre></div>\n<p>不过单单是安装它是不过的，其实 <code class=\"language-text\">bootstrap-loader</code> 所做的事情就是帮助我们把各种样子的文件引入到我们的项目中，那么为了处理不同类型的文件需要一些其他的 <code class=\"language-text\">loader</code> 的支持（前面的博客有提及 <code class=\"language-text\">webpack</code> 只能处理 <code class=\"language-text\">js</code> 如果需要处理其他类型的东西就需要 <code class=\"language-text\">loader</code> 的帮助）。这里，我们还要引入一大堆的 <code class=\"language-text\">loader</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev resolve-url-loader url-loader file-loader imports-loader</code></pre></div>\n<p>其中 <code class=\"language-text\">file-loader</code> 用于加载其他类型的文件，<code class=\"language-text\">url-loader</code> 和 <code class=\"language-text\">file-loader</code> 类似，只是在文件比较小的时候返回 Data Url 的形式。<code class=\"language-text\">resolve-url-loader</code> 和之前提到的 <code class=\"language-text\">sass-loader</code> 一起使用，用于处理 <code class=\"language-text\">sass</code> 中 <code class=\"language-text\">url()</code> 的路径。这些 <code class=\"language-text\">loader</code> 都要和 <code class=\"language-text\">webpack.config.js</code> 中的 <code class=\"language-text\">loaders</code> 配置项配合使用:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      ...\n      {\n        test: /\\.woff2?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        loader: \"url?limit=10000\"\n      },\n      {\n        test: /\\.(ttf|eot|svg)(\\?[\\s\\S]+)?$/,\n        loader: 'file'\n      }\n    ]\n  }\n};</code></pre></div>\n<h2 id=\"use-imports-loader-to-support-jquery\" style=\"position:relative;\">Use imports-loader to support jQuery<a href=\"#use-imports-loader-to-support-jquery\" aria-label=\"use imports loader to support jquery permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">imports-loader</code> 是个很有意思的 <code class=\"language-text\">loader</code> 它定义了一个简单的格式用于引入使用它的类库所需要的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  ...\n  module: {\n    loaders: [\n      ...\n      {\n        test: /bootstrap-sass\\/assets\\/javascripts\\//,\n        loader: 'imports?jQuery=jquery'\n      }\n    ]\n  }\n};</code></pre></div>\n<p>如上所示，在 <code class=\"language-text\">webpack.config.js</code> 中加入这样一个 <code class=\"language-text\">loader</code>。其中说明在引入 <code class=\"language-text\">bootstrap</code> 下的 <code class=\"language-text\">javascripts</code> 时，为他们提供 <code class=\"language-text\">jQuery</code> 这样的变量。那么 <code class=\"language-text\">imports-loader</code> 会在引入 <code class=\"language-text\">bootstrap</code> 的 <code class=\"language-text\">js</code> 之前为他们提供如下的代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var jQuery = require('jquery');</code></pre></div>\n<p>估计在后续使用 <code class=\"language-text\">jquery</code> 的其他东西的时候还会用到它的。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://github.com/shakacode/bootstrap-loader\">bootstrap-loader</a></li>\n<li><a href=\"https://github.com/webpack/imports-loader\">imports-loader</a></li>\n<li><a href=\"https://github.com/webpack/file-loader\">file-loader</a></li>\n<li><a href=\"https://github.com/webpack/url-loader\">url-loader</a></li>\n<li><a href=\"https://github.com/bholloway/resolve-url-loader\">resolve-url-loader</a></li>\n</ol>","fields":{"slug_without_date":"/webpack-with-bootstrap"}},{"id":"0cf6c832-1782-57c5-8c8f-c10fea01564e","frontmatter":{"title":"DDD Repository","date":"2016 May-17"},"html":"<p>标题是 <code class=\"language-text\">Repository</code>，但是内容是我如何从错用的 <code class=\"language-text\">Repository</code> 变成了感觉还算对的 <code class=\"language-text\">Repository</code> 的过程。</p>\n<h2 id=\"之前的做法\" style=\"position:relative;\">之前的做法<a href=\"#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%81%9A%E6%B3%95\" aria-label=\"之前的做法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>DDD 里面的 <code class=\"language-text\">Repository</code> 是一个处理数据存储或者说是数据持久化的单元。通常一个 <code class=\"language-text\">Aggregate</code> 对应一个 <code class=\"language-text\">Repository</code>。对于通常的 web 服务，很多时候我们都是在与数据存储打交道，以至于很多时候存储就成为了真个应用最关键的逻辑了。那么刚刚接触 DDD 的时候，我就觉得 Repository 就是以前经常使用的类似 DAO 的东西。下面这样的代码经常出现在我们的应用里面。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code class=\"language-text\">applicationRepository</code> 管理了对于应用的创建。为了创建我们的对象 <code class=\"language-text\">app</code> 我们将一堆需要的参数扔进一个 <code class=\"language-text\">applicationRepository</code> 这样子的不知道背后是什么鬼实现的黑盒子，出来就是我们想要的东西了。再看另外一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationRecord</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Record</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> envName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mapper<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里例子里面，<code class=\"language-text\">application</code> 可以有环境变量，在 <code class=\"language-text\">application</code> 中提供了一个 <code class=\"language-text\">removeEnv</code> 的方法，<code class=\"language-text\">mapper</code> 是一个具体的持久层工具 <code class=\"language-text\">Mybatis</code> 需要的东西，可以忽略。当我需要删除环境变量的时候，我只需要做如下的事情。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">ofId</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这里事实上我根本没有显性的调用任何持久化方法，在 <code class=\"language-text\">app</code> 里面持久化就偷偷的帮我把事情做了。然后需要注意的是我的 <code class=\"language-text\">Application</code> 仅仅是一个接口，实现它的是一个 <code class=\"language-text\">ApplicationRecord</code> 它内部通过注入的方式塞进去了 <code class=\"language-text\">Mybatis DataMapper</code> 的东西从而实现了持久化的工作。然后在 <code class=\"language-text\">Mybatis</code> 可以放一个叫做 <code class=\"language-text\">ObjectFactory</code> 的东西使得 <code class=\"language-text\">Mybatis</code> 和 java injector 关联子一起，当从 <code class=\"language-text\">Mybatis</code> 获取对象时 <code class=\"language-text\">Mybatis</code> 会自动的讲所有的依赖注入到这个对象里。</p>\n<p>说白了就是<strong>将数据层和模型绑定在一起，持久层做了业务层的事情</strong>。</p>\n<h2 id=\"希望的样子\" style=\"position:relative;\">希望的样子<a href=\"#%E5%B8%8C%E6%9C%9B%E7%9A%84%E6%A0%B7%E5%AD%90\" aria-label=\"希望的样子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>然而我希望的是可以将业务层做成这个样子：</p>\n<ol>\n<li>没有对什么持久层的依赖，甚至完全不知晓持久层。</li>\n<li>领域模型不应该是接口而已，接口不能描述具体的业务行为，我同意接口和实现分离的方式，但是分离的实现也应该是领域模型重要的一部分而不是和持久层放在一起</li>\n<li><code class=\"language-text\">Repository</code> 作为和存储打交道的组件应该仅仅是做<strong>持久化</strong>，它就是拿来一个对象，然后存到数据库里，没有任何业务逻辑，没有任何花哨的方法。</li>\n</ol>\n<h2 id=\"改进后的样子\" style=\"position:relative;\">改进后的样子<a href=\"#%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90\" aria-label=\"改进后的样子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface ApplicationRepository {\n    void save(Application application);\n    Application ofId(String appId);\n}</code></pre></div>\n<p>没有什么 <code class=\"language-text\">addEnv</code> <code class=\"language-text\">removeEnv</code> 等等，这些都是 <code class=\"language-text\">Application</code> 自己要做的。<code class=\"language-text\">Mybatis</code> 版本的 <code class=\"language-text\">Repository</code> 具体的 <code class=\"language-text\">mapper</code> 仅仅出现在 <code class=\"language-text\">MybatisApplicationRepository</code> 里面，其他地方都不会出现。按照这个思路把上边的代码修改之后是下面这个样子。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>新创建的 <code class=\"language-text\">app</code> 本身就是一个 <code class=\"language-text\">POJO</code> 里面全部都是纯粹的业务代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Envs</span> envs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> envName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        envs<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Application</code> 有一个 <code class=\"language-text\">envs</code> 的属性，在调用 <code class=\"language-text\">removeEnv</code> 之后，<code class=\"language-text\">application</code> 的环境变量就更新了。如果需要持久化，就单独调用 <code class=\"language-text\">applicationRepository</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">ofId</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样的话持久化就和业务逻辑完全的分离开了，所有的 <code class=\"language-text\">POJO</code> 保证即使没有持久化也都可以正常的运转。领域对象是 <code class=\"language-text\">class</code> 而不是 <code class=\"language-text\">interface</code> 保证了内部的逻辑都是包含在业务层的。</p>","fields":{"slug_without_date":"/ddd-repository"}},{"id":"103476c0-0acb-5647-96f6-7ca454f4d10f","frontmatter":{"title":"Redux with react","date":"2016 May-12"},"html":"<p>沿着上一部分 <a href=\"/redux-get-started\">Get Started Redux</a>，在利用 <code class=\"language-text\">redux</code> 构建了 <code class=\"language-text\">store</code> <code class=\"language-text\">reducer</code> 之后，现在需要给应用提供个 <code class=\"language-text\">view</code> 了。我们用当下最流行的 <code class=\"language-text\">react</code>。</p>\n<h2 id=\"prepare-package-for-react-with-redux\" style=\"position:relative;\">prepare package for react with redux<a href=\"#prepare-package-for-react-with-redux\" aria-label=\"prepare package for react with redux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>安装 <code class=\"language-text\">react</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save react react-dom react-redux</code></pre></div>\n<p>其中 <code class=\"language-text\">react</code> <code class=\"language-text\">react-dom</code> 是 <code class=\"language-text\">react</code> 的原生包，<code class=\"language-text\">react-redux</code> 提供了一些方便的方法用来将 <code class=\"language-text\">redux</code> 和 <code class=\"language-text\">react</code> 一起使用。后面的代码示例会着重讲解。</p>\n<p>添加 <code class=\"language-text\">babel</code> 对 <code class=\"language-text\">jsx</code> 的支持。</p>\n<p><code class=\"language-text\">jsx</code> 是 <code class=\"language-text\">react</code> 支持的一种特殊的语法，这种语法用于将 <code class=\"language-text\">html</code> 写到 <code class=\"language-text\">js</code> 中，例如</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n      Click <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> times<span class=\"token punctuation\">.</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token string\">' '</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onIncrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span> <span class=\"token string\">' '</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onDecrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>目前可以认为 <code class=\"language-text\">jsx</code> 是写 <code class=\"language-text\">react</code> 的标配，那么就需要在 <code class=\"language-text\">babel</code> 中添加一个新的 <code class=\"language-text\">react</code> 翻译器。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev babel-preset-react</code></pre></div>\n<p>然后修改 <code class=\"language-text\">.babelrc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样，我们就可以开始写 <code class=\"language-text\">react</code> 了。</p>\n<h2 id=\"presentational-and-container-components\" style=\"position:relative;\">Presentational and Container Components<a href=\"#presentational-and-container-components\" aria-label=\"presentational and container components permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 <code class=\"language-text\">redux</code> 的官方文档 <a href=\"http://redux.js.org/docs/basics/UsageWithReact.html\">Use With React</a> 解释了一种 <code class=\"language-text\">redux</code> 和 <code class=\"language-text\">react</code> 结合的模式：将 <code class=\"language-text\">react</code> 的组件分为两种，一种是不与 <code class=\"language-text\">redux</code> 交互的 <code class=\"language-text\">presentational</code> 组件，它是一种通用的组件，任何提供给它所需要的 <code class=\"language-text\">func</code> 或者是 <code class=\"language-text\">prop</code> 的框架都可以使用它。另一种是 <code class=\"language-text\">container</code> 组件，是和 <code class=\"language-text\">redux</code> 的 <code class=\"language-text\">action</code> 以及 <code class=\"language-text\">store</code> 绑定的组件。通常都是会先写一个 <code class=\"language-text\">presentational</code> 组件，然后再创建一个 <code class=\"language-text\">container</code> 组件对 <code class=\"language-text\">presentational</code> 组件进行包装后使用。后面的 <em>full example</em> 展示了 <code class=\"language-text\">Counter</code> 与 <code class=\"language-text\">Visible Counter</code> 两个不同类型的组件。当然在<a href=\"http://redux.js.org/docs/basics/UsageWithReact.html\">官方</a>也提供了非常好的例子。</p>\n<h2 id=\"full-example\" style=\"position:relative;\">full example<a href=\"#full-example\" aria-label=\"full example permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先展示一下目录结构</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── actions\n│   └── index.js\n├── components\n│   ├── App.js\n│   └── Counter.js\n├── containers\n│   └── VisibleCounter.js\n├── dist\n│   ├── bundle.js\n│   ├── index.html\n│   └── styles.css\n├── entry.js\n├── package.json\n├── reducers\n│   └── counter.js\n├── styles\n│   ├── index.scss\n│   └── theme.scss\n├── test\n│   └── reducers\n│       └── counter.spec.js\n└── webpack.config.js</code></pre></div>\n<p>相对于之前的目录结构多了两个目录 <code class=\"language-text\">containers</code> <code class=\"language-text\">components</code> 分别对应了 <code class=\"language-text\">container</code> 和 <code class=\"language-text\">presentational</code> 的组件。</p>\n<p>首先我们定义一个 <code class=\"language-text\">presentational</code> 的组件 <code class=\"language-text\">Counter</code></p>\n<p><code class=\"language-text\">components/Counter.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> PropTypes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> onIncrement<span class=\"token punctuation\">,</span> onDecrement <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n          Click <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> times<span class=\"token punctuation\">.</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token string\">' '</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onIncrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span> <span class=\"token string\">' '</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onDecrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nCounter<span class=\"token punctuation\">.</span>PropTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  onIncrement<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  onDecrement<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意 <code class=\"language-text\">PropTypes</code> 有点像是一个函数的参数说明，它明确的定义了在使用这个组件时需要提供什么样子的东西，<code class=\"language-text\">react</code> 官方建议一定要对每一个组件都明确的定义这样的参数说明，它也起到了文档的作用，方便与其他人协作。这里我们需要三个东西：</p>\n<ol>\n<li><code class=\"language-text\">value</code> 当前的计数</li>\n<li><code class=\"language-text\">onIncrement</code> 当点击 <code class=\"language-text\">+</code> 时的动作</li>\n<li><code class=\"language-text\">onDecrement</code> 当点击 <code class=\"language-text\">-</code> 时的动作</li>\n</ol>\n<p>然后对 <code class=\"language-text\">Counter</code> 进行包装</p>\n<p><code class=\"language-text\">containers/VisibleCounter.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Counter <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/Counter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> increment<span class=\"token punctuation\">,</span> decrement <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../actions/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStatToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onIncrement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onDecrement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> VisibleCounter <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n    mapStatToProps<span class=\"token punctuation\">,</span>\n    mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> VisibleCounter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里用到了一个 <code class=\"language-text\">react-redux</code> 提供的方法 <code class=\"language-text\">connect</code> 它和下文提到的 <code class=\"language-text\">Provider</code> 配合使用，用于为 <code class=\"language-text\">react</code> 传递全局的 <code class=\"language-text\">store</code>。<code class=\"language-text\">connect</code> 需要两个函数 <code class=\"language-text\">mapStatToProps</code> 与 <code class=\"language-text\">mapDispatchToProps</code> 分别将 <code class=\"language-text\">store</code> 里的属性和 <code class=\"language-text\">store</code> 的 <code class=\"language-text\">dispatch</code> 动作传递给 <code class=\"language-text\">presentational</code> 组件。上面的代码就分别将 <code class=\"language-text\">store</code> 的 <code class=\"language-text\">state</code> 对应给组件的 <code class=\"language-text\">value</code> 属性，将两个 <code class=\"language-text\">action</code> 的 <code class=\"language-text\">dispatch</code> 对应到 <code class=\"language-text\">onIncrement</code> 与 <code class=\"language-text\">onDecrement</code>。</p>\n<p>然后还有一个 <code class=\"language-text\">App</code> 组件，用于包装 <code class=\"language-text\">VisibleCounter</code>，它没有任何依赖的属性。</p>\n<p><code class=\"language-text\">components/App.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from 'react';\nimport VisibleCounter from '../containers/VisibleCounter';\n\nclass App extends Component {\n  render() {\n    return (\n        &lt;div>\n          &lt;VisibleCounter />\n        &lt;/div>\n    )\n  }\n}\n\nexport default App;</code></pre></div>\n<p>最后我们修改 <code class=\"language-text\">entry.js</code> 将 <code class=\"language-text\">store</code> 与我们的视图绑定起来。</p>\n<p><code class=\"language-text\">entry.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">require('./styles/index.scss');\n\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport counter from './reducers/counter';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport { createStore } from 'redux';\n\nconst store = createStore(counter);\nconst rootEl = document.querySelector(\"#root\");\n\nfunction render() {\n  ReactDOM.render(\n      &lt;Provider store={store}>\n        &lt;App />\n      &lt;/Provider>,\n      rootEl\n  )\n}\n\nrender();\nstore.subscribe(render);</code></pre></div>\n<p>这里就用到了 <code class=\"language-text\">Provider</code> 方法，将 <code class=\"language-text\">store</code> 传递给 <code class=\"language-text\">App</code>，然后用 <code class=\"language-text\">ReactDOM</code> 在页面上生成 <code class=\"language-text\">react</code> 组件。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"http://redux.js.org\">redux</a></li>\n<li><a href=\"https://github.com/reactjs/redux/tree/master/examples/counter\">redux counter example</a></li>\n<li><a href=\"http://redux.js.org/docs/basics/UsageWithReact.html\">use with react</a></li>\n<li><a href=\"https://babeljs.io/docs/usage/babelrc/\">babelrc</a></li>\n</ol>","fields":{"slug_without_date":"/redux-with-react"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":19,"pageCount":37}}},"pageContext":{"limit":3,"skip":54}},"staticQueryHashes":[]}