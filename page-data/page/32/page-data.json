{"componentChunkName":"component---src-templates-blogs-js","path":"/page/32","result":{"data":{"blogs":{"nodes":[{"id":"96e7a992-8327-513e-b950-23c23d313c55","frontmatter":{"title":"POJ 1087","date":"2012 April-18"},"html":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token comment\">/*\n * 题目: A Plug for UNIX | POJ 1087\n * http://poj.org/problem?id=1087\n *\n * 核心是最大流算法\n * 不过我倒是觉得更重要的是如何构造这个图\n *\n * @author: aisensiy(http://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LIM</span> <span class=\"token expression\"><span class=\"token number\">600</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">INF</span> <span class=\"token expression\"><span class=\"token number\">100000</span></span></span>\n\n<span class=\"token keyword\">int</span> graph<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \t\t<span class=\"token comment\">//二维数组的图结构</span>\n<span class=\"token keyword\">int</span> q<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//广度遍历所有需要的队列</span>\n<span class=\"token keyword\">int</span> front<span class=\"token punctuation\">,</span> rear<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//队列的头尾</span>\n<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//残留网络</span>\n\n<span class=\"token keyword\">int</span> pre<span class=\"token punctuation\">[</span>LIM<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//追朔广度遍历结果的前驱数组</span>\n\nmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> id<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//用于生成字符串映射正数</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> order <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//初始ID</span>\n<span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * &lt;h2>关于构建最大流的图&lt;/h2>\n * 在算法导论里面有讲，这种多源点多汇点的网络问题，都可以\n * 为其添加一个超级源点与超级汇点来解决。\n * 那么如何构建这个图使之转化为通解的最大流问题就成了这个\n * 题的重点。\n *\n * 首先按照题意可知，设备算是源点，而插口算是汇点。\n * 那么需要在设备之前添加超级源点s，在插口之后添加超级汇点\n * t。\n *\n * 由于插口的数量是有限的，那么插口到超级汇点的容量c(u, t)应\n * 当等于插口的个数，counter(u) = 1。\n * 这个个数我们可以在输入的时候计算出来。\n * 超级源点与设备之间的容量c(s, v)可以为构建这种方法的默认值INF。\n *\n * &lt;h2>关于如何把字符串转换成图中的节点&lt;/h2>\n * 这是我一开始很头疼的事情。\n * 在网上找了一些这道题的解析，受益匪浅。\n * http://blog.csdn.net/ChinaCzy/article/details/5713749\n * 这个我觉得非常不错。\n * 作者用一个map&lt;string, int>为输入的字符串指定一个id就像是数据库里面\n * 设定为自增的主键一样。非常不错的想法。\n */</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">create_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring plug<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> adaptor<span class=\"token punctuation\">;</span>\n\n\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcin<span class=\"token operator\">>></span>plug<span class=\"token punctuation\">;</span>\n\t\tid<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tgraph<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tcin<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcin<span class=\"token operator\">>></span>device<span class=\"token operator\">>></span>plug<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tid<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tgraph<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n\t\tgraph<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>device<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 建立适配器插口与接口的关系，由于适配器是无限多的</span>\n\t<span class=\"token comment\">// 设定capacity = INF</span>\n\tcin<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcin<span class=\"token operator\">>></span>adaptor<span class=\"token operator\">>></span>plug<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>adaptor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>adaptor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> order<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\tgraph<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>adaptor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>plug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 广度遍历</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> front <span class=\"token operator\">=</span> rear <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tq<span class=\"token punctuation\">[</span>rear<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>rear <span class=\"token operator\">></span> front<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tu <span class=\"token operator\">=</span> q<span class=\"token punctuation\">[</span>front<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tpre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n\t\t\t\tq<span class=\"token punctuation\">[</span>rear<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 最大流算法</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max_flow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inc<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\tinc <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span> v<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">;</span> v<span class=\"token operator\">=</span>u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tu <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> inc<span class=\"token punctuation\">)</span> inc <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span> v<span class=\"token operator\">!=</span>s<span class=\"token punctuation\">;</span> v<span class=\"token operator\">=</span>u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tu <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> inc<span class=\"token punctuation\">;</span>\n\t\t\tr<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> inc<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tmax <span class=\"token operator\">+=</span> inc<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">create_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">max_flow</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcout<span class=\"token operator\">&lt;&lt;</span>m <span class=\"token operator\">-</span> max<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug_without_date":"/poj-1087"}},{"id":"703c6e4a-178b-508a-86df-0589b5fb6d9a","frontmatter":{"title":"POJ-1002","date":"2012 April-08"},"html":"<p>又写了一道水题，按照顺序写的。不知道能不能坚持下去。</p>\n<p><a href=\"http://poj.org/problem?id=1002\">1002</a></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token comment\">/* \n * http://poj.org/problem?id=1002\n * \n * 题简单的没什么可说的 重点是更快的输入处理能力\n * AC的耗时很长，肯定有优化的余地，我只是个菜鸟，\n * 仅供参考\n *\n * @author: aisensiy(http://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这是A-Z与数字的映射表</span>\n<span class=\"token keyword\">int</span> charmap<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这就是带我AC的函数 如果用C++的getline的话 是过不了的！</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_getline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>lim<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'n'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tline<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\tline<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\tstring line<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> lines<span class=\"token punctuation\">;</span>\n\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> countmap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> _line<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//这是原来的语句</span>\n\t\t<span class=\"token comment\">//getline(cin, line);</span>\n\t\t<span class=\"token function\">_getline</span><span class=\"token punctuation\">(</span>_line<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tline <span class=\"token operator\">=</span> _line<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//cout&lt;&lt;line&lt;&lt;\" \";</span>\n\t\tres <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span> <span class=\"token operator\">&amp;&amp;</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> res <span class=\"token operator\">+=</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span> <span class=\"token operator\">&amp;&amp;</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> res <span class=\"token operator\">+=</span> charmap<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> res <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//cout&lt;&lt;res&lt;&lt;endl;</span>\n\t\tcountmap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> countmap<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span> <span class=\"token operator\">:</span> countmap<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> output<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator i <span class=\"token operator\">=</span> countmap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> countmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>second <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"No duplicates.\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>countmap<span class=\"token punctuation\">[</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","fields":{"slug_without_date":"/211"}},{"id":"bf7e9dcd-06df-565b-8696-39fac12d62ba","frontmatter":{"title":"第一道ACM","date":"2012 April-07"},"html":"<p>一直都对C/C++有抵触心理，嫌麻烦。不过由于如果想要做相关的训练，就必须依赖于这个平台。于是昨天就重新回顾了一下C++的语法，不求精通，只求可以写出来能AC的程序... 下面就是我写的第一道AC的题了。</p>\n<p>1001</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token comment\">/*\n * 题目: 计算一个大数的n次方 结果要求是绝对精确值\n * http://poj.org/problem?id=1001\n *\n * 我也没有看其他高人的算法 而是凭自己的想法做出来的\n * 核心就是用字符串模拟了小学教的乘法 还有 加法运算\n *\n * @author: aisensiy(http://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nstring <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string num<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>num<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//通过乘法计算出n次方</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i      res <span class=\"token operator\">=</span> <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//目前的结果忽略了所有的小数点</span>\n    <span class=\"token comment\">//需要做进一步处理</span>\n    string new_res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//首先删除前面多余的零</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">==</span> j <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>zero<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> new_res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> new_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      new_res <span class=\"token operator\">=</span> new_res<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> new_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> b_i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> borrow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    string v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a_i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n      v <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      borrow <span class=\"token operator\">=</span> cur <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>borrow<span class=\"token punctuation\">)</span> v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n    string <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">=</span> z <span class=\"token operator\">+</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    zero<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 两个数的加法\n * 同样忽略了小数点\n */</span>\nstring <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string v<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> borrow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> cur <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    borrow <span class=\"token operator\">=</span> cur <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>borrow<span class=\"token punctuation\">)</span> v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","fields":{"slug_without_date":"/e7acace4b880e98193acm"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":32,"pageCount":37}}},"pageContext":{"limit":3,"skip":93}},"staticQueryHashes":[]}