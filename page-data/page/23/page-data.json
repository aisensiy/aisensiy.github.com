{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/23",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"9958f3dc-af13-5b1d-a620-73104b500de0","frontmatter":{"title":"Redux with react router update","date":"2016 August-17"},"html":"<p>之前有写过一篇 <a href=\"/redux-with-react-router\">Redux With React Router</a>，介绍 <code>redux</code> 与 <code>react-router</code> 结合实现多个视图的 WebApp，但是最近才发现有很多地方已经和之前使用的方式不一样了，这里做一个更新。</p>\n<h2 id=\"use-react-router-without-redux\" style=\"position:relative;\">use react-router without redux<a href=\"#use-react-router-without-redux\" aria-label=\"use react router without redux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>react-router</code> 提供了 <code>react</code> 的路由机制，在之前的文章中讲到了它可以和 <code>react-router-redux</code> 一起使用。当时的目的是为了将路由的信息传递到 <code>redux store</code> 中，在做 <code>container component</code> 的 <code>connect</code> 时可以通过 <code>mapStateToProps</code> 的方式将路由中的信息提供给组件使用。但是随着 <code>react-router</code> 的不断更新以及 <code>react-router-redux</code> 的定位的不断明确，现在可以不适用 <code>react-router-redux</code> 而仅仅用 <code>redux-router</code> 完成将路由绑定到 <code>container component</code>。而 <code>react-router-redux</code> 成为了追朔包含了路由的用户行为的一个工具，而这个功能对于很多应用来说不是很有必要，其官方文档也强调:</p>\n<blockquote>\n<p>This library is not necessary for using Redux together with React Router. You can use the two together just fine without any additional libraries. It is useful if you care about recording, persisting, and replaying user actions, using time travel. If you don't care about these features, just use Redux and React Router directly.</p>\n</blockquote>\n<h2 id=\"采用-withrouter-的高阶组件实现路由的绑定\" style=\"position:relative;\">采用 withRouter 的高阶组件实现路由的绑定<a href=\"#%E9%87%87%E7%94%A8-withrouter-%E7%9A%84%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E7%9A%84%E7%BB%91%E5%AE%9A\" aria-label=\"采用 withrouter 的高阶组件实现路由的绑定 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，对于直接在 <code>Router</code> 中出现的组件，<code>react-router</code> 通过 <code>context</code> 的方式为该组件提供了当前路由的信息（如 <code>params</code> <code>location</code> 等）。但是如果是嵌套在路由创建的组件下的其他容器需要使用路由的信息呢？这个时候就需要用到 <code>withRouter</code> 这个由 <code>react-router</code> 提供的高阶组件了。在<a href=\"https://egghead.io/lessons/javascript-redux-using-withrouter-to-inject-the-params-into-connected-components\">这里</a> 由 <code>redux</code> 的作者提供了一个视频教程介绍了这个方法。可是如果你直接 <code>npm install react-router --save</code> 之后就按着作者的来使用的话会发现根本没有 <code>params</code> 的参数...原因在于 <code>withRouter</code> 这个高阶参数在当前默认的最新版 <code>react-router</code> 中根本没有提供这个东西，它仅仅注入了 <code>router</code> 方便组件做导航而已...只有明确的指定 <code>\"react-router\": \"^3.0.0-alpha.1\"</code> 的版本之后才能这么做...坑爹呀。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://egghead.io/lessons/javascript-redux-using-withrouter-to-inject-the-params-into-connected-components\">How to use withRouter</a></li>\n<li><a href=\"https://github.com/reactjs/react-router\">react-router</a></li>\n<li><a href=\"https://github.com/reactjs/react-router-tutorial\">react-router-tutorial</a></li>\n</ol>","fields":{"slug_without_date":"/redux-with-react-router-update"}},{"id":"9af50496-906e-5b91-9b14-93616ba4910b","frontmatter":{"title":"Learn wercker","date":"2016 June-02"},"html":"<p>半年来一直在做一个 PaaS 的项目，比较关注市面上的相关产品。最近发现一个叫做 wercker 的项目，感觉做的还不错，介绍一下。</p>\n<h2 id=\"wercker-要解决的问题\" style=\"position:relative;\">wercker 要解决的问题<a href=\"#wercker-%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"wercker 要解决的问题 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>目前有很多的平台（如 mesos, rancher, kubernetes）都支持以 <code>docker image</code> 的形式进行应用的部署，但是却没有很多的工具帮助将 ci/cd 与这些平台进行更好的对接。而 wercker 的口号是 <code>From code to container</code>，强调自己可以做 ci/cd 的事情将代码转化为容器。那么之后就可以将这个容器作为交付的内容在需要的环境进行部署了。</p>\n<h2 id=\"wercker-的特性\" style=\"position:relative;\">wercker 的特性<a href=\"#wercker-%E7%9A%84%E7%89%B9%E6%80%A7\" aria-label=\"wercker 的特性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li>\n<p>pipeline as cde</p>\n<p>wercker 提供一个类似于 <code>ansible</code> 的 <code>wercker.yml</code> 并提供与 <code>ansible</code> 类似的自定义命令来做部署的工作。</p>\n<p>自定义命令的功能非常的强大，种类也非常的丰富。例如 <code>npm-install</code> 安装 <code>node</code> 的依赖，<code>internal/docker-push</code> 将生成的 <code>image</code> 上传到 <code>docker registry</code>，<code>marathon-deploy</code> 将应用部署到 <code>marathon</code> 平台。</p>\n<p>整个 <code>pipeline</code> 可以通过这些命令拼装起来，所有的 pipeline 都可以通过一个 <code>wercker.yml</code> 文件进行管理。</p>\n</li>\n<li>\n<p>本地环境</p>\n<p>wercker 有一个命令行工具 <code>wercker-cli</code> 支持在本地通过 <code>docker</code> 和 <code>wercker-cli</code> 构建一个本地的开发环境，并且支持在本地环境提供 <code>backing service</code>。</p>\n</li>\n<li>\n<p>多 vendor 支持</p>\n<p>wercker 可以和多个 <code>PaaS</code> 对接的，包括 <code>heroku</code> <code>kubernetes</code> <code>marathon</code> <code>ecs</code> 等。这一点非常的难能可贵，想象一下，作为一个开发者，当有了类似于 <code>ecs</code> 或者 <code>heroku</code> 这样的公有云之后再配合 <code>wercker</code> 这样的工具可以快速的搭建 <code>pipeline</code> 以及完成以前需要花费更多时间才能得到的 <code>ci/cd</code> 开发效率真是大大的提升。</p>\n</li>\n<li>\n<p>ui 界面</p>\n<p>提供一个 ui 界面管理整个 pipeline</p>\n</li>\n<li>\n<p>与 github &#x26; bitbucket 对接</p>\n<p>支持 github bitbucket hook，在有新的 commit 之后自动构建、部署。\n管理关键数据，有些数据不适合存放在 <code>wercker.yml</code> 中，例如 <code>heroku</code> 的 <code>accesskey</code>，<code>docker-hub</code> 的账号密码。</p>\n</li>\n</ol>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://wercker.com\">wercker</a></p>","fields":{"slug_without_date":"/learn-wercker"}},{"id":"31954821-49db-5590-a36d-d92c4768164a","frontmatter":{"title":"Webpack and Redux, minify the output bundle","date":"2016 May-29"},"html":"<p>webpack + redux + react 开发前端最终会将所有的 js 依赖打包成为一个（或者几个，因配置不同而不同）js 文件。虽然 <code>webpack</code> 很好的帮助我们解决了依赖的问题，避免了一大堆分散的 js 文件出现在页面里，但是最终打包出来的 js 文件依然会变成所有依赖的 js 的 size 的总和，成为前端页面响应速度的巨大负担。不过通过一些调优可以最大化的减少最终的打包文件的大小并提升运行性能。</p>\n<h2 id=\"dev--production-env\" style=\"position:relative;\"><code>dev</code> &#x26; <code>production</code> env<a href=\"#dev--production-env\" aria-label=\"dev  production env permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，我们可以通过设定不同的 <code>NODE_ENV</code> 环境变量去控制在不同的环境下引入的配置。通过在 <code>webpack.config.js</code> 中读取 <code>process.env.NODE_ENV</code> 可以为 <code>webpack</code> 提供不同的 <code>plugin</code> 用于控制 <code>webpack</code> 的打包机制。下面是一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> plugins <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">API_PREFIX</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_PREFIX</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'\"{{API_PREFIX}}\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>DedupePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>OccurenceOrderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      warnings<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">API_PREFIX</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_PREFIX</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'\"{{API_PREFIX}}\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code>DefinePlugin</code> 可以为 <code>webpack</code> 提供全局变量，这里我们利用它将 <code>node</code> 中的 <code>process.env.NODE_ENV</code> 转换为 <code>webpack</code> 构建最终的 <code>js</code> 时用到的全局变量。如果直接在 <code>webpack</code> 构建时处理的 <code>js</code> 文件中直接引用 <code>nodejs</code> 才能读取的 <code>process.env</code> 是不会有任何效果的。</p>\n<p>然后，我们通过这个 <code>process.env.NODE_ENV</code> 的不同加载不同的 <code>configureStore.js</code>，将在 <code>production</code> 环境下用不到的 <code>redux</code> 中间件清理掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./configureStore.prod'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./configureStore.dev'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>configureStore.prod.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'../reducers/index'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>configureStore.dev.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span>\n<span class=\"token keyword\">import</span> createLogger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'../reducers/index'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">,</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"利用-webpack-插件压缩输出文件\" style=\"position:relative;\">利用 <code>webpack</code> 插件压缩输出文件<a href=\"#%E5%88%A9%E7%94%A8-webpack-%E6%8F%92%E4%BB%B6%E5%8E%8B%E7%BC%A9%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6\" aria-label=\"利用 webpack 插件压缩输出文件 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在各种前端构建工具中都受不了 <code>uglify</code> 的过程，<code>webpack</code> 也不例外。在上文 <code>webpack.config.js</code> 的例子中对 <code>production</code> 环境下的 <code>webpack</code> 就提供了各种插件用于压缩文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    warnings<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"采用-webpack-bundle-size-analyzer-分析依赖大小\" style=\"position:relative;\">采用 <code>webpack-bundle-size-analyzer</code> 分析依赖大小<a href=\"#%E9%87%87%E7%94%A8-webpack-bundle-size-analyzer-%E5%88%86%E6%9E%90%E4%BE%9D%E8%B5%96%E5%A4%A7%E5%B0%8F\" aria-label=\"采用 webpack bundle size analyzer 分析依赖大小 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果以上两种优化都做了（尤其是 uglify）那么恭喜你，你的 js 输出文件已经是处理前的三分之一了。我在自己的一个项目中最终的 <code>bundle.js</code> 文件从 <code>2.2MB</code> 降到了 <code>800KB</code> 效果还是非常好的。</p>\n<p>但是 <code>800KB</code> 还是好大的一个文件，如果还想继续优化呢？那就需要有针对性的进行优化了。我们在开发的过场中依赖了乱七八糟的 <code>package</code> 那么是不是能通过减少依赖或者是更换依赖的方式来进一步的减少最终输出文件的大小呢？那么，首先需要知道每个依赖占据的比例了。这里我们采用一个工具 <code>webpack-bundle-size-analyzer</code> 分析所有依赖的大小。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g webpack-bundle-size-analyzer</code></pre></div>\n<p>然后</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">webpack --json <span class=\"token operator\">|</span> webpack-bundle-size-analyzer</code></pre></div>\n<p>就可以看到所有依赖的大小占比了：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">react: 667.34 KB (28.9%)\n  fbjs: 33.59 KB (5.03%)\n  &lt;self>: 633.74 KB (95.0%)\nmoment: 454.54 KB (19.7%)\nbootstrap: 273.93 KB (11.9%)\njquery: 251.51 KB (10.9%)\nreact-router: 159.31 KB (6.91%)\n  history: 52.69 KB (33.1%)\n    deep-equal: 3.8 KB (7.22%)\n    query-string: 1.62 KB (3.08%)\n      strict-uri-encode: 182 B (10.9%)\n      &lt;self>: 1.45 KB (89.1%)\n    &lt;self>: 47.26 KB (89.7%)\n  warning: 1.76 KB (1.11%)\n  invariant: 1.48 KB (0.929%)\n  hoist-non-react-statics: 1.35 KB (0.850%)\n  &lt;self>: 102.03 KB (64.0%)\nformsy-react-components: 36.24 KB (1.57%)\n  classnames: 2.58 KB (7.11%)\n  &lt;self>: 33.66 KB (92.9%)\nsuperagent: 30.57 KB (1.32%)\n  component-emitter: 3.11 KB (10.2%)\n  reduce-component: 405 B (1.29%)\n  &lt;self>: 27.06 KB (88.5%)\nformsy-react: 30.55 KB (1.32%)\n  form-data-to-object: 1.19 KB (3.91%)\n  &lt;self>: 29.36 KB (96.1%)\naxios: 29.18 KB (1.26%)\nredux: 25.8 KB (1.12%)\n  lodash: 3.34 KB (12.9%)\n  symbol-observable: 451 B (1.71%)\n  &lt;self>: 22.02 KB (85.4%)\nreact-redux: 25.54 KB (1.11%)\n  lodash: 3.34 KB (13.1%)\n  invariant: 1.48 KB (5.80%)\n  hoist-non-react-statics: 1.35 KB (5.30%)\n  &lt;self>: 19.37 KB (75.8%)\nredux-logger: 8.29 KB (0.359%)\nstyle-loader: 6.99 KB (0.303%)\nwebpack: 3 KB (0.130%)\n  node-libs-browser: 2.76 KB (91.8%)\n    process: 2.76 KB (100%)\n    &lt;self>: 0 B (0.00%)\n  &lt;self>: 251 B (8.17%)\nobject-assign: 1.95 KB (0.0844%)\ncss-loader: 1.47 KB (0.0638%)\nredux-thunk: 306 B (0.0130%)\nsuperagent-prefix: 198 B (0.00838%)\nreact-dom: 63 B (0.00267%)\n&lt;self>: 300.1 KB (13.0%)</code></pre></div>\n<p>这里在优化前的输出情况，其中 <code>react</code> 最大，占整个输出的 <code>28.9%</code>，未压缩前 <code>bundle.js</code> 为 <code>2.24MB</code>。<code>react</code> 是我们的核心依赖，是没什么办法做优化了，但是占比第二高的 <code>moment</code> 仅仅是一个用于日期格式化的工具，占比如此之高实在是可疑。通过搜索其他的可选方案，我将 <code>moment</code> 替换为 <code>date-fns</code>，bundle 文件减小为 <code>1.7MB</code> 压缩后文件减小为 <code>558KB</code>。</p>\n<h2 id=\"最后的最后\" style=\"position:relative;\">最后的最后<a href=\"#%E6%9C%80%E5%90%8E%E7%9A%84%E6%9C%80%E5%90%8E\" aria-label=\"最后的最后 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果你真的还觉得太大了...那，就只有靠 nginx 那边做 <code>gzip</code> 优化了...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gzip  on;\ngzip_types      text/plain application/xml text/css text/html application/javascript;</code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://webpack.github.io/docs/optimization.html\">webpack optimization</a></li>\n<li><a href=\"https://moduscreate.com/optimizing-react-es6-webpack-production-build/\">Optimizing React + ES6 + Webpack Production Build</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17093796/date-formatting-with-without-moment-js\">date-format-without-moment</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30030031/passing-environment-dependent-variables-in-webpack\">passing-environment-dependent-variables-in-webpack</a></li>\n<li><a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html\">nginx gzip</a></li>\n</ol>","fields":{"slug_without_date":"/webpack-redux-minify"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":23,"pageCount":42}}},"pageContext":{"limit":3,"skip":66}},
    "staticQueryHashes": []}