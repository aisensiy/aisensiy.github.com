{"componentChunkName":"component---src-templates-blogs-js","path":"/page/34","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"703c6e4a-178b-508a-86df-0589b5fb6d9a","frontmatter":{"title":"POJ-1002","date":"2012 April-08"},"html":"<p>又写了一道水题，按照顺序写的。不知道能不能坚持下去。</p>\n<p><a href=\"https://poj.org/problem?id=1002\">1002</a></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token comment\">/* \n * https://poj.org/problem?id=1002\n * \n * 题简单的没什么可说的 重点是更快的输入处理能力\n * AC的耗时很长，肯定有优化的余地，我只是个菜鸟，\n * 仅供参考\n *\n * @author: aisensiy(https://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这是A-Z与数字的映射表</span>\n<span class=\"token keyword\">int</span> charmap<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这就是带我AC的函数 如果用C++的getline的话 是过不了的！</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_getline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>lim<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'n'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tline<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\tline<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\tstring line<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> lines<span class=\"token punctuation\">;</span>\n\tmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> countmap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> _line<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tcin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//这是原来的语句</span>\n\t\t<span class=\"token comment\">//getline(cin, line);</span>\n\t\t<span class=\"token function\">_getline</span><span class=\"token punctuation\">(</span>_line<span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tline <span class=\"token operator\">=</span> _line<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//cout&lt;&lt;line&lt;&lt;\" \";</span>\n\t\tres <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span> <span class=\"token operator\">&amp;&amp;</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> res <span class=\"token operator\">+=</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span> <span class=\"token operator\">&amp;&amp;</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> res <span class=\"token operator\">+=</span> charmap<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> res <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">//cout&lt;&lt;res&lt;&lt;endl;</span>\n\t\tcountmap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> countmap<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span> <span class=\"token operator\">:</span> countmap<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> output<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator i <span class=\"token operator\">=</span> countmap<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> countmap<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>second <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"No duplicates.\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>countmap<span class=\"token punctuation\">[</span>output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","fields":{"slug_without_date":"/211"}},{"id":"bf7e9dcd-06df-565b-8696-39fac12d62ba","frontmatter":{"title":"第一道ACM","date":"2012 April-07"},"html":"<p>一直都对C/C++有抵触心理，嫌麻烦。不过由于如果想要做相关的训练，就必须依赖于这个平台。于是昨天就重新回顾了一下C++的语法，不求精通，只求可以写出来能AC的程序... 下面就是我写的第一道AC的题了。</p>\n<p>1001</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token comment\">/*\n * 题目: 计算一个大数的n次方 结果要求是绝对精确值\n * http://poj.org/problem?id=1001\n *\n * 我也没有看其他高人的算法 而是凭自己的想法做出来的\n * 核心就是用字符串模拟了小学教的乘法 还有 加法运算\n *\n * @author: aisensiy(http://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nstring <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string num<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>num<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//通过乘法计算出n次方</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i      res <span class=\"token operator\">=</span> <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//目前的结果忽略了所有的小数点</span>\n    <span class=\"token comment\">//需要做进一步处理</span>\n    string new_res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//首先删除前面多余的零</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">==</span> j <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>zero<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> new_res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> new_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      new_res <span class=\"token operator\">=</span> new_res<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> new_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> b_i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> borrow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    string v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a_i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n      v <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      borrow <span class=\"token operator\">=</span> cur <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>borrow<span class=\"token punctuation\">)</span> v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n    string <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">=</span> z <span class=\"token operator\">+</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    zero<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 两个数的加法\n * 同样忽略了小数点\n */</span>\nstring <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string v<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> borrow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> cur <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    borrow <span class=\"token operator\">=</span> cur <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>borrow<span class=\"token punctuation\">)</span> v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","fields":{"slug_without_date":"/e7acace4b880e98193acm"}},{"id":"6b299670-3f25-5d2f-aeca-95fcd6930e90","frontmatter":{"title":"自己对项目选择和心态的感想","date":"2012 March-16"},"html":"<p>前一阵子看了小平的一篇blog，会想到自己以前做的一些项目有感而发。</p>\n<p>导致一个结果的因素分主客观，客观因素是多事的客户，主观因素是自己的设计。两者的权重此消彼长，此长彼消。\n客户多事，需求反复修改，其实已经算是一个非常常见，几乎不能避免的事情。与其指望碰到好伺候的客户，不如自己在一开始就想好项目在哪里变更的几率大，做好设计，给自己留下后路。\n不过话说回来，设计也是成本，而且是很大的成本。面对紧张的开发时间，尤其是自己给自己带来的那种急切的开发完成的想法，总是敦促着自己快快着手开始编码。这与静下心来，好好写写设计以及开发流程什么的真的是难以调和的矛盾。而且，想做个好的设计也不单单是时间的问题。那真的需要自己仔仔细细的去想一想才行。有的时候，想的太复杂，封装层次太多，很可能没有这个必要，而且会让自己的初期开发反而更加麻烦。但是有的时候想的太简单，没有合适的结构，一遇到要修改的地方，实在是棘手。</p>\n<p>那么面对这么多种种乌七八糟的事情，应该怎么办呢？我自己有这样的一点想法，希望写下来留下罪证，以便自己以后可以回顾一下。</p>\n<p>第一，放弃不靠谱的项目。这是一个眼前利益，与长远发展的权衡。一个不靠谱的项目可能会让你身心俱损，但是依个人的责任感说，既然肯接，就一定会努力完成。就算是搓了点，累了点，但终究是会交差。起码做了一个就有一个的钱。不接，一分钱都没有。但是，我在想，真正的价值不仅仅是金钱，还有计算你所花费的时间，你所损耗的精力，以及其对你心态等等方方面面的影响。一个不靠谱的项目终究是会给你带来金钱（别告诉我没钱，咱们就不用这样讨论了不是）。但是，你耗费了大量的时间和精力。那这些时间和精力你还是可以去做很多其他事情的。你可以看书，可以上课，可以运动，可以很朋友同学出去玩，交流感情（要是一不小心，找到个女朋友，赚大了）。其实这些都不比内心满含怨念的写代码换来的RMB贱。很多东西是不能仅仅拿RMB衡量的。而且，用来看书和学习的时间是你厚积而薄发的基础，跬步的积累是真正爆发不可或缺的内容。如果项目靠谱，在获取金钱的同时也可以收获很多其他的内容，那当然是绝对不能错过的。但是，如果仅仅是为了挣点外快而勉强接受了一个自己一开始就觉得不靠谱的项目，那之后让自己捶胸顿足、夜夜熬战就是为了赚那么点钱实在就是得不偿失了。\n同样的，君子不立于危墙。应当在根源上根除不靠谱，一开始就来到了不靠谱的环境，今后有什么非同寻常又收效甚微的情况就属正常现象了。该离开时就离开，自己的生活，酸甜苦辣自己最清楚。</p>\n<p>第二，端正自己的心态，尤其是要积极的去调整自己的心态。我想来想去，很多事情，真的就是心态的问题。\n其实很多工作没有那么复杂，要改个功能什么的，算上自己的重构和设计方面的考虑，可能也不会花费那么多的时间。关键是内心的抵触情绪让自己难以立即着手工作。写程序的时候是最不能钻牛角尖的，总有那么一些时候就是有个什么bug搞不定，就是非要在那个时候搞定才罢休，但是那个时候的自己早就已经心浮气躁不能很好的去判断这个bug的原因了。盲目的消耗下去是不可取的。学会调整自己的心态，先休息一下，转而去做一些其他方面的东西没准儿会让自己突然想到bug的起因。</p>\n<p>工作应该是自己喜欢的事业，是能给自己带来快乐的，自己应该是更积极更主动的思考，而不是被动的接受别人的要求像机器一样运转。程序员本身就应该是很高端的工作，代码只是自己想法的实现，更重要的应该是自己的思考: 程序的思想，数据的结构，算法的实现。如果是仅仅是拿到别人的非常详细的需求然后\"翻译\"成相应的语言，那整个流程就全反了。</p>","fields":{"slug_without_date":"/e887aae5b7b1e5afb9e9a1b9e79baee98089e68ba9e5928ce5bf83e68081e79a84e6849fe683b3"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":34,"pageCount":38}}},"pageContext":{"limit":3,"skip":99}},"staticQueryHashes":[]}