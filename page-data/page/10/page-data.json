{"componentChunkName":"component---src-templates-blogs-js","path":"/page/10","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"fce311d0-83c8-5ff2-962a-cfd5d2b0f3c2","frontmatter":{"title":"Ansible 一些 tips","date":"2018 April-16"},"html":"<p>Ansible 是一个自动化部署脚本，通过它可以让很多的 server 执行一系列相同的任务，是大规模集群管理的利器。虽然已经用了好久了，但是之前都没有记录一些使用的技巧。最近终于还是好好的记录了一些，免得自己以后忘得干干净净。</p>\n<h2 id=\"1-如何跳过第一次登陆一个机器时的授权\" style=\"position:relative;\">1. 如何跳过第一次登陆一个机器时的授权<a href=\"#1-%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%99%BB%E9%99%86%E4%B8%80%E4%B8%AA%E6%9C%BA%E5%99%A8%E6%97%B6%E7%9A%84%E6%8E%88%E6%9D%83\" aria-label=\"1 如何跳过第一次登陆一个机器时的授权 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>我们创建一个新的机器第一次登陆的时候会显示如下的东西：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> root@xxx\n\nThe authenticity of <span class=\"token function\">host</span> <span class=\"token string\">'xxxx (xxxxx)'</span> can't be established.\nECDSA key fingerprint is SHA256:xxxx.\nAre you sure you want to <span class=\"token builtin class-name\">continue</span> connecting <span class=\"token punctuation\">(</span>yes/no<span class=\"token punctuation\">)</span>? </code></pre></div>\n<p>如果管理的机器很多，每次都要去确认一下肯定是要了命了。为了避免这种 popup 的问题有如下两种方式：</p>\n<ol>\n<li>\n<p>设置环境变量 <code>ANSIBLE_HOST_KEY_CHECKING=False</code></p>\n</li>\n<li>\n<p>在 ~/.ansible.cfg 或者 playbook 同目录下的配置文件增加</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[defaults]\nhost_key_checking = False</code></pre></div>\n</li>\n</ol>\n<p><a href=\"https://stackoverflow.com/questions/32297456/how-to-ignore-ansible-ssh-authenticity-checking\">How to ignore ansible SSH authenticity checking? - Stack Overflow</a></p>\n<h2 id=\"2-使用-pem-文件访问机器\" style=\"position:relative;\">2. 使用 .pem 文件访问机器<a href=\"#2-%E4%BD%BF%E7%94%A8-pem-%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%99%A8\" aria-label=\"2 使用 pem 文件访问机器 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ansible-playbook -v <span class=\"token punctuation\">\\</span>\n  -i inventory <span class=\"token punctuation\">\\</span>\n  -u ubuntu --become <span class=\"token punctuation\">\\</span>\n  --private-key<span class=\"token operator\">=~</span>/.ssh/k8s.pem <span class=\"token punctuation\">\\</span>\n  nvidia-docker.yml</code></pre></div>\n<h2 id=\"3-展示更详细的日志\" style=\"position:relative;\">3. 展示更详细的日志<a href=\"#3-%E5%B1%95%E7%A4%BA%E6%9B%B4%E8%AF%A6%E7%BB%86%E7%9A%84%E6%97%A5%E5%BF%97\" aria-label=\"3 展示更详细的日志 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ansible-playbook <span class=\"token punctuation\">..</span>. -vvvv <span class=\"token punctuation\">..</span>.</code></pre></div>\n<h2 id=\"4-使用-ansible-galaxy-初始化-role\" style=\"position:relative;\">4. 使用 ansible galaxy 初始化 role<a href=\"#4-%E4%BD%BF%E7%94%A8-ansible-galaxy-%E5%88%9D%E5%A7%8B%E5%8C%96-role\" aria-label=\"4 使用 ansible galaxy 初始化 role permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Ansible 里面有一个很重要的概念叫做 role：一个 role 完成一个特定的任务，比如安装 docker、比如安装 nginx，之所以这么拆分当然是为了更好的重用：有些 role 是很多机器都需要的，细粒度的 role 就可以很好的组合在一起使用。比如在安装 kubernetes 集群时所有的机器都需要事先安装 docker，给所有的机器都添加 docker 的 role 即可。</p>\n<p>ansible 有一个 galaxy 有点像是 ansible 版的 github，它一方面提供了 role 的统一格式，另一方面提供了一个放置通用 role 的平台，方便大家去那里直接下载自己所需要的 role。</p>\n<p><code>ansible-galaxy</code> 提供了命令用来创建一个官方的 <code>role</code> 项目：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ansible-galaxy init <span class=\"token punctuation\">[</span>your role name<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"5-用-ansible-galaxy-获取所有的依赖\" style=\"position:relative;\">5. 用 ansible galaxy 获取所有的依赖<a href=\"#5-%E7%94%A8-ansible-galaxy-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%9A%84%E4%BE%9D%E8%B5%96\" aria-label=\"5 用 ansible galaxy 获取所有的依赖 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前文提到 role 可以被复用。那么这里就是其复用的方法了。首先准备一个 <code>roles.yml</code> 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/xxx.git\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/xxx.git</code></pre></div>\n<p>其中每一项是需要使用的 <code>role</code> 的 git 地址。</p>\n<p>然后执行以下命令就可以将指定的 roles 下载到 <code>roles</code> 文件夹下使用了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ansible-galaxy <span class=\"token function\">install</span> -r roles.yml -p roles --force</code></pre></div>\n<h2 id=\"6-提供额外的参数\" style=\"position:relative;\">6. 提供额外的参数<a href=\"#6-%E6%8F%90%E4%BE%9B%E9%A2%9D%E5%A4%96%E7%9A%84%E5%8F%82%E6%95%B0\" aria-label=\"6 提供额外的参数 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>一些重要的变量是不能保存在 <code>ansible role</code> 脚本里面的，需要在运行的时候传入。这种场景下 <code>--extra-vars</code> 参数就登场了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ansible-playbook --extra-vars<span class=\"token operator\">=</span><span class=\"token string\">\"@extravars.json\"</span> <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>其中 <code>extravars.json</code> 是一个 <code>json</code> 文件，通过 <code>@</code> 符号就可以传入。</p>\n<h2 id=\"7-ad-hoc-command\" style=\"position:relative;\">7. Ad-hoc command<a href=\"#7-ad-hoc-command\" aria-label=\"7 ad hoc command permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>有的时候发现原有的 ansible playbook 有瑕疵需要重新更改参数什么的，这个时候如果更新了 ansible playbook 再重新跑一遍实在不方便。这个时候就需要这种 ad-hoc command。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ansible cpu-worker -i inventory -m copy -a <span class=\"token string\">'src=/etc/hosts dest=/tmp/hosts'</span> -u ubuntu --private-key<span class=\"token operator\">=</span>xxx</code></pre></div>\n<p>如上所示，和 <code>ansible-playbook</code> 一致 <code>-i</code> 后面是 inventory，<code>-u</code> 后面是 username，然后具体使用的 module 在 <code>-m</code> 后面提供，额外的参数用 <code>-a</code> 后面提供。</p>","fields":{"slug_without_date":"/ansible-tips"}},{"id":"332bf004-f231-5d09-a181-b3893e304efc","frontmatter":{"title":"用 husky 和 prettier 保证团队代码格式一致性","date":"2018 February-28"},"html":"<p>好久没有写博客，久到在刚想到写一篇博客的时候要打开哪个编辑器都楞了一下。今天介绍一下两个小工具 <code>husky</code>（对，哈士奇，2哈）和 <code>prettier</code>。我认为他们的出现减轻了软件开发流程中一些痛点。</p>\n<h2 id=\"husky-为-git-commit-增加钩子\" style=\"position:relative;\">husky 为 git commit 增加钩子<a href=\"#husky-%E4%B8%BA-git-commit-%E5%A2%9E%E5%8A%A0%E9%92%A9%E5%AD%90\" aria-label=\"husky 为 git commit 增加钩子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在之前的工作中，我们尝试通过在 git 的 <code>pre-receive</code> 阶段嵌入一系列的 ci 流程处理代码以提供给开发者们 \"just push\" 的开发流程（当然这个想法是完完全全源自  heroku 的）。这个流程将原先的 \"push -> wait for verify -> new correct commit -> repush\" 的流程转变为 \"push -> fail -> correct -> repush\"：如果没有在 \"pre-receive\" 阶段设置门禁的话，坏的提交会被同步到中心仓库后在进行检测；而设置门禁之后坏的 commit 会被拒绝在本地，本地只能将 ci 可以通过的代码提交到中心仓库。但是将所有东西都通过 push 验证很显然是慢了一些：这就像表单的前端验证和后端验证一样，虽然后端验证永远必不可少但是它增加了服务器的负担并且延长了反馈周期。</p>\n<p>这时候 <code>husky</code> 就要派上用场了。<code>husky</code> 其实就是一个为 <code>git</code> 客户端增加 hook 的工具。将其安装到所在仓库的过程中它会自动在 <code>.git/</code> 目录下增加相应的钩子实现在 <code>pre-commit</code> 阶段就执行一系列流程保证每一个 commit 的正确性。部分在 cd <code>commit stage</code> 执行的命令可以挪动到本地执行，比如 lint 检查、比如单元测试。当然，<code>pre-commit</code> 阶段执行的命令当然要保证其速度不要太慢，每次 commit 都等很久也不是什么好的体验。</p>\n<h2 id=\"prettier-保证每个团队代码格式一致性\" style=\"position:relative;\">prettier 保证每个团队代码格式一致性<a href=\"#prettier-%E4%BF%9D%E8%AF%81%E6%AF%8F%E4%B8%AA%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7\" aria-label=\"prettier 保证每个团队代码格式一致性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>多少年来开发者在使用 tab 还是 space 的问题上真是花费了不少的时间，美剧硅谷里主角还因为 tab 和别人闹了一集，可见大家对代码格式化的重视程度-_-。记得我在上一个项目里看到有小哥把我的代码强行刷成他满意的格式的 commit 也非常不满。仅仅修改格式的 commit 是毫无必要的，它没有对软件本身的行为做任何的修改，而夹带了修改格式的 commit 更是令人抓狂的，给 review 的同学也带来了不小的负担（在一坨提交里仔仔细细看了半天发现神马也没变！！尼玛！！）。</p>\n<p><code>golang</code> 取了个巧，语言自带官方格式，你们终于不吵了吧。虽然会有时候看 <code>golang</code> 的格式化结果略微有点麻烦（就是 struct 对 json type 的制表符对齐的要求），但是也没有哪里是让人无法忍受的丑。如果其他的语言也以类似的方式制定一个官方格式是不是就会将此事平息下去呢。当然，我们可以在制定这个官方格式的时候吵架，只要官方格式不会三天两头的更新那在实际项目中为这种不必要的分歧导致浪费大把时间了。</p>\n<p>在我看来 <code>prettier</code> 就是这么一个 \"类官方格式\" 了。不过目前它还只是支持 <code>js</code> 体系下的格式化，其他语言由于这样那样的问题还要再等等。</p>\n<p>大家对有个公认的格式这件事还是非常认可的，项目出现一年，Github star 破 2.1w，并且像 facebook 这样的大公司已经在内部逐渐铺开使用了。</p>\n<h2 id=\"集成\" style=\"position:relative;\">集成<a href=\"#%E9%9B%86%E6%88%90\" aria-label=\"集成 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>最后，通过 husky 为 <code>prettier</code> 在 <code>pre-commit</code> 加个钩子，这体验就更完美了：不论你家的格式是什么样子，只要你想提交，就必须格式化成 <code>prettier</code> 要求的样子，这样就没有那种因为格式变动出现的无聊的 <code>diff</code> 了。集成的流程基本是以下这个样子：</p>\n<ol>\n<li>\n<p>添加 prettier 依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> prettier --dev --exact</code></pre></div>\n</li>\n<li>\n<p>测试格式化是否工作</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> prettier -- --write src/index.js</code></pre></div>\n</li>\n<li>\n<p>在 commit 时执行 prettier</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> pretty-quick husky --dev</code></pre></div>\n<p>修改  <code>package.json</code> 添加 pre-commit 钩子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pretty-quick --staged\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>其实官方文档也有，但是官方文档可耻的写错了...第二步命令少了 <code>--</code> 的命令。</p>\n<p>最后的最后，放一段 <code>prettier</code> 格式化的 <code>react</code> 代码，我还是对其默认的格式非常满意的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Badges</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> loadBadges <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loadBadges</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> badges <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>已经获得的成就<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>Row\n          gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">16</span><span class=\"token punctuation\">}</span>\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"flex\"</span>\n          justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span>\n          align<span class=\"token operator\">=</span><span class=\"token string\">\"top\"</span>\n          style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"20px\"</span><span class=\"token punctuation\">,</span> paddingBottom<span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>badges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">badge</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Col\n              lg<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n              md<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n              sm<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span>\n              xs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span>\n              style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">\"1em\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>badge<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>ProjectBadge badge<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>badge<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://github.com/typicode/husky\">Husky</a></li>\n<li><a href=\"https://medium.com/@bartwijnants/using-prettier-and-husky-to-make-your-commits-save-2960f55cd351\">Using Prettier and husky to make your commits safe.</a></li>\n<li><a href=\"https://git-scm.com/docs/githooks\">git-hooks</a></li>\n<li><a href=\"https://www.informit.com/articles/article.aspx?p=1621865&#x26;seqNum=4\">The Commit Stage</a></li>\n<li><a href=\"https://golang.org/cmd/gofmt/\">Formats Go programs</a></li>\n</ol>","fields":{"slug_without_date":"/husky-and-prettier"}},{"id":"2ebe54fe-865b-521a-95c6-4823c6bdb0c6","frontmatter":{"title":" 在 react 项目中引入全局变量","date":"2017 December-21"},"html":"<p>虽然全局变量是一个不好的实践，但是很多时候处于方便性的考虑，还是在某些场景需要使用。这里就讲解一下在 react + webpack 场景下如何不提前引入就可以到处使用的全局变量的一个好的方案。</p>\n<h2 id=\"方法一：浏览器全局变量\" style=\"position:relative;\">方法一：浏览器全局变量<a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\" aria-label=\"方法一：浏览器全局变量 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，其实对于前端应用原本是跑在浏览器里的，我们自然会想到用 <code>window.global_var</code> 的方式去定义全局变量。但是这种方式有一个问题：如果我们有自己的一些组件展示视图（比如 storybook）以及一些组件测试的话，仅仅在 <code>index.js</code> 定义的这种全局变量需要在每一个展示体系下都去定义，而这些体系可未必有 <code>window</code>。</p>\n<h2 id=\"方法二：webpack-provideplugin\" style=\"position:relative;\">方法二：webpack ProvidePlugin<a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9Awebpack-provideplugin\" aria-label=\"方法二：webpack provideplugin permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>第二种方法是采用 webpack 的 <code>ProvidePlugin</code> 让 webpack 打包时自动发现关键的全局变量并自动的引入。它是一种隐性的全局变量。代码如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      Config<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../src/utils/Config'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExtractTextPlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ProvidePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      Config<span class=\"token operator\">:</span> <span class=\"token string\">\"Config\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>首先通过 <code>resolve.alias</code> 为一个引入定义一个 shortcut。</li>\n<li>然后在 <code>plugins</code> 中通过 <code>webpack.ProvidePlugin</code> 定义相应的变量即可</li>\n</ol>\n<p><em>注意</em>，这里 <code>resolve.alias</code> 引入不支持 <code>export default</code> 的语法，只支持 <code>export</code>  以及 <code>module.exports</code> 的写法。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://doc.webpack-china.org/configuration/resolve/#resolve\">解析(Resolve)</a></li>\n<li><a href=\"https://doc.webpack-china.org/plugins/provide-plugin/#src/components/Sidebar/Sidebar.jsx\">ProvidePlugin</a></li>\n</ol>","fields":{"slug_without_date":"/global-var-in-react"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":10,"pageCount":37}}},"pageContext":{"limit":3,"skip":27}},"staticQueryHashes":[]}