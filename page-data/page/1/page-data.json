{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/1",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"1dd46bc1-353d-5a52-95f6-1572d359a34e","frontmatter":{"title":"vim 里自动更新 markdown 格式","date":"2022 January-22"},"html":"<h2 id=\"问题\" style=\"position:relative;\">问题<a href=\"#%E9%97%AE%E9%A2%98\" aria-label=\"问题 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>写 blog 的时候经常需要做中英文混排，然后这个混排为了美观需要在中和英文之间添加空格。现在形成习惯了，看到别人没有在中英文混排里添加空格都觉得有点难受。不过之前这个格式要求都靠自己敲空格敲出来的，感觉效率有点低下，恰巧发现了 <a href=\"https://github.com/huacnlee/autocorrect\">autocorrect</a> 这个工具，可以实现这个功能，这里尝试把它和我写 blog 用的 neovim 集成下实现自动格式化的功能。</p>\n<h2 id=\"思路\" style=\"position:relative;\">思路<a href=\"#%E6%80%9D%E8%B7%AF\" aria-label=\"思路 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先 <code>autocorrect</code> 本身已经是一个二进制文件了，通过如下命令可以实现对文件的处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ autocorrect --fix <span class=\"token operator\">&lt;</span>filepath<span class=\"token operator\">></span></code></pre></div>\n<p>因为 vim 有一些插件可以实现在保存的时候对文件进行格式化而 autocorrect 的处理也可以认为是一种格式化因此思路就很一致了。不过相较于很多格式化工具可以以文本内容的方式传递，autocorrect 只能对文件做修改，流程上会稍微有一点区别。这里我列一下集成思路：</p>\n<ol>\n<li>确定内容更新的时机，由于 autocorrect 只能对文件做处理（而不是传递一段文本）因此必须要在文件更新后再次执行该命令对文件做二次刷新，vim 有一个 <code>autocmd</code> 的命令，可以某些重要的事件发生时（或者发生前后）执行一系列命令，这里就需要监听 <code>BufWritePost</code> 即当 Buf 写成功后执行一个命令</li>\n<li>文件被 autocorrect 更新后需要重新读取，否则当前看到的内容就不是已经做过格式化的内容了，vim 中通过命令 edit 可以将文件重新读取，redraw 命令则可刷新视图</li>\n<li>目前只考虑对 markdown 文件做上述处理，需要首先判别文件类别，只有符合的类别才能做上述处理</li>\n</ol>\n<h2 id=\"具体实现方式\" style=\"position:relative;\">具体实现方式<a href=\"#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\" aria-label=\"具体实现方式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>我使用的是 neovim 这里就按照它的配置结果做了实现，vim 的实现也是类似的，只是具体的目录结构会有略微区别而已。</p>\n<p><a href=\"https://github.com/aisensiy/dotfiles/blob/master/nvim/after/ftplugin/markdown.vim\"><code>.config/nvim/after/ftplugin/markdown.vim</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">function</span><span class=\"token operator\">!</span> <span class=\"token function\">MarkdownFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">silent</span> <span class=\"token operator\">!</span>autocorrect <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token keyword\">fix</span> <span class=\"token string\">'%:p'</span> <span class=\"token comment\">\"3</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">view</span> <span class=\"token operator\">=</span> <span class=\"token function\">winsaveview</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">\"4 </span>\n  <span class=\"token keyword\">silent</span> <span class=\"token keyword\">edit</span>                     <span class=\"token comment\">\"5</span>\n  <span class=\"token keyword\">call</span> <span class=\"token function\">winrestview</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">view</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">redraw</span><span class=\"token operator\">!</span>                         <span class=\"token comment\">\"6</span>\n<span class=\"token keyword\">endfunction</span>\n\naugroup markdownFormat            <span class=\"token comment\">\"1</span>\n  <span class=\"token builtin\">autocmd</span><span class=\"token operator\">!</span>                        <span class=\"token comment\">\"2</span>\n  <span class=\"token builtin\">autocmd</span> BufWritePost <span class=\"token operator\">*</span> <span class=\"token keyword\">if</span> &amp;<span class=\"token keyword\">filetype</span> <span class=\"token operator\">==#</span> <span class=\"token string\">'markdown'</span> | <span class=\"token keyword\">call</span> <span class=\"token function\">MarkdownFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> | <span class=\"token keyword\">endif</span> <span class=\"token comment\">\"7</span>\naugroup END</code></pre></div>\n<p>具体做一些解释：</p>\n<ol>\n<li><code>augroup</code> 相当于设置命名空间保证这个 autocmd 不影响其他的 autocmd</li>\n<li><code>autocmd!</code> 是清理当前 <code>augroup</code> 下的所有 <code>autocmd</code> 没有这命令会发现不知不觉每次保存的时候 autocorrect 会执行多次，具体什么原因我尚不清楚，毕这也是我第一次折腾这些命令，后续如果有更多了解会做更多记录</li>\n<li><code>slient !autocorrent --fix '%:p'</code>\n<ol>\n<li>执行外部的命令要加 <code>!</code></li>\n<li>添加 <code>slient</code> 是为了不要展示其执行的结果，我们只关心它执行了，不想看到它的返回内容</li>\n<li><code>'%:p'</code> 就是当前文件的绝对路径</li>\n</ol>\n</li>\n<li><code>winsaveview</code> 是保当前视图的一些信息，并且在重新加载文件后恢复，为的是不要让正在编辑的文件的视图位置、光标位置发生跳动提升体验</li>\n<li><code>slient edit</code> 是重新加载文件</li>\n<li><code>redraw!</code> 是刷当前视图</li>\n<li><code>if &#x26;filetype ==# 'markdown'</code> 是判断当前文件格式是否为 markdown 只有是 markdown 的时候才这行这个 autocmd</li>\n</ol>\n<h2 id=\"效果\" style=\"position:relative;\">效果<a href=\"#%E6%95%88%E6%9E%9C\" aria-label=\"效果 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>\n\t\t<video\n\t\t\tsrc=/videos/vim-autocorrect-integration.mp4\n\t\t\twidth=\"1200\"\n\t\t\theight=\"auto\"\n\t\t\tpreload=\"auto\"\n\t\t\tmuted=\"false\"\n\t\t\ttitle=\"/videos/vim-autocorrect-integration.mp4\"\n\t\t\t\n\t\t\tplaysinline\n\t\t\tcontrols\n\t\t\t\n\t\t></video>\n\t</p>","fields":{"slug_without_date":"/auto-update-content-in-markdown"}},{"id":"ab7349fa-d565-51c5-8f7f-0890065a2f93","frontmatter":{"title":"处理 k8s 证书过期","date":"2022 January-18"},"html":"<h2 id=\"简单记录\" style=\"position:relative;\">简单记录<a href=\"#%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95\" aria-label=\"简单记录 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>k8s 为了鼓励大家更新，其 kubeadm 默认的证书有效期为 1 年，任何 k8s 版本的更新都会触发证书的更新。如果证书过期了可以按照如下方式处理：</p>\n<ol>\n<li>如果发现自己本地 kubectl 无法访问集群并报错就很有可能是证书过期了，登陆任意一台 master 执行命令 <code>kubeadm certs check-expiration</code> 可以查看证书的有效期，如果报错没有命令 <code>certs</code> 那么可以尝试命令 <code>kubeadm alpha certs ...</code></li>\n<li>过期后可以用命令 <code>kubeadm certs renew all</code> 更新所有证书</li>\n<li>更新后需要将 <code>/etc/kubernetes/manifests/</code> 挪走，比如重命名为 <code>manifests.1</code> 20 秒以上，等待 static pod 全部都关闭了，然后重命名回来，这个步骤就是强迫所有的 static pod 重启，<a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#manual-certificate-renewal\">官网文档</a> 就是这么建议操作的</li>\n<li>如果是 HA 高可用模式，那么需要将每一台 master 都这么操作一下</li>\n<li>将新的 <code>/etc/kubernetes/admin.conf</code> 拷贝到自己的电脑，并将其其中的 api-server 的访问地址修改成从自己电脑可以访问的地址即可，然后具体的管理可以参考 <a href=\"/kubeconfig-management\">维护一大堆 kubeconfig 的一些实践</a></li>\n</ol>\n<h2 id=\"更好的办法\" style=\"position:relative;\">更好的办法<a href=\"#%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%8A%9E%E6%B3%95\" aria-label=\"更好的办法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>这样做现在并不是最好的方法，目前可以改进的方式有如下几个：</p>\n<ol>\n<li>按照官方推荐，更频繁的升级 k8s 避免自己的集群版本掉队到无法维护，这应该是最好的方法，当然听起来成本也高一些</li>\n<li>简单粗暴，修改对应版本的 kubeadm 源码，将 renew 时间改成什么 100 年之类的，然后用这个编译的版本去 renew 就是 100 年有效期了</li>\n<li><a href=\"https://github.com/fanux/sealos\">https://github.com/fanux/sealos</a> <strong>可能是不错的方案，具体还没看</strong></li>\n</ol>\n<h2 id=\"资料\" style=\"position:relative;\">资料<a href=\"#%E8%B5%84%E6%96%99\" aria-label=\"资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/\">Certificate Management with kubeadm</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1650657\">kubeadm 集群修改证书时间到 99 年</a></li>\n</ol>","fields":{"slug_without_date":"/kubernetes-certs-renew"}},{"id":"3e518264-2cde-5b53-bd2c-cff578eb64da","frontmatter":{"title":"使用 ansible 为 ubuntu 设置代理","date":"2021 December-30"},"html":"<p>最近为一些藏在防火墙里的存储节点做 provision 由于是非常受限的外网访问，必须要通过代理访问网络，因此需要对原来的 ansible 脚本做修改，这里做一个记录。</p>\n<p>看了看 ansible 里面的内容以及后续的 k8s 的流程，无非是如下几个方面需要访问外网：</p>\n<ol>\n<li>curl 一些 github 上的一些公钥</li>\n<li>apt install</li>\n<li>k8s 拉镜像</li>\n</ol>\n<p>那么，对应的就是以下三个方面的代理配置：</p>\n<ol>\n<li>http_proxy / https_proxy 环境变量配置</li>\n<li>apt 不走环境变量的代理，需要单独配置下</li>\n<li>我这里依然使用的 docker 拉镜像的时候也要做独立的配置，不过在一篇 <a href=\"/docker-accelerate\">旧文- 国内环境下更好的 docker 镜像获取</a> 已经介绍过了</li>\n</ol>\n<h2 id=\"设置全局环境变量\" style=\"position:relative;\">设置全局环境变量<a href=\"#%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\" aria-label=\"设置全局环境变量 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>根据 ansible 的文档 <a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_environment.html\">Setting remote env</a> ansible 提供了 <code>environment</code> 的关键词，可以在 <code>task</code> <code>play</code> 等不同层级添加环境变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> all\n  <span class=\"token key atrule\">remote_user</span><span class=\"token punctuation\">:</span> root\n\n  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install cobbler\n      <span class=\"token key atrule\">ansible.builtin.package</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cobbler\n        <span class=\"token key atrule\">state</span><span class=\"token punctuation\">:</span> present\n      <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">http_proxy</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//proxy.example.com<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> testing\n\n  <span class=\"token key atrule\">roles</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> php\n     <span class=\"token punctuation\">-</span> nginx\n\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">http_proxy</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//proxy.example.com<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></code></pre></div>\n<p>当然，我们这里就没什么外网，那自然就走一个全局的。</p>\n<h2 id=\"添加-apt-的-proxy-配置\" style=\"position:relative;\">添加 apt 的 proxy 配置<a href=\"#%E6%B7%BB%E5%8A%A0-apt-%E7%9A%84-proxy-%E9%85%8D%E7%BD%AE\" aria-label=\"添加 apt 的 proxy 配置 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>apt 的 proxy 需要放到 <code>/etc/apt/apt.conf.d</code> 下，格式如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Acuire::http { Proxy \"http://proxy:1234\" }\nAcuire::https { Proxy \"http://proxy:1234\" }</code></pre></div>\n<p>写成一个 ansible task 就是下面这个样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> add proxy for apt\n  <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dest</span><span class=\"token punctuation\">:</span> /etc/apt/apt.conf.d/02proxy\n    <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      Acquire::http { Proxy \"{{ http_proxy }}\" }\n      Acquire::https { Proxy \"{{ https_proxy }}\" }</span></code></pre></div>\n<p>其中 <code>http_proxy</code> 和 <code>https_proxy</code> 抽出来做为变量后面填写进来。</p>\n<h2 id=\"添加-docker-的-proxy\" style=\"position:relative;\">添加 docker 的 proxy<a href=\"#%E6%B7%BB%E5%8A%A0-docker-%E7%9A%84-proxy\" aria-label=\"添加 docker 的 proxy permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在上面提到的旧闻中讲过了，启动 docker 的时候需要配置环境变量，放到 systemd 的配置 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Service]\nEnvironment=\"HTTP_PROXY=http://proxy:1234\"\nEnvironment=\"HTTPS_PROXY=http://proxy:1234\"</code></pre></div>\n<p>然后需要执行命令 <code>systemctl daemon-reload</code>。</p>\n<h2 id=\"放在一起\" style=\"position:relative;\">放在一起<a href=\"#%E6%94%BE%E5%9C%A8%E4%B8%80%E8%B5%B7\" aria-label=\"放在一起 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>放在一起差不多就是这个样子：</p>\n<p><code>roles/proxy/tasks/main.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dest</span><span class=\"token punctuation\">:</span> /etc/systemd/system/docker.service.d\n    <span class=\"token key atrule\">state</span><span class=\"token punctuation\">:</span> directory\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> add docker proxy settings\n  <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">directory_mode</span><span class=\"token punctuation\">:</span> yes\n    <span class=\"token key atrule\">dest</span><span class=\"token punctuation\">:</span> /etc/systemd/system/docker.service.d/http<span class=\"token punctuation\">-</span>proxy.conf\n    <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      [Service]\n      Environment=\"HTTP_PROXY={{ http_proxy }}\"\n      Environment=\"HTTPS_PROXY={{ https_proxy }}\"</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> reload docker\n  <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> docker\n    <span class=\"token key atrule\">state</span><span class=\"token punctuation\">:</span> restarted\n    <span class=\"token key atrule\">daemon_reload</span><span class=\"token punctuation\">:</span> yes\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> add proxy for apt\n  <span class=\"token key atrule\">copy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dest</span><span class=\"token punctuation\">:</span> /etc/apt/apt.conf.d/02proxy\n    <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n      Acquire::http { Proxy \"{{ http_proxy }}\" }\n      Acquire::https { Proxy \"{{ https_proxy }}\" }</span></code></pre></div>\n<p><code>entry.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> nodes\n  <span class=\"token key atrule\">vars</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">http_proxy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://proxy:7890\"</span>\n    <span class=\"token key atrule\">https_proxy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://proxy:7890\"</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">http_proxy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://proxy:7890\"</span>\n    <span class=\"token key atrule\">https_proxy</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://proxy:7890\"</span>\n  <span class=\"token key atrule\">roles</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> proxy</code></pre></div>\n<h2 id=\"更好的方案\" style=\"position:relative;\">更好的方案<a href=\"#%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%96%B9%E6%A1%88\" aria-label=\"更好的方案 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>有没有更好的方案？我觉得有，就是用 <a href=\"https://github.com/xjasonlyu/tun2socks/\">tun2socks</a> 的方案，可以实现以上三个方面的代理设置。不过还没很仔细的折腾，等搞定了再做记录。</p>","fields":{"slug_without_date":"/proxy-setup-for-ubuntu-with-ansible"}}],"pageInfo":{"hasPreviousPage":false,"currentPage":1,"pageCount":41}}},"pageContext":{"limit":3,"skip":0}},
    "staticQueryHashes": []}