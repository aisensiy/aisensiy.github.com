{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/33",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"7b9e1037-6ace-5c2b-b5e3-873b0648a349","frontmatter":{"title":"用 CSS3 transition 替代 jQuery animation","date":"2012 July-21"},"html":"<p>css3 的 transition 真的是个非常好用的东西，但是之前一直有一个疑惑就是比如我让一个元素通过修改<code>opacity</code>作出渐隐的效果，但是opacity变化成为0了之后要怎么办？我需要一个callback把它从dom中删除，但是css哪里来的callback。一直都有这么一个疑惑，但是自己从来没有去用心的解决过这个问题，于是这个想法就一直搁置在那里[1]。</p>\n<p>最近实习遇到一下工作就是作一个photo的弹出展示的功能，功能类似于<a href=\"https://fancybox.net/\">lightbox</a>。但是由于项目的需求，不能添加非常庞大的额外的类库，需要手写个简化版本。在完成了基本的功能之后，我想要给这个控件添加一个<code>fadeIn</code> <code>fadeOut</code>的效果。按照通常的情景，我就直接上jQuery了，但是这次不行，要自己去作[2]。于是我就想到了用css作这个工作了，这样是最简单的办法了。</p>\n<p>查了一下资料，其实还是挺好实现的。<a href=\"https://www.greywyvern.com/?post=337#\">https://www.greywyvern.com/?post=337#</a>对这个技术有非常详细的讲解[3]。我就把主要的东西再讲解一下吧。</p>\n<p>首先上代码</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/*part one*/</span>\n<span class=\"token selector\">#image-box, #image-mask</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span>\n    opacity 0.3s 0<span class=\"token punctuation\">,</span>\n    visibility 0 0.3s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#image-box.active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#image-mask.active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*part two*/</span>\n<span class=\"token selector\">#image-box.active,\n#image-mask.active</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> visible<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transition-delay</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>part one 中，定义了元素的<code>transition</code>以及最终的<code>opacity</code>样式。这里有两个关键点:</p>\n<ul>\n<li>不使用<code>display</code>而是采用<code>visibility</code>。<code>visibility</code>为<code>hidden</code>时是对事件透明的。</li>\n<li>想要的callback是通过对<code>transition</code>设置<code>delay</code>实现的。</li>\n</ul>\n<p>part two 中，通过修改<code>delay</code>的时间实现了visibility在active时立即显示的效果。那么，这里我们可以看到，实现这样的动作需要加标志 active。\n最后，上<a href=\"https://3.jsbin.com/igeyid/11\">demo</a>[4]。</p>\n<p>其实有了[3]所说的东西，其实不需要我在这里累述的。但是其实我是来写感言的，以下才是本文的主题。</p>\n<p>[1] 很多想法本身的优先级就不高，低的低于看动漫，上点评。所以几乎不会去作的。那么，需要一些机会或者是工具来帮助自己去实现这些看似优先级不高，但是积累[5]起来是非常有意义的东西。</p>\n<p>[2] 实习就是一个非常不错的给自己提供机会的方式，任务驱动确实可以让自己去有很多机会作新的尝试的，而更重要的是自己作出这个选择。</p>\n<p>[4] 利用更好的工具也是一个让自己更快的去做的好办法。jsbin可以让自己用更快的速度去进行核心功能的开发而不需要关心其他琐碎的建立html template，繁琐的打开浏览器不断的F5。而且，目前的jsbin已经提供了less以及各种js类库的添加，这些都已经大大的节省了程序员的时间。</p>\n<p>[5] \"积累\"是个很难完成的任务，它需要持之以恒，需要持续的迭代。所有的想法以及不错的技术都应该用一种便于检索的形式保留下来，以便自己之后可以更快的索取。</p>\n<p>那么，之后我可能会去写一篇有关知识管理，时间管理以及项目控制的东西，来更好的给自己的发展提供一些指导意见。</p>","fields":{"slug_without_date":"/e794a8-css3-transition-e69bbfe4bba3-jquery-animation"}},{"id":"85ba4504-b8dc-555a-9066-8582d89655a2","frontmatter":{"title":"最近写 chrome extension 的一些心得","date":"2012 June-10"},"html":"<p>有幸找到一个可以专门写 chrome extension 的工作，非常开心，可以专心的写 chrome extension 了。看了一些别人的 chrome extension 自己也有了一些新的体会，写在这里，留个未来的自己。</p>\n<p>最近在做的这个扩展是 <a href=\"https://mei.fm\">mei.fm</a> 的一键收藏扩展。整体来说，这个扩展的功能并不是非常复杂。但是，再简单也是有一定工作量的。而且，程序是为变化而生的，最初的架构体系做的比较顺手对以后的工作也是有好处的。</p>\n<h2 id=\"调研\" style=\"position:relative;\">调研<a href=\"#%E8%B0%83%E7%A0%94\" aria-label=\"调研 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，我做了一些调研的工作。重点查看了 evernote clipper 以及 pocket 两个类似的产品。看了他们之后才知道做一个这样的插件没有表象那么简单。尤其是读了 pocket extension 的源码确实是给我了不少的启发。</p>\n<p>pocket 里面有一个很不错的结构就是让 background page 作为处理事务的中枢。让 content page 以及 popup 的所有请求利用 chrome extension 所提供的 sendRequest 的 api 发送给 background 去处理，然后 bg 将处理的结果以 callback 的形式发送回去。</p>\n<blockquote>\n</blockquote>\n<p>chrome.extension.sendRequest(string extensionId, any request, function responseCallback)</p>\n<p>chrome.extension.onRequest.addListener(function(any request, MessageSender sender, function sendResponse) {...});</p>\n<p>详见<a href=\"https://code.google.com/chrome/extensions/tabs.html\">https://code.google.com/chrome/extensions/tabs.html</a> 以及 <a href=\"https://code.google.com/chrome/extensions/extension.html\">https://code.google.com/chrome/extensions/extension.html</a></p>\n<p>这样做的好处就是可以更好的组织自己的代码，让 content page 以及 popup 去专注于页面的展示，而把逻辑以及ajax的东西集中在bg去做。比如，在pocket中会用到一个content script 用来显示保存的状态。它每次动作对bg发送请求，让bg把链接保存到pocket，然后它根据bg返回的信息，进行相应的信息提示的工作。</p>\n<blockquote>\n<p>图丢了</p>\n</blockquote>\n<h2 id=\"实践\" style=\"position:relative;\">实践<a href=\"#%E5%AE%9E%E8%B7%B5\" aria-label=\"实践 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"代码的组织\" style=\"position:relative;\">代码的组织<a href=\"#%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%84%E7%BB%87\" aria-label=\"代码的组织 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我很仔细的看了 pocket 的代码组织并非常的认同它的组织方式，那么我就直接采取了它的结构。把与 mei.fm 请求相关的方法单独做一个命名空间，api。然后所有其他页面的逻辑请求都通过 sendRequest 的方式发送给 bg.js 来处理。但是，chrome extension 的 onRequest 监听器不监听自己页面的 request 事件，那么我只好对 bg 页面的处理单独做了处理（这个很让人伤心）。</p>\n<h3 id=\"面对频繁改变的-api-接口的办法\" style=\"position:relative;\">面对频繁改变的 api 接口的办法<a href=\"#%E9%9D%A2%E5%AF%B9%E9%A2%91%E7%B9%81%E6%94%B9%E5%8F%98%E7%9A%84-api-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8A%9E%E6%B3%95\" aria-label=\"面对频繁改变的 api 接口的办法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>其实我觉得既然已经做到了 chrome extension 的地步了，那么其提供的 api 应当是比较稳定的了。但是，很遗憾，不是这样。甚至是在我把插件做完的时候，有些 api 还是处于无法使用的状态。那么，我自己需要一个模拟 api 的机制了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"requestId\":\"url68a1-9\",\"providerId\":\"solrs-0.1\",\"object\":\"url\",\"errCode\":0,\"dice\":0,\"items\":[{\"id\":\"5c9ccc75421a2acbffa982f5fd123134\",\"score\":0.92352885,\"provider\":\"solrs-0.1\",\"detail\":{\"best_title\":\"皇马拜仁裁判确定：欧冠奥运决赛主裁 吹拜仁漏3点球\",\"url\":\"http://sports.sina.com.cn/g/2012-04-24/09206035821.shtml\"}},{\"id\":\"051e0cd0943d490f51cb7be1a502dbb9\",\"score\":0.24958704,\"provider\":\"solrs-0.1\",\"detail\":{\"best_title\":\"视频-2011百大进球TOP20 梅西C罗鲁尼内马尔竞风流\",\"url\":\"http://sports.sina.com.cn/g/video/2011Top100goal/index.shtml\"}}]}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          data <span class=\"token operator\">=</span> <span class=\"token function\">_pre_process</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>success <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>failed <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        url<span class=\"token operator\">:</span> request_url<span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>title<span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span> uid<span class=\"token operator\">:</span> localStorage<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> cnt<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ts<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> app<span class=\"token operator\">:</span> <span class=\"token string\">'mei.fm'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n        dataType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            data <span class=\"token operator\">=</span> <span class=\"token function\">_pre_process</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>success <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>failed <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>failed <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>用 setTimeout 去模拟一个 ajax 请求真是伤不起唉。然后面对返回的数据结构的不确定，我甚至有做个数据结构验证的东西...</p>\n<h3 id=\"不要忘了断网的情况\" style=\"position:relative;\">不要忘了断网的情况<a href=\"#%E4%B8%8D%E8%A6%81%E5%BF%98%E4%BA%86%E6%96%AD%E7%BD%91%E7%9A%84%E6%83%85%E5%86%B5\" aria-label=\"不要忘了断网的情况 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>虽说这是个特殊的情况，但是我还是通过设置 ajax 的 timeout 去做了这个断网的处理，所以调用 jquery 的 api 差不多全部都是 $.ajax 而不是 $.post 或者 $.get。</p>\n<h2 id=\"感想\" style=\"position:relative;\">感想<a href=\"#%E6%84%9F%E6%83%B3\" aria-label=\"感想 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>不管东西是多大多小，想做的完美其实都是要下功夫的。面对频繁的变化，你的代码是否可以让你很容易的扩展，或者是修改功能呢？我自己是不敢保证的。努力去做到这个才能算是不错的设计。我还是需要在这条路上走的更远。</p>\n<p>然后就是单元测试的问题了。代码的修改是不可避免的，尤其是做所谓的重构。但是，目前来看，我很不想去做这个工作。因为我没有想到好的办法去做这个单元测试的工作。如果修改了代码反而让程序跑不起来了确实就让人更揪心了。如何拆分代码，并用更好的办法去测试代码也是个很重要的事情。</p>\n<p>更好的使用 git 有可能很好的减少自己的心理负担。什么时候应该打 tag 怎么撤销自己的一个 commit 怎么去拉一个分支都是我需要做学习的事情。</p>","fields":{"slug_without_date":"/e69c80e8bf91e58699-chrome-extension-e79a84e4b880e4ba9be5bf83e5be97"}},{"id":"a32864f5-87fb-5fcc-9ce3-2bb6d37fc07e","frontmatter":{"title":"POJ 1018","date":"2012 May-15"},"html":"<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;set></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n * http://poj.org/problem?id=1012\n * 思路：\n * 遍历所有可能的带宽，在每种带宽下计算price\n */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Device</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> mi<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> bds<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> prs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> mi<span class=\"token punctuation\">,</span> bw<span class=\"token punctuation\">,</span> pr<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span>\n        set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> bands<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>Device<span class=\"token operator\">></span> device<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cin<span class=\"token operator\">>></span>mi<span class=\"token punctuation\">;</span>\n            Device d<span class=\"token punctuation\">;</span>\n            d<span class=\"token punctuation\">.</span>mi <span class=\"token operator\">=</span> mi<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>mi<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cin<span class=\"token operator\">>></span>bw<span class=\"token operator\">>></span>pr<span class=\"token punctuation\">;</span>\n                bands<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                d<span class=\"token punctuation\">.</span>bds<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>bw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                d<span class=\"token punctuation\">.</span>prs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            device<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">double</span> bp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> finished<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> bands<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> bands<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cur_band <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                finished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> cur_pr <span class=\"token operator\">=</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">!=</span> device<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mi<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bds<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> cur_band <span class=\"token operator\">&amp;&amp;</span> device<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>prs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> cur_pr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        cur_pr <span class=\"token operator\">=</span> device<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>prs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        finished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 如果在某个设备上找不到比 cur_band 更大的设备</span>\n                <span class=\"token comment\">// 说明 cur_band 不能作为最终结果</span>\n                <span class=\"token comment\">// 则不再循环 并采用 bands 中的下一个 band</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>finished<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> sum <span class=\"token operator\">+=</span> cur_pr<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>finished<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">&lt;</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">*</span> cur_band <span class=\"token operator\">/</span> sum<span class=\"token punctuation\">)</span> bp <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">*</span> cur_band <span class=\"token operator\">/</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.3f\\n\"</span><span class=\"token punctuation\">,</span> bp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug_without_date":"/poj-1018"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":33,"pageCount":40}}},"pageContext":{"limit":3,"skip":96}},
    "staticQueryHashes": []}