{"componentChunkName":"component---src-templates-blogs-js","path":"/page/38/","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"5ceefb80-d0e6-581f-af92-75967a3f0dac","frontmatter":{"title":"hash 以及 bloom filter","date":"2013 February-19"},"html":"<p>一直实用 hash 这种结构，原理是知道的，具体的算法也了解，可是学完数据结构之后就差不多再也没有实现过这个数据结构了。借前一阵子接触 bloom filter 的机会在整理一下有关 hash 的内容。</p>\n<p>hash 是将内容编码然后存储在 array 结构中，以便于在 O(1) 复杂度内获取的数据结构。其关键部分在于如何生成一个足够随机的编码以及如何解决冲突。解决冲突虽然有很多方法，但是我觉得链接法应该是最为广泛是实用的方法吧，概念简单，便于接受。至于如何生成 hash 的 哈希函数就是五花八门了。这个应该根据对于冲突的敏感程度以及算法的复杂度综合考虑比较好吧。不过 MD5 应该算是个很不错的算法了，而且是比较通用的。这里我介绍下一个字符串生成哈希的函数，EFLHash。<!-- more --></p>\n<p>google 一下，会发现相关内容还挺多的，在很多的技术博客中都出现了。不过仔细一看会发现大家差不多都是抄来抄去的状态，厚道的会说是转的，不厚道的一字不提。code 直接粘贴估计自己都不知道贴的是什么，一些 code 有错误就都错的一样。这样的技术博客内容即便再多也意义不大，纯粹费电，博客的第一读者是自己，直接 copy 是自欺欺人。</p>\n<p>看了一些哈希函数的写法，大概的意思差不多就是尽量把所有信息都考虑在内以尽量减小相似内容的冲突。比如 'abc' 与 'abd'，如果仅仅考虑前两个字母而不考虑第三个，那么冲突的可能性会大很多。在算法导论中提到对于字符串这样的内容，可以把它看作是一个超大的数字，然后以对数字的方式根据 hash 桶的个数计算其所在的桶。那么 EFLHash 的思想也是类似的。在下面的代码中，我会给予注释表述其思想。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 这就相当于在构造一个 16 进制的大整数，每次加新的数字前进位 */</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 但是一个整型最多就 32 位，如果再往左进位，高位就会丢失。那么，\n           就要考虑把高位的数字与低位的做异或运算保存下来 */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf0000000L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hash <span class=\"token operator\">^=</span> x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 既然高位数字以及放在低位异或了，那么就可以把高位制空 */</span>\n            hash <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* 最后为了返回给有符号整数，把最高位制零，如果你返回的是无符号数，\n       那就忽略这行 */</span>\n    hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7fffffffL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我觉得只要这种思想掌握了，那就不会觉得这种代码很诡异了，可以自己做一些修改，以适应各种场景。</p>\n<p>然后，核心的算法有了，那么基于链接法解决冲突的 hash 数据结构就可以有了。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">39</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf0000000L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hash <span class=\"token operator\">^=</span> x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            hash <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7fffffffL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 这是我们的核心数据结构，其实就是链表的节点 */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> node<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 初始化一个节点，设置字符串为空，next 指针指向 NULL */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    point<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n    point<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 创建一个新的节点并初始化 */</span>\nnode <span class=\"token operator\">*</span><span class=\"token function\">node_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    node <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token function\">hash_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash_delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建一个新的 hash 数据结构，桶的个数为 LEN */</span>\nnode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token function\">hash_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>LEN <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 添加一个新的元素 */</span>\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>current<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 首先检查这个元素是否已经存在了，如果存在就不必再次添加 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> LEN<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 冲突总会有的，要把冲突的情况考虑在内 */</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    tmp <span class=\"token operator\">=</span> <span class=\"token function\">node_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 在 hash 结构中找一个元素是否存在 */</span>\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>current_node<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> LEN<span class=\"token punctuation\">;</span>\n    current_node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>current_node<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> current_node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 删除已有的元素 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash_delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>current_node<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> LEN<span class=\"token punctuation\">;</span>\n    current_node <span class=\"token operator\">=</span> prev <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>current_node<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current_node <span class=\"token operator\">==</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> current_node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        prev <span class=\"token operator\">=</span> current_node<span class=\"token punctuation\">;</span>\n        current_node <span class=\"token operator\">=</span> current_node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 一点点测试 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>test1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>test2 <span class=\"token operator\">=</span> <span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n    node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token function\">hash_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    r <span class=\"token operator\">=</span> <span class=\"token function\">hash_delete</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>hash 结构的操作就是那么结构，添加，查找，删除，如果考虑的再多一点，应该有一个销毁整个结构的函数，这里就不写了。</p>\n<p>在你需要频繁查找某个元素是否在一个集合的时候，hash 是一个比较理想的结构。因为它的理想查找复杂度是 O(1)。但是它有一个问题，就是 hash 内部实际上还是存储了整个数据内容（比如上面的代码里面，依然把字符串保存了下来），那么这就会导致比较大的内存开销。想想一下，如果你的这个集合很大，比如有 1 百万，每个字符串占20个字节，那么你就需要 2O M 空间了，而且，其实 hash 为了避免冲突，不希望桶的个数太接近实际数据的个数。其空间可能会开到 30M 甚至 40M。其实这已经是很大的开销了（我不想举例子说有什么一个亿，来说明这个开销不能承受，我只是觉得应该实际一点，一百万我觉得还是可能有的，比如你做个爬取数据的程序，而你的VPS只有512M内存，你又有其它的程序在跑，你不想因为一个爬虫就把你VPS的内存都吃了）。</p>\n<p>那么，这里 bloom filter 来了。这个数据结构的思想也非常的简单。它想用hash值来代表一个数据，然后只保存这个hash值。我通过hash值就可以判断这个元素到底是有还是没有，那不就省空间了么？ 但是这里问题也很明显：一个hash值很容易出现冲突啊，如果冲突了，那我岂不是很容易误伤其他没有在这个集合的元素？那我可以弄多个哈希函数啊，我弄一个哈希函数冲突的概率比较大，那我弄八个呢？冲突的概率是不是小的几乎可以忽略了呢。这就是 bloom filter 的核心想法：用多个哈希结果代表这个元素存储下来。每次通过检查这些哈希函数的结果判断该元素是否属于这个集合。</p>\n<p>下面大概的描述一下 bloom filter 的具体结构。bloom filter 是一个比较大的，连续的内存空间。假设我的集合有 1000000 个元素，我建立一个 1000000 字节(1M)的空间。把它作为一个一百万位的 0 1 bit 空间，并在初始化的时候全部制零。同时，我准备 8 个可以把元素映射到 0 - 999999 的哈希函数。每来一个新的元素，我用这 8 个哈希函数计算出 8 个哈希值，并把这 8 个哈希值对应的 bit 位制为 1。那么，当判断一个元素是否存在的时候，需要保证这 8 个比特位全部为 1。</p>\n<p>如此一来，我们就不需要保存原始数据了，存储空间由 20M 变成了 1M，还是很划算的。</p>\n<p>我看别人的技术博客也差不多是先看别人的代码，如果代码看懂了就不看大段大段的文字了，下面我依然把自己写的代码贴出来，希望可以避免看到的人再看我写的拙急的文字...</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CHAR_BIT</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WORD_SIZE</span> <span class=\"token expression\"><span class=\"token number\">32</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SETBIT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span>CHAR_BIT<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>CHAR_BIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">GETBIT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span>CHAR_BIT<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>CHAR_BIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hashfunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">bloom</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> char_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>container<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> nearest_bit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> func_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>seeds<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 注意，我这里给的不是一堆hash函数，而已hash函数里面的一个参数 */</span>\n<span class=\"token punctuation\">}</span> Bloom<span class=\"token punctuation\">;</span>\n\nBloom <span class=\"token operator\">*</span><span class=\"token function\">bloom_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> char_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> func_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">bloom_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 生成多个hash值的关键在于传递给这个函数的 k 值的区别。这个方法是算法导论里面的乘法\n   生成 hash 的部分提到的，去那里看比较靠谱，我说不清楚啊 o_o */</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">multi_hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bit_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>WORD_SIZE <span class=\"token operator\">-</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bit_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">nearest_bitsize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf0000000L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hash <span class=\"token operator\">^=</span> x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            hash <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7fffffffL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* >min &lt; max */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">randint_in_range</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">generate_hash_seed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> seed <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>seeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">randint_in_range</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       seed <span class=\"token operator\">=</span> seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> seeds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Bloom <span class=\"token operator\">*</span>bloom <span class=\"token operator\">=</span> <span class=\"token function\">bloom_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bloom_add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">,</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">,</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy1\"</span><span class=\"token punctuation\">,</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBloom <span class=\"token operator\">*</span><span class=\"token function\">bloom_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> char_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> func_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">;</span>\n\n    Bloom <span class=\"token operator\">*</span>bloom <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bloom<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>char_size <span class=\"token operator\">=</span> char_size<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> char_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* set all char to 0 */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> char_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bloom<span class=\"token operator\">-></span>container<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    bit_size <span class=\"token operator\">=</span> char_size <span class=\"token operator\">*</span> CHAR_BIT<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>nearest_bit <span class=\"token operator\">=</span> <span class=\"token function\">nearest_bitsize</span><span class=\"token punctuation\">(</span>bit_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 这里的最大值与最小值也是与生成 hash 函数有关，建议去看算法导论 */</span>\n    max <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>WORD_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    min <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>WORD_SIZE <span class=\"token operator\">-</span> bloom<span class=\"token operator\">-></span>nearest_bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    bloom<span class=\"token operator\">-></span>func_size <span class=\"token operator\">=</span> func_size<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>seeds <span class=\"token operator\">=</span> <span class=\"token function\">generate_hash_seed</span><span class=\"token punctuation\">(</span>func_size<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> bloom<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">bloom_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bit_size <span class=\"token operator\">=</span> bloom<span class=\"token operator\">-></span>char_size <span class=\"token operator\">*</span> CHAR_BIT<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 用这 N 个哈希函数生成哈希值 */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bloom<span class=\"token operator\">-></span>func_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        position <span class=\"token operator\">=</span> <span class=\"token function\">multi_hash</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> bloom<span class=\"token operator\">-></span>nearest_bit<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position: %d\\n\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SETBIT</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>container<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position end\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bit_size <span class=\"token operator\">=</span> bloom<span class=\"token operator\">-></span>char_size <span class=\"token operator\">*</span> CHAR_BIT<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 通过检查这 N 个哈希值来判断元素是否存在 */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bloom<span class=\"token operator\">-></span>func_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        position <span class=\"token operator\">=</span> <span class=\"token function\">multi_hash</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> bloom<span class=\"token operator\">-></span>nearest_bit<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position: %d\\n\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GETBIT</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>container<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position end\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这种算法类的东西，我描述起来很是拙急啊。感觉说的不够明白 o_o。这里给点参考吧。</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/jcwkyl/article/details/4088436\">10个经典的字符串hash函数的C代码实现</a> 这个 EFLHash 应该是有点问题，仔细看～</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Bloom_filter\">Bloom Filter</a></li>\n<li>数学之美，布隆过滤器</li>\n</ul>","fields":{"slug_without_date":"/hash-e4bba5e58f8a-bloom-filter"}},{"id":"62e5e3b0-1f57-51f4-abae-76a80d9a7906","frontmatter":{"title":"CSS 实现的小三角","date":"2013 February-13"},"html":"<p>在家待了快两周了，又进入了半死的状态。来写篇 blog 振奋下精神吧。</p>\n<p>昨天在做一个类似与 weibo 上评论的东西，在点击评论按钮后会显示评论框。而这个评论框在它的右上角会有一个小三角与评论按钮相呼应。</p>\n<p>之前在一本书里面见过，（这本书似乎是台湾人写的，当时觉得它讲的特别相近，不过有些年头了，都忘记它叫什么了，刚才在豆瓣上用 CSS 的关键词找了下，也没找到。），是采用 0 宽度， 0 高度用厚边框挤压出来的三角形。就是说，当对一个 0 空间的元素给予一个很厚的边框的时候，那么四个方向(top left right bottom)的边框会相互挤压，变成三角形！那么，对三个方向的边框给予透明 transparent，而给予另一个方向的边框一个可见色，那三角形就大功告成了！<!-- more --></p>\n<p>代码：<a href=\"https://jsbin.com/opahum/5/edit\">JS Bin</a></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>utf-8</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JS Bin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arrow-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n[/code]\n[code lang=\"css\"]\n.arrow-up {\n  position: relative;\n  left: 95%;\n\n  height: 0;\n  width: 0;\n  border-width: 7px;\n  border-color: transparent;\n  border-style: solid;\n  border-bottom-color: #f1f1f1;\n}\n\n.content {\n  height: 100px;\n  background-color: #f1f1f1;\n}</code></pre></div>\n<p>不过这里有个问题，可以看的出来，在微博里面，人家的那个小三角是有边框的！</p>\n<p>加上边框，就瞎了吧。这里，在 bootstrap popover 的代码来看到了它的神方法：用两个小三角叠加出边框的效果！一个三角为边框颜色，另一个三角为背景颜色覆盖在上面。且第二个三角的位置稍微向下，一方面可以显示出三角形的边框，另一方面可以覆盖三角下面矩形的边框部分。</p>\n<p>代码：<a href=\"https://jsbin.com/opahum/4/edit\">JS Bin</a></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.arrow-up, .arrow-up:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 7px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.arrow-up</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 93%<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">border-bottom-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* border-color */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.arrow-up:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* overlay */</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -7px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -6px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* and show 1px */</span>\n  <span class=\"token property\">border-bottom-color</span><span class=\"token punctuation\">:</span> #f1f1f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* background-color */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f1f1f1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid gray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后附上一个用 CSS 做小三角的网站 <a href=\"https://apps.eky.hk/css-triangle-generator/\">https://apps.eky.hk/css-triangle-generator/</a></p>","fields":{"slug_without_date":"/css-e5ae9ee78eb0e79a84e5b08fe4b889e8a792"}},{"id":"c6c7ad40-2f5b-5cb9-bf52-41c24d94dbbe","frontmatter":{"title":"rails -- factory_girl and faker","date":"2013 January-29"},"html":"<p>昨晚写 high 了，本来想写写 factory_girl 和 faker 这两个 gem，结果一字未提。这里再写一篇好了。</p>\n<p>factory_girl 与 faker 都是在那本在线的 rails tutorials 里面看到的。factory_girl 用于替换 fixtures 而 faker 用于生成各种随机的内容，这两个东西一个提供生成东西的框架，一个提供具体生产出来的内容，一起使用就显得非常合理了。刚刚纠结的在写相关的内容，反复的打开这两个 gem 的 github 页面翻来翻去，翻的好烦，决定总结一下！这里结合 rails tutorials 写一下自己感觉比较实用的内容。<!-- more --></p>\n<p>刚接触 rails 时看到 fixture 这个东西，感觉还是挺体贴的。不过，尽管是可以配合 erb 方式嵌入代码，但依然不够灵活。于是就有人（thoughtbot）做了个写 code 生成 fixture 的东西，叫做 factory_girl。用处和 fixture 是一样的，只是把 yaml 换成了 ruby code。既然，它的名字里面有 factory，那么我就把它认为是用于为每个类生成很多实例的。这里先给第一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">FactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  factory <span class=\"token symbol\">:user</span> <span class=\"token keyword\">do</span>\n    email <span class=\"token string-literal\"><span class=\"token string\">'test@example.com'</span></span>\n    password <span class=\"token string-literal\"><span class=\"token string\">'00000000'</span></span>\n    password_confirmation <span class=\"token string-literal\"><span class=\"token string\">'000000000'</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>这是一个等价于 fixture 的例子，用于生成一个静态的 user 记录。\n不过 factory_girl 很灵活，不像 fixture 直接放进数据库，还可以有其他的方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Returns a User instance that's not saved</span>\nuser <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns a saved User instance</span>\nuser <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns a hash of attributes that can be used to build a User instance</span>\nattrs <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>attributes_for<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns an object with all defined attributes stubbed out</span>\nstub <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>build_stubbed<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>build create attributes_for 都比较容易理解，而最后这个 build_stubbed 就诡异了。我 search 了一下，发现了 thoughtbot 自己写的一篇文章 <a href=\"https://robots.thoughtbot.com/post/22670085288/use-factory-girls-build-stubbed-for-a-faster-test\">Use Factory Girl’s build_stubbed for a Faster Test Suite</a>，文章中提到</p>\n<blockquote>\n<p>build_stubbed is the younger, more hip sibling to build; it instantiates and assigns attributes just like build, but that’s where the similarities end. It makes objects look look like they’ve been persisted, creates associations with the build_stubbed strategy (whereas build still uses create), and stubs out a handful of methods that interact with the database and raises if you call them. This leads to much faster tests and reduces your test dependency on a database.</p>\n</blockquote>\n<p>差不多是说 很多测试的时候，虽然数据保存到了数据库，但是并不会和数据库打交道，你要的内容已经在这个对象里面了。那么，为了加速测试，你其实不用真的把数据写到数据库里面。build_stubbed 假装已经把数据保存到数据库了（伪装的create）。然后你在继续别的测试就行了。当然，既然是假装保存到数据库里面了，那么如果你真的用到保存后的信息，它会报错的。不过到目前为止，我并没有实用过这个方法。</p>\n<p>[update]学到老活到老，写这个的时候居然都不知道 stub 是什么，现在知道了。看了 mocha 就什么都知道了。</p>\n<p>额，刚才我还想写我对于 attributes_for 的实用呢，因为我以为 user model 保存之后，其 password 属性就不复存在了呢，不过刚才我尝试了一下，它依然建在，那么我之前为了得到原有的 password 而实用 attributes_for 就是徒劳的了。这么说来，这个方法就没什么用处了 o_o。因为 factory_girl 支持属性的重写。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">rails g scaffold comment content<span class=\"token symbol\">:text</span> user_id<span class=\"token symbol\">:integer</span> post_id<span class=\"token symbol\">:integer</span>\n\nFactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  factory <span class=\"token symbol\">:comment</span> <span class=\"token keyword\">do</span>\n    content <span class=\"token string-literal\"><span class=\"token string\">'bla bla'</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token variable\">@comment</span> <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>create <span class=\"token symbol\">:comment</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">user_id</span><span class=\"token operator\">:</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token symbol\">post_id</span><span class=\"token operator\">:</span> post_id</code></pre></div>\n<p>我仅仅为 comment 的 content 提供内容，在真正生产 comment 的时候，用重写的方式把 user_id post_id 补全即可。</p>\n<p>到目前为止，factory_girl 差不多只是 fixture 等价功能的加强版，下面就要讲述它作为 工厂 的特性了。同时，有了工厂，就要有材料，Faker 就要登场了。</p>\n<p>在 factory_girl 的 <a href=\"https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md\">readme</a> 中 有一个章节叫做 Lazy Attributes，是说一些属性在对象生成的时候才能定义，而不是用静态的定义。就比如 user，静态的 email 由于需要是唯一的，因此不能用于反复生成。需要我们提供一个方法可以生成不同的 email。那么 sequence 与 generate 就要登场了。</p>\n<p>sequence 与 generate 方法是配合使用的。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Defines a new sequence</span>\nFactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  sequence <span class=\"token symbol\">:email</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"person</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">n</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">@example.com\"</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nFactoryGirl<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># => \"person1@example.com\"</span>\n\nFactoryGirl<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># => \"person2@example.com\"</span></code></pre></div>\n<p>如果用 python 的模式来解释 sequence 像是一个生成器，而 generate 像是一个迭代器，这样配合实用可以生成无限多的 email 了。</p>\n<p>上面的例子是 官方 readme 给出的。而我则把 sequence 与 faker 一起使用，就可每次生成随机的内容了。这部分内容在 rails tutorial 里面也有提及（<a href=\"https://ruby.railstutorial.org/chapters/user-microposts#sec-sample_microposts\">sample microposts</a>）。我的做法比较类似。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">FactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  sequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:random_title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">' '</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n  sequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:random_content</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n    Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>paragraphs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>elem<span class=\"token operator\">|</span> <span class=\"token string-literal\"><span class=\"token string\">\"&lt;p></span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">elem</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">&lt;/p>\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  factory <span class=\"token symbol\">:post</span> <span class=\"token keyword\">do</span>\n    title <span class=\"token punctuation\">{</span> generate <span class=\"token symbol\">:random_title</span> <span class=\"token punctuation\">}</span>\n    content <span class=\"token punctuation\">{</span> generate <span class=\"token symbol\">:random_content</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>faker 确实是个很方便的东西，而且没有什么难度，想要看具体的用法，直接来看 <a href=\"https://faker.rubyforge.org/rdoc/\">docs</a> 就好了。</p>\n<p>最后，我结合这些，做了一个类似于 rails tutorials 里面的 populate task 的东西，用于生成初始数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">namespace <span class=\"token symbol\">:db</span> <span class=\"token keyword\">do</span>\n  desc <span class=\"token string-literal\"><span class=\"token string\">\"Fill database with sample data\"</span></span>\n  task populate<span class=\"token operator\">:</span> <span class=\"token symbol\">:environment</span> <span class=\"token keyword\">do</span>\n    email1 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"normal@gmail.com\"</span></span>\n    email2 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"example@example.com\"</span></span>\n    email3 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"root@gmail.com\"</span></span>\n    email4 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"mod@gmail.com\"</span></span>\n\n    user1 <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email1<span class=\"token punctuation\">)</span>\n    user2 <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email2<span class=\"token punctuation\">)</span>\n    user3 <span class=\"token operator\">=</span> make_admin<span class=\"token punctuation\">(</span>email3<span class=\"token punctuation\">)</span>\n    user4 <span class=\"token operator\">=</span> make_moderator<span class=\"token punctuation\">(</span>email4<span class=\"token punctuation\">)</span>\n\n    <span class=\"token number\">2.</span>times <span class=\"token keyword\">do</span>\n      post <span class=\"token operator\">=</span> make_posts<span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">[</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">,</span> user4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>u<span class=\"token operator\">|</span>\n        FactoryGirl<span class=\"token punctuation\">.</span>create <span class=\"token symbol\">:comment</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">post_id</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token symbol\">user_id</span><span class=\"token operator\">:</span> u<span class=\"token punctuation\">.</span>id\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token number\">2.</span>times <span class=\"token keyword\">do</span>\n      make_posts<span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_user</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    User<span class=\"token punctuation\">.</span>create<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n      <span class=\"token symbol\">email</span><span class=\"token operator\">:</span> email<span class=\"token punctuation\">,</span>\n      <span class=\"token symbol\">password</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"00000000\"</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token symbol\">password_confirmation</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"00000000\"</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_admin</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"admin\"</span></span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n    user\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_moderator</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"moderator\"</span></span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n    user\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_posts</span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    content <span class=\"token operator\">=</span> Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>paragraphs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>item<span class=\"token operator\">|</span> <span class=\"token string-literal\"><span class=\"token string\">\"&lt;p></span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">item</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">&lt;/p>\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span>create<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>sentence<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">content</span><span class=\"token operator\">:</span> content<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>每次需要用命令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:reset &amp;&amp; rake db:populate</code></pre></div>\n<p>而且，前提是 seeds.rb 为空，因为 rake db:reset 重新跑所有的 migration 然后跑 seeds.rb。这让我觉得是不是这些 sample 数据放在 seeds.rb 会更好一些呢？单独的 task 粘和性并不是很好的样子。</p>\n<p>（更新）我已经这么做了，把 populate 这个 task 干掉，把里面的代码稍作修改直接放到 seeds.rb 然后每次\n只需</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:reset</code></pre></div>\n<p>即可。</p>\n<p>最后眼馋 factory_girl 里面 sequence generate 方法，自己写了一个 naive 版本的，挂在这里好了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span>\n  <span class=\"token variable\">@@generators</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">sequence</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>proc<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token symbol\">seq</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token symbol\">proc</span><span class=\"token operator\">:</span> proc\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:seq</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:proc</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:seq</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nFactory<span class=\"token punctuation\">.</span>sequence <span class=\"token symbol\">:email</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"example</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">n</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">@exmple.com\"</span></span>\n<span class=\"token keyword\">end</span>\n\nputs Factory<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># example1@example.com</span>\nputs Factory<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># example2@example.com</span></code></pre></div>\n<p>factory_girl 到目前为止，用的还是比较浅的，不过作为 fixture 的替代品，以后应该有很多打交道的时候。</p>","fields":{"slug_without_date":"/rails-factory_girl-and-faker"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":38,"pageCount":47}}},"pageContext":{"limit":3,"skip":111}},"staticQueryHashes":["26522286"],"slicesMap":{}}