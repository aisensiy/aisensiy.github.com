{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/38",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"bf7e9dcd-06df-565b-8696-39fac12d62ba","frontmatter":{"title":"第一道 ACM","date":"2012 April-07"},"html":"<p>一直都对 C/C++ 有抵触心理，嫌麻烦。不过由于如果想要做相关的训练，就必须依赖于这个平台。于是昨天就重新回顾了一下 C++ 的语法，不求精通，只求可以写出来能 AC 的程序... 下面就是我写的第一道 AC 的题了。</p>\n<p>1001</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span></span>\n<span class=\"token comment\">/*\n * 题目：计算一个大数的 n 次方 结果要求是绝对精确值\n * http://poj.org/problem?id=1001\n *\n * 我也没有看其他高人的算法 而是凭自己的想法做出来的\n * 核心就是用字符串模拟了小学教的乘法 还有 加法运算\n *\n * @author: aisensiy(http://weibo.com/alistapart)\n */</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nstring <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string num<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>num<span class=\"token operator\">>></span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//通过乘法计算出 n 次方</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i      res <span class=\"token operator\">=</span> <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//目前的结果忽略了所有的小数点</span>\n    <span class=\"token comment\">//需要做进一步处理</span>\n    string new_res<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> zero<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//首先删除前面多余的零</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tail <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">==</span> j <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>zero<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> new_res <span class=\"token operator\">+=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zero <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> new_res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> new_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      new_res <span class=\"token operator\">=</span> new_res<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> new_res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout<span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> b_i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> borrow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    string v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a_i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n      v <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      borrow <span class=\"token operator\">=</span> cur <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>borrow<span class=\"token punctuation\">)</span> v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n    string <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">=</span> z <span class=\"token operator\">+</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    zero<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 两个数的加法\n * 同样忽略了小数点\n */</span>\nstring <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  string v<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> borrow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> cur <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    borrow <span class=\"token operator\">=</span> cur <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>borrow<span class=\"token punctuation\">)</span> v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> borrow<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","fields":{"slug_without_date":"/e7acace4b880e98193acm"}},{"id":"6b299670-3f25-5d2f-aeca-95fcd6930e90","frontmatter":{"title":"自己对项目选择和心态的感想","date":"2012 March-16"},"html":"<p>前一阵子看了小平的一篇 blog，会想到自己以前做的一些项目有感而发。</p>\n<p>导致一个结果的因素分主客观，客观因素是多事的客户，主观因素是自己的设计。两者的权重此消彼长，此长彼消。\n客户多事，需求反复修改，其实已经算是一个非常常见，几乎不能避免的事情。与其指望碰到好伺候的客户，不如自己在一开始就想好项目在哪里变更的几率大，做好设计，给自己留下后路。\n不过话说回来，设计也是成本，而且是很大的成本。面对紧张的开发时间，尤其是自己给自己带来的那种急切的开发完成的想法，总是敦促着自己快快着手开始编码。这与静下心来，好好写写设计以及开发流程什么的真的是难以调和的矛盾。而且，想做个好的设计也不单单是时间的问题。那真的需要自己仔仔细细的去想一想才行。有的时候，想的太复杂，封装层次太多，很可能没有这个必要，而且会让自己的初期开发反而更加麻烦。但是有的时候想的太简单，没有合适的结构，一遇到要修改的地方，实在是棘手。</p>\n<p>那么面对这么多种种乌七八糟的事情，应该怎么办呢？我自己有这样的一点想法，希望写下来留下罪证，以便自己以后可以回顾一下。</p>\n<p>第一，放弃不靠谱的项目。这是一个眼前利益，与长远发展的权衡。一个不靠谱的项目可能会让你身心俱损，但是依个人的责任感说，既然肯接，就一定会努力完成。就算是搓了点，累了点，但终究是会交差。起码做了一个就有一个的钱。不接，一分钱都没有。但是，我在想，真正的价值不仅仅是金钱，还有计算你所花费的时间，你所损耗的精力，以及其对你心态等等方方面面的影响。一个不靠谱的项目终究是会给你带来金钱（别告诉我没钱，咱们就不用这样讨论了不是）。但是，你耗费了大量的时间和精力。那这些时间和精力你还是可以去做很多其他事情的。你可以看书，可以上课，可以运动，可以很朋友同学出去玩，交流感情（要是一不小心，找到个女朋友，赚大了）。其实这些都不比内心满含怨念的写代码换来的 RMB 贱。很多东西是不能仅仅拿 RMB 衡量的。而且，用来看书和学习的时间是你厚积而薄发的基础，跬步的积累是真正爆发不可或缺的内容。如果项目靠谱，在获取金钱的同时也可以收获很多其他的内容，那当然是绝对不能错过的。但是，如果仅仅是为了挣点外快而勉强接受了一个自己一开始就觉得不靠谱的项目，那之后让自己捶胸顿足、夜夜熬战就是为了赚那么点钱实在就是得不偿失了。\n同样的，君子不立于危墙。应当在根源上根除不靠谱，一开始就来到了不靠谱的环境，今后有什么非同寻常又收效甚微的情况就属正常现象了。该离开时就离开，自己的生活，酸甜苦辣自己最清楚。</p>\n<p>第二，端正自己的心态，尤其是要积极的去调整自己的心态。我想来想去，很多事情，真的就是心态的问题。\n其实很多工作没有那么复杂，要改个功能什么的，算上自己的重构和设计方面的考虑，可能也不会花费那么多的时间。关键是内心的抵触情绪让自己难以立即着手工作。写程序的时候是最不能钻牛角尖的，总有那么一些时候就是有个什么 bug 搞不定，就是非要在那个时候搞定才罢休，但是那个时候的自己早就已经心浮气躁不能很好的去判断这个 bug 的原因了。盲目的消耗下去是不可取的。学会调整自己的心态，先休息一下，转而去做一些其他方面的东西没准儿会让自己突然想到 bug 的起因。</p>\n<p>工作应该是自己喜欢的事业，是能给自己带来快乐的，自己应该是更积极更主动的思考，而不是被动的接受别人的要求像机器一样运转。程序员本身就应该是很高端的工作，代码只是自己想法的实现，更重要的应该是自己的思考：程序的思想，数据的结构，算法的实现。如果是仅仅是拿到别人的非常详细的需求然后\"翻译\"成相应的语言，那整个流程就全反了。</p>","fields":{"slug_without_date":"/e887aae5b7b1e5afb9e9a1b9e79baee98089e68ba9e5928ce5bf83e68081e79a84e6849fe683b3"}},{"id":"c4e1abcd-70c4-5052-bedd-dbd3c9cb7068","frontmatter":{"title":"一个用 canvas 画热力图的利器 heatmap.js","date":"2011 December-31"},"html":"<p>最近做的一个东西，需要以热力图的形式去展示数据。于是就想找一找热力图的算法。找到了很多生成热力图的工具，它们的算法几乎是一致的，都是首先用 alpha 透明度方式画发散的圆在页面上，然后利用一个调色板，把对应的透明度改成相应的颜色即可。</p>\n<p>一个很不错的中文的算法介绍在这里 <a href=\"https://huoding.com/2011/01/04/39\">浅谈 Heatmap</a></p>\n<p>一个英文的在这里 <a href=\"https://blog.corunet.com/how-to-make-heat-maps/\">How to Make Heat Map</a></p>\n<p>虽说我本来打算的是找到算法自己去实现一下的，但是一不小心我发现万能的 google 在搜索记录里面给了我一个 <a href=\"https://www.patrick-wied.at/static/heatmapjs/\">heatmap.js</a> 的链接。我好奇的点进去发现这就是我所需要实现的东西...</p>\n<blockquote>\n<p>图丢了</p>\n</blockquote>\n<p>heatmap.js 可以使用 canvas 画出来一张漂亮的 heatmap。更重要的是它支持数据的动态添加。比如，上图的演示就是一个利用 mousemove 事件生成 heatmap 的例子。它会自动的刷新 canvas，实时显示鼠标运动的 heatmap。</p>\n<p>打开 heatmap.js 发现里面的代码并不多，但是真的很精悍。</p>\n<p>页面代码请点击这里[<a href=\"https://github.com/pa7/heatmap.js/blob/master/heatmap.js\">heatmap.js</a>]，下面我做一个 code 的分析吧，看了那么久了，写下来一方面是自己加深记忆，另一方面就是可以更好的理清思路吧。[<a href=\"https://mindhacks.cn/2009/02/09/writing-is-better-thinking/\">写就是为了更好的思考</a>] 么。</p>\n<p>code 中包含两个主要的对象，store heatmap。store 是 heatmap 的数据部分，算是 model 吧。而 heatmap 则是真正绘制图像的对象。heatmap 部分可以被配置，可以自定义很多的内容，尤其是配色也是可以配置的，那么我们除了做出来正真的 heatmap 的效果之外还可以做出来各种各样不错的效果的。</p>\n<p>首先看看存储部分吧，比较简单，注释也比较清楚。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store object constructor</span>\n<span class=\"token comment\">// a heatmap contains a store</span>\n<span class=\"token comment\">// the store has to know about the heatmap</span>\n<span class=\"token comment\">// in order to trigger heatmap updates when</span>\n<span class=\"token comment\">// datapoints get added</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hmap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _ <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// data is a two dimensional array</span>\n        <span class=\"token comment\">// a datapoint gets saved as data[point-x-value][point-y-value]</span>\n        <span class=\"token comment\">// the value at [point-x-value][point-y-value]</span>\n        <span class=\"token comment\">// is the occurrence of the datapoint</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// tight coupling of the heatmap object</span>\n        heatmap<span class=\"token operator\">:</span> hmap\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// the max occurrence - the heatmaps radial gradient</span>\n    <span class=\"token comment\">// alpha transition is based on it</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        _<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 model 里面，支持一次添加一个数据点。这也是 heatmapjs 支持实时绘制的关键。一旦 max 值有变化就会重新绘制整个 canvas。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">addDataPoint</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n        heatmap <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heatmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        data <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if count parameter is set increment by count otherwise by 1</span>\n    data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length     me<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// do we have a new maximum?</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>max <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        me<span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// max changed, we need to redraw all existing(lower) datapoints</span>\n        heatmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"actx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>heatmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>heatmap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> one <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> two <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                heatmap<span class=\"token punctuation\">.</span><span class=\"token function\">drawAlpha</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>two<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// @TODO</span>\n        <span class=\"token comment\">// implement feature</span>\n        <span class=\"token comment\">// heatmap.drawLegend(); ?</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    heatmap<span class=\"token punctuation\">.</span><span class=\"token function\">drawAlpha</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>下面就是画的部分了。这里是最重要的两个方法，drawAlpha colorize</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">drawAlpha</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// storing the variables because they will be often used</span>\n    <span class=\"token keyword\">var</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n        r1 <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"radiusIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        r2 <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"radiusOut\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        ctx <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"actx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        max <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// create a radial gradient with the defined parameters.</span>\n        <span class=\"token comment\">// we want to draw an alphamap</span>\n        rgr <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createRadialGradient</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>r1<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        xb <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>r2<span class=\"token punctuation\">,</span> yb <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>r2<span class=\"token punctuation\">,</span> mul <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>r2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// the center of the radial gradient has .1 alpha value</span>\n    rgr<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgba(0,0,0,'</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">/</span>me<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// and it fades out to 0</span>\n    rgr<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgba(0,0,0,0)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// drawing the gradient</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> rgr<span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>xb<span class=\"token punctuation\">,</span>yb<span class=\"token punctuation\">,</span>mul<span class=\"token punctuation\">,</span>mul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// finally colorize the area</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">colorize</span><span class=\"token punctuation\">(</span>xb<span class=\"token punctuation\">,</span>yb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>策略很简单，</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">rgr<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgba(0,0,0,'</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">/</span>me<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token string\">'0.1'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// and it fades out to 0</span>\nrgr<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rgba(0,0,0,0)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>利用当前点的 count 除以最大的 count 获取的结果做为 alpha 值。然后做一个 RadialGradient 画出来这个图就可以了。那么由于多个相近的点 aphla 效果的叠加就可以获取想要的效果了。这里就是 canvas 的 nb 之处了，看别的语言实现都是采用将一个这样的 png 图片画到画板上，但是 canvas 就可以直接实现这个效果。</p>\n<blockquote>\n<p>图丢了</p>\n</blockquote>\n<p>有了这幅 aphla 版本的 heatmap 我们利用一个配送版做着色就大功告成了。</p>\n<p>这里又用到了上面所说的 canvas 的 nb 之处，在通常需要一个图片作为配色板的时候 canvas 可以自己做出来一个缓存起来。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">initColorPalette</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> me <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n        canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\"256\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        grad <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    gradient <span class=\"token operator\">=</span> me<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gradient\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> x <span class=\"token keyword\">in</span> gradient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        grad<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> gradient<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> grad<span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//这里太强大了，缓存了我的画板数据，然后删除了画板</span>\n    me<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gradient\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> canvas<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> grad<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">delete</span> ctx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>这种方式也给我们实现各种各样的配色提供了方便，我们只需要改变那个 <strong>gradient</strong> 就可以了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>         <span class=\"token comment\">// [0] -> r, [1] -> g, [2] -> b, [3] -> alpha</span>\n    <span class=\"token keyword\">var</span> alpha <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    offset <span class=\"token operator\">=</span> alpha<span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>offset<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// we ve started with i=3</span>\n    <span class=\"token comment\">// set the new r, g and b values</span>\n    <span class=\"token comment\">// 根据透明度选择配色板上的配色</span>\n    imageData<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>palette<span class=\"token punctuation\">[</span>offset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    imageData<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>palette<span class=\"token punctuation\">[</span>offset<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    imageData<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>palette<span class=\"token punctuation\">[</span>offset<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// we want the heatmap to have a gradient from transparent to the colors</span>\n    <span class=\"token comment\">// as long as alpha is lower than the defined opacity (maximum),</span>\n    <span class=\"token comment\">// we'll use the alpha value</span>\n    imageData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>alpha <span class=\"token operator\">&lt;</span> opacity<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>alpha<span class=\"token operator\">:</span>opacity<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>还是很简练的吧，看到 heatmap.js 的风格，真的像是在看一个不错的艺术品一样。强烈推荐一看～</p>","fields":{"slug_without_date":"/heatmapjs"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":38,"pageCount":43}}},"pageContext":{"limit":3,"skip":111}},
    "staticQueryHashes": []}