{"componentChunkName":"component---src-templates-blogs-js","path":"/page/7","result":{"data":{"blogs":{"nodes":[{"id":"95956ae4-fe81-5f5f-bb0c-b33d0264ce04","frontmatter":{"title":"Jackson 在 Spring Boot 中的使用小结 2","date":"2017 September-19"},"html":"<p><a href=\"/jackson-practices\">上一篇</a>介绍了三个用于 jackson 自定义序列化的场景。这一篇继续介绍其他一些实践。同样，所有的代码都可以在<a href=\"https://github.com/aisensiy/demo-for-jackson\">GitHub</a>找到。</p>\n<h2 id=\"清理输入数据的外层包装（unwrap）\" style=\"position:relative;\">清理输入数据的外层包装（unwrap）<a href=\"#%E6%B8%85%E7%90%86%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%96%E5%B1%82%E5%8C%85%E8%A3%85%EF%BC%88unwrap%EF%BC%89\" aria-label=\"清理输入数据的外层包装（unwrap） permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>json api 不单单是数据的输出格式为 json 通常数据的输入（POST 或者 PUT 的 request body）也是 json 格式。很多情况下会需要默认将输入的 json 数据以一个父级对象包裹。例如在 <a href=\"https://github.com/gothinkster/realworld/tree/master/api\">realworld</a> 项目的 api 规范中在创建一个 <code class=\"language-text\">article</code> 时，其输入的数据格式为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"article\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"How to train your dragon\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ever wonder how?\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"You have to believe\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tagList\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"reactjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"angularjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dragons\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其真正的数据被 <code class=\"language-text\">article</code> 这个属性包裹起来了。而在实际使用的时候，如果每次都要去自行解包这个层次实在是不够优雅。好在 jackson 可以通过配置自动帮我们 unwrap 这里的对象，只需要在 <code class=\"language-text\">application.(yml|properties)</code> 增加一个配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jackson.deserialization.unwrap-root-value=true</code></pre></div>\n<p>比如我有一个这样的输入格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"wrap\": {\n    \"name\": \"name\"\n  }\n}</code></pre></div>\n<p>为了对其自动解包，我们对要解析的对象提供相应的 <code class=\"language-text\">@JsonRootName</code> 即可:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonRootName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapJson</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WrapJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">WrapJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>但是，要注意这个配置是全局有效的，意味着一旦设置了之后所有的解析都会尝试将数据解包，即使没有提供 <code class=\"language-text\">@JsonRootName</code> 的注解，其依然会尝试使用类名称等方式去解包。因此，除了这个测试使用 <code class=\"language-text\">spring.jackson.deserialization.unwrap-root-value</code> 外默认关闭它</strong>。</p>\n<h2 id=\"处理枚举类型\" style=\"position:relative;\">处理枚举类型<a href=\"#%E5%A4%84%E7%90%86%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B\" aria-label=\"处理枚举类型 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 java 为了展示的方便，我们通常是需要将枚举按照字符串来处理的，jackson 默认也是这么做的。</p>\n<p><code class=\"language-text\">OrderStatus</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n    UNPAID<span class=\"token punctuation\">,</span> PREPARING<span class=\"token punctuation\">,</span> COMPLETED<span class=\"token punctuation\">,</span> CANCELED\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">OrderWithStatus</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderWithStatus</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">OrderWithStatus</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderWithStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span>UNPAID<span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于 <code class=\"language-text\">order</code> 来说，其默认的序列化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UNPAID\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然对其进行反序列化也是会成功的，这是处理枚举最简单的情况了，不过 jackson 还支持自定义的序列化与反序列化，比如如果我们需要将原有的枚举变成小写：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unpaid\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们可以写自定义的 serializer 和 deserializer:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonSerialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderStatusSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonDeserialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderStatusDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n    UNPAID<span class=\"token punctuation\">,</span> PREPARING<span class=\"token punctuation\">,</span> COMPLETED<span class=\"token punctuation\">,</span> CANCELED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderStatusSerializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">></span></span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonGenerator</span> gen<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerProvider</span> provider<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderStatusDeserializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdDeserializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> vc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>vc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatusDeserializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonParser</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeserializationContext</span> ctxt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">OrderStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>处理使用自定义的反序列化外或者我们也可以提供一个包含 <code class=\"language-text\">@JsonCreator</code> 标注的构造函数进行自定义的反序列化，并用上一篇提到的 <code class=\"language-text\">@JsonValue</code> 进行序列化：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token punctuation\">{</span>\n    UNPAID<span class=\"token punctuation\">,</span> PREPARING<span class=\"token punctuation\">,</span> COMPLETED<span class=\"token punctuation\">,</span> CANCELED<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@JsonCreator</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">OrderStatus</span> <span class=\"token function\">fromValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@JsonValue</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">ofValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@JsonCreator</code> 有点像是 MyBatis 做映射的时候那个 <code class=\"language-text\">&lt;constructor></code> 它可以让你直接使用一个构造函数或者是静态工厂方法来构建这个对象，可以在这里做一些额外的初始化或者是默认值选定的工作，有了它在反序列化的时候就不需要那个很讨厌的默认的无参数构造函数了。</p>\n<p>当然枚举的处理还有一些更诡异的方式，<a href=\"http://www.baeldung.com/jackson-serialize-enums\">这里</a>有讲解，我就不再赘述了。</p>\n<h2 id=\"对多态的支持\" style=\"position:relative;\">对多态的支持<a href=\"#%E5%AF%B9%E5%A4%9A%E6%80%81%E7%9A%84%E6%94%AF%E6%8C%81\" aria-label=\"对多态的支持 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 DDD 中有领域事件（domain event）的概念，有时候我们需要将这些事件保存下来。由于每一个事件的结构是千差万别的，不论是存储在关系型数据库还是 nosql 数据库，在将其序列化保存的时候我们需要保留其原有的类型信息以便在反序列化的时候将其解析为之前的类型。jackson 对这种多态有很好的支持。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonTypeInfo</span><span class=\"token punctuation\">(</span>\n    use <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonTypeInfo<span class=\"token punctuation\">.</span>Id</span><span class=\"token punctuation\">.</span>NAME<span class=\"token punctuation\">,</span>\n    include <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonTypeInfo<span class=\"token punctuation\">.</span>As</span><span class=\"token punctuation\">.</span>PROPERTY<span class=\"token punctuation\">,</span>\n    property <span class=\"token operator\">=</span> <span class=\"token string\">\"type\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonSubTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@JsonSubTypes.Type</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">UserCreatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"user_created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@JsonSubTypes.Type</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">ArticleCreatedEvent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"article_created\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@JsonTypeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_created\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserCreatedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@JsonTypeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"article_created\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleCreatedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code class=\"language-text\">@JsonTypeInfo</code> 定义类型信息以什么方式保留在 json 数据中，这里就是采用了 <code class=\"language-text\">type</code> 的属性。<code class=\"language-text\">@JsonSubTypes</code> 定义了一系列子类与类型的映射关系。最后 <code class=\"language-text\">@JsonTypeName</code> 为每一个子类型定义了其名称，与 <code class=\"language-text\">@JsonSubTypes</code> 相对应。</p>\n<p>那么对于 <code class=\"language-text\">UserCreatedEvent</code> 和 <code class=\"language-text\">ArticleCreatedEvent</code> 类型，其解析的 json 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user_created\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"article_created\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"使用-mixin\" style=\"position:relative;\">使用 mixin<a href=\"#%E4%BD%BF%E7%94%A8-mixin\" aria-label=\"使用 mixin permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>这是我非常喜欢的一个功能，第一次见到是在 <a href=\"https://github.com/olivergierke/spring-restbucks\">spring restbucks</a> 的例子里。它有点像是 ruby 里面的 mixin 的概念，就是在不修改已知类代码、甚至是不添加任何注释的前提下为其提供 jackson 序列化的一些设定。在两种场景下比较适用 mixin:</p>\n<ol>\n<li>你需要对一个外部库的类进行自定义的序列化和反序列化</li>\n<li>你希望自己的业务代码不包含一丝丝技术细节：写代码的时候很希望自己创建的业务类是 POJO，一个不需要继承自特定对象甚至是不需要特定技术注解的类，它强调的是一个业务信息而不是一个技术信息</li>\n</ol>\n<p>这里就提供一个解析 <code class=\"language-text\">joda time</code> 的 mixin 的示例，它提供了一个 <code class=\"language-text\">DateTimeSerializer</code> 将 <code class=\"language-text\">joda.DateTime</code> 解析为 ISO 的格式。代码见<a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app/blob/master/src/main/java/io/spring/JacksonCustomizations.java\">这里</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JacksonCustomizations</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Module</span> <span class=\"token function\">realWorldModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealWorldModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealWorldModules</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleModule</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RealWorldModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">addSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DateTimeSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeSerializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DateTimeSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonGenerator</span> gen<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerProvider</span> provider<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ISODateTimeFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">dateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withZoneUTC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"其他\" style=\"position:relative;\">其他<a href=\"#%E5%85%B6%E4%BB%96\" aria-label=\"其他 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"JsonPropertyOrder\" style=\"position:relative;\">@JsonPropertyOrder<a href=\"#JsonPropertyOrder\" aria-label=\"JsonPropertyOrder permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonPropertyOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>按照其指定的顺序解析为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"My bean\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"展示空数据的策略\" style=\"position:relative;\">展示空数据的策略<a href=\"#%E5%B1%95%E7%A4%BA%E7%A9%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AD%96%E7%95%A5\" aria-label=\"展示空数据的策略 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>有这么一个对象:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们希望其任何为空的数据都不再显示，即其序列化结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而不是</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，遇到 <code class=\"language-text\">null</code> 的时候也不希望出现这样的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了达到这个效果我们可以为 <code class=\"language-text\">User.java</code> 提供 <code class=\"language-text\">@JsonInclude(JsonInclude.Include.NON_EMPTY)</code> 注解：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonInclude<span class=\"token punctuation\">.</span>Include</span><span class=\"token punctuation\">.</span>NON_EMPTY<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>除了 <code class=\"language-text\">NON_EMPTY</code> 还有很多其他的配置可以使用。</p>\n<p>如果希望这个策略在我们的整个应用中都起效（而不是单个类）我们可以在 <code class=\"language-text\">application.properties | application.yml</code> 做配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jackson.default-property-inclusion=non_empty</code></pre></div>\n<h3 id=\"自定义标注\" style=\"position:relative;\">自定义标注<a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E6%B3%A8\" aria-label=\"自定义标注 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>如果一个注解的组合频繁出现在我们的项目中，我们可以通过 <code class=\"language-text\">@JacksonAnnotationsInside</code> 将其打包使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JacksonAnnotationsInside</span>\n<span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Include</span><span class=\"token punctuation\">.</span>NON_NULL<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonPropertyOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dateCreated\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CustomAnnotation</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@CustomAnnotation</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanWithCustomAnnotation</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> dateCreated<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">BeanWithCustomAnnotation</span> bean \n      <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanWithCustomAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"My bean\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于对象 <code class=\"language-text\">bean</code> 来说，其解析结果为</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"My bean\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"http://www.baeldung.com/jackson-annotations\">Jackson Annotation Examples</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-annotations\">Jackson Annotation document</a></li>\n<li><a href=\"http://www.baeldung.com/jackson-serialize-enums\">How To Serialize Enums as JSON Objects with Jackson</a></li>\n<li><a href=\"https://github.com/olivergierke/spring-restbucks\">spring restbucks</a></li>\n<li><a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app/blob/master/src/main/java/io/spring/JacksonCustomizations.java\">mixin code</a></li>\n</ul>","fields":{"slug_without_date":"/jackson-practices-2"}},{"id":"8b6b1b9a-d2a7-5d85-abfc-bec9c960d1b4","frontmatter":{"title":"Jackson 在 Spring Boot 中的使用小结 1","date":"2017 September-18"},"html":"<p>Json 数据格式由于其和 js 的亲密性等原因，目前算是比较主流的数据传输格式。Spring Boot 也默认集成了 jackson 用于 <code class=\"language-text\">application/json</code> 格式的序列化与反序列化，在写这种 restful json api 的时候势必会需要使用其 api（尤其是它所支持的注解）对输入输出的数据进行各种各样的修改和加工。这里总结了一些常见到的场景、应对的方法并提供了一些额外的学习资料，写着写着发现内容还有点点多，先完成了序列化中的三个情况，后面的博客再补充。</p>\n<p>所有的代码可以在<a href=\"https://github.com/aisensiy/demo-for-jackson\">GitHub</a>找到。</p>\n<h2 id=\"样例的形式\" style=\"position:relative;\">样例的形式<a href=\"#%E6%A0%B7%E4%BE%8B%E7%9A%84%E5%BD%A2%E5%BC%8F\" aria-label=\"样例的形式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>和之前的博客类似，这次也是单独创建了一个用于演示的项目，然后通过测试的形式展示项目。在演示 jackson 时，为了方便测试，我们都将提供一个期望的 json 文件进行比对：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NormalJavaClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NormalJavaClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@JsonTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NormalJavaClassTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JacksonTester</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NormalJavaClass</span><span class=\"token punctuation\">></span></span> json<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">NormalJavaClass</span> obj<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NormalJavaClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_serialize_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualToJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normaljavaclass.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code class=\"language-text\">normaljavaclass.json</code> 为:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aisensiy\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>后面为了简洁，就不再展示这种不必要的测试了，仅仅展示最终的 json 文件。</p>\n<h2 id=\"驼峰格式变下划线格式\" style=\"position:relative;\">驼峰格式变下划线格式<a href=\"#%E9%A9%BC%E5%B3%B0%E6%A0%BC%E5%BC%8F%E5%8F%98%E4%B8%8B%E5%88%92%E7%BA%BF%E6%A0%BC%E5%BC%8F\" aria-label=\"驼峰格式变下划线格式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">User.java</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"last_name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了将其属性 <code class=\"language-text\">firstName</code> 和 <code class=\"language-text\">lastName</code> 在展示时从驼峰式转换为下划线分割，可以对需要转换的属性上配置 <code class=\"language-text\">@JsonProperty(\"&lt;the_underscoe_version_name>\")</code>，其序列化结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eisen\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，spring boot 中还可以通过对 jackson 对配置实现驼峰到下划线格式的转换，需要在 <code class=\"language-text\">application.properties</code> 中增加一个 jackson 的配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jackson.property-naming-strategy=CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES</code></pre></div>\n<p>对于 <code class=\"language-text\">CamelExample</code> 这样的类</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CamelExample</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> aVeryLongCamelCaseName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CamelExample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> aVeryLongCamelCaseName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aVeryLongCamelCaseName <span class=\"token operator\">=</span> aVeryLongCamelCaseName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getaVeryLongCamelCaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> aVeryLongCamelCaseName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就会匹配如下的 json 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"a_very_long_camel_case_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"用单一值作为值对象的序列化结果\" style=\"position:relative;\">用单一值作为值对象的序列化结果<a href=\"#%E7%94%A8%E5%8D%95%E4%B8%80%E5%80%BC%E4%BD%9C%E4%B8%BA%E5%80%BC%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%93%E6%9E%9C\" aria-label=\"用单一值作为值对象的序列化结果 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>DDD 中提倡使用 Value Object，那么项目中可能会出现以下这样的类：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserWithEmail</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Email</span> email<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserWithEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Email</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Email</span> <span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code class=\"language-text\">Email</code> 是一个 Value Object 它有 <code class=\"language-text\">username</code> 和 <code class=\"language-text\">domain</code> 两个属性。</p>\n<p>在序列化的时候，我们其实不需要 <code class=\"language-text\">username</code> + <code class=\"language-text\">domain</code> 的组合，我们想要的就是 <code class=\"language-text\">username@domain</code> 的样子。这个时候，我们可以用 <code class=\"language-text\">@JsonValue</code> 注解：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> domain<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Email</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splits <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        username <span class=\"token operator\">=</span> splits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        domain <span class=\"token operator\">=</span> splits<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@JsonValue</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s@%s\"</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDomain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> domain<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>它的意思就是在序列化这个对象的时候采用标有 <code class=\"language-text\">JsonValue</code> 的方法的值作为其序列化的结果。</p>\n<p>当然，另外一个比较通用的办法就是采用自定义的序列化器：</p>\n<p><code class=\"language-text\">Address</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonSerialize</span><span class=\"token punctuation\">(</span>using <span class=\"token operator\">=</span> <span class=\"token class-name\">AddressSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">City</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">Country</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> city<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> country<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">City</span> <span class=\"token operator\">=</span> city<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Country</span> <span class=\"token operator\">=</span> country<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">City</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCountry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Country</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">AddressSerializer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressSerializer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StdSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Address</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AddressSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AddressSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Address</span><span class=\"token punctuation\">></span></span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonGenerator</span> gen<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerProvider</span> provider<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        gen<span class=\"token punctuation\">.</span><span class=\"token function\">writeString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s, %s\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getCity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getCountry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>要序列化的类：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserWithAddress</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserWithAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span> <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其序列化的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Beijing, China\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"提升内嵌属性的层级\" style=\"position:relative;\">提升内嵌属性的层级<a href=\"#%E6%8F%90%E5%8D%87%E5%86%85%E5%B5%8C%E5%B1%9E%E6%80%A7%E7%9A%84%E5%B1%82%E7%BA%A7\" aria-label=\"提升内嵌属性的层级 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果所提供的 rest json api 需要支持 hypermedia 那么就需要将通过 GET 获取的暴露给外部的资源的状态迁移以链接的形式提供出来。这个时候在我们 API 的内部实现时需要将从数据库中查询的 Data Object 再次用一个修饰类包装（如在 spring-hateoas 中就提供了一个 <code class=\"language-text\">Resource</code> 的修饰器用于处理这种情况）并为其提供额外的状态迁移链接：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> URI<span class=\"token punctuation\">></span></span> links <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> URI<span class=\"token punctuation\">></span></span> <span class=\"token function\">getLinks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableMap</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是这样会有一个问题：原有的 Data Object 成为了 Resource 类中的一个属性。其默认的序列化会成为这个样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"property1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"property2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们不希望这样的代理模式导致原有的对象数据层级下降到 <code class=\"language-text\">content</code> 中，这里可以采用 <code class=\"language-text\">@JsonUnwrapped</code> 注解：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> URL<span class=\"token punctuation\">></span></span> links <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@JsonUnwrapped</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> URL<span class=\"token punctuation\">></span></span> <span class=\"token function\">getLinks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableMap</span><span class=\"token punctuation\">(</span>links<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对之前的 User 进行包裹：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eisen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Link</span> link <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Link</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"self\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">UriComponentsBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">scheme</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">host</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/{id}\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">buildAndExpand</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuserResource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Resource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其序列化的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eisen\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xu\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost/users/123\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"http://www.baeldung.com/jackson-annotations\">Jackson Annotation Examples</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-annotations\">Jackson Annotation document</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-hateoas/\">spring hateoas</a></li>\n</ul>","fields":{"slug_without_date":"/jackson-practices"}},{"id":"1813b7ae-14c7-5e41-be96-a82e5308bfcd","frontmatter":{"title":"Spring Boot @ConfigurationProperties 与 @Value","date":"2017 August-31"},"html":"<p><code class=\"language-text\">@ConfigurationProperties</code> 和 <code class=\"language-text\">@Value</code> 都是 Spring 提供的用于从配置文件注入配置信息的方式。很显然，<code class=\"language-text\">@Value</code> 比较适用于配置比较少的场景，而 <code class=\"language-text\">@ConfigurationProperties</code> 则更适用于有很多配置的情况。之前写项目的时候从来都没有使用过 <code class=\"language-text\">@ConfigurationProperties</code> 几乎每次都是使用 <code class=\"language-text\">@Value</code>。这次遇到了一个比较适合它的场景，在使用的时候还真遇到了一些令人讨厌的小问题，导致开发速度受到了一定的影响。这里记录下来他们之间的使用方式和可能出现的坑，加深一下印象。</p>\n<p><strong>注意</strong>，我们这里使用 <code class=\"language-text\">application.yml</code> 而不是 <code class=\"language-text\">application.properties</code> 不过他们基本是可以相互替代的。</p>\n<h2 id=\"Demo-for-Value\" style=\"position:relative;\">Demo for @Value<a href=\"#Demo-for-Value\" aria-label=\"Demo for Value permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sso</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clientId</span><span class=\"token punctuation\">:</span> clientId\n  <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> clientSecret</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ValueConfiguration</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${sso.clientId}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${sso.clientSecret}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientId <span class=\"token operator\">=</span> clientId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientSecret <span class=\"token operator\">=</span> clientSecret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code class=\"language-text\">@Value</code> 是使用非常的简单，只要将注解添加在参数前即可。</p>\n<h2 id=\"Demo-for-ConfigurationProperties\" style=\"position:relative;\">Demo for @ConfigurationProperties<a href=\"#Demo-for-ConfigurationProperties\" aria-label=\"Demo for ConfigurationProperties permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在有大量参数的时候，一个个添加 <code class=\"language-text\">@Value</code> 就显得麻烦了一点，Spring 提供了另一种方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoForSpringBootConfigurationApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoForSpringBootConfigurationApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token class-name\">CommandLineRunner</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValueConfiguration</span> valueConfiguration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> args <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>valueConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token class-name\">CommandLineRunner</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertiesConfiguration</span> configuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> args <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>  <span class=\"token comment\">// 3</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PropertiesConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sso</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clientId</span><span class=\"token punctuation\">:</span> clientId\n  <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> clientSecret\n\n<span class=\"token key atrule\">oauth</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client_id</span><span class=\"token punctuation\">:</span> id                           // 4\n  <span class=\"token key atrule\">client-secret</span><span class=\"token punctuation\">:</span> secret\n  <span class=\"token key atrule\">redirect_uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//aisensiy.github.io\n  <span class=\"token key atrule\">grantType</span><span class=\"token punctuation\">:</span> code</code></pre></div>\n<ol>\n<li>为了使用 <code class=\"language-text\">@ConfigurationProperties</code> 需要在 spring boot application 上添加 <code class=\"language-text\">EnableConfigurationProperties</code> 的注解，这里遇到的第一个坑</li>\n<li><code class=\"language-text\">@ConfigurationProperties</code> 可以添加前缀，然后其属性就会按照变量的名称默认在 <code class=\"language-text\">application.*</code> 中寻找指定的变量。这里就是去寻找 <code class=\"language-text\">oauth.clientId</code> 这样的配置。** 如果想要从其他配置文件获取配置内容，可以添加一个额外的注释 <code class=\"language-text\">@PropertySource(\"classpath:xxx.yml\")</code>**</li>\n<li>这里的 <code class=\"language-text\">@Setter</code> 是来自 lombok 的注解，它可以自动的帮助添加默认的属性的 setter 方法。注意，<strong>这里的 setter 方法是必须的，如果没有 setter 方法，是无法成功获取配置的</strong>，这也是我在使用它的时候遇到的又一个坑</li>\n<li><code class=\"language-text\">@ConfigurationProperties</code> 与 <code class=\"language-text\">@Value</code> 的一个重大区别在于它采用比较灵活的方式寻找配置。可以看到这里的配置可以是驼峰形式，也可以是下划线分割的，还可以是中横线分割的</li>\n</ol>\n<h2 id=\"添加参数验证\" style=\"position:relative;\">添加参数验证<a href=\"#%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81\" aria-label=\"添加参数验证 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">@ConfigurationProperties</code> 是可以和 validation 注解一起使用的，这样的好处显而易见：对于一些配置是必须的或者是对格式有要求的，在运行开始的时候就能检测到这些问题可以避免上线之后因为配置不符合有找不到头绪而导致的 debug 的痛苦过程。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PropertiesConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@URL</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>直接在成员变量上添加注解就可以了，非常的简单。然后可以去尝试添加一些非法的配置试试效果。</p>\n<p>完整的 demo 项目在<a href=\"https://github.com/aisensiy/demo-for-spring-boot-configuration\">这里</a>。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://projectlombok.org/\">lombok</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding\">relaxed binding</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-vs-value\">@ConfigurationProperties vs. @Value</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html\">Configuration</a></li>\n</ul>","fields":{"slug_without_date":"/spring-boot-configuration-properties-and-value"}},{"id":"1197e3a4-5176-59ae-8dcb-042ec50d2176","frontmatter":{"title":"Spring Boot + Spring MVC + MyBatis 版本的 Real World 实现","date":"2017 August-22"},"html":"<p><a href=\"https://github.com/gothinkster/realworld\">Real World</a> 是由 <a href=\"https://thinkster.io/\">thinkster</a> 这样一个在线编程教育机构发起的一个前后端分离的项目规范。用以展示并作为教材教大家用 react、angular 等不同的前端框架或者 rails、django、spring boot 等不同的后端框架实现同一个项目时的实践是什么样子的。我觉得这个主意非常的好，它让大家对技术的讨论有了一个共同的主题，在采用不同的技术栈以及设计思路解决这个共同的问题的时候我们可以更确切的看到不同的方案之间的优劣，从而更切实的（而不是零散的代码和想象）了解不同框架、语言、设计思路在实现一个项目时的差异，从而帮助我们更好的选择项目的解决方案。当然，从单个技术栈来看，它提供了一个做出完整项目需要都需要哪些具体的知识点，可以当做某一个技术栈的入门小项目来学习和借鉴。</p>\n<p>虽然这个项目叫做 real world，相比 todomvc 这样的 hello world 确实复杂了不少，但是很显然它的复杂度还仅仅是一个人几个小时就能完成的水平，当然不能全面的反映出一个框架的水平，仅做参考。</p>\n<p>本篇对项目做一个整体的介绍，后续会有一些细节的介绍。文章中会涉及到一些 DDD（领域驱动设计） 相关的概念，想要更多的了解建议看看最下面相关材料中的链接。</p>\n<h2 id=\"项目功能\" style=\"position:relative;\">项目功能<a href=\"#%E9%A1%B9%E7%9B%AE%E5%8A%9F%E8%83%BD\" aria-label=\"项目功能 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://demo.realworld.io/#/\">conduit</a> 是 realworld 要实现的一个博客系统。具备一下的功能：</p>\n<ol>\n<li>用户的注册和登录</li>\n<li>用户可以发表、编辑文章</li>\n<li>用户可以对文章添加评论、点赞</li>\n<li>用户可以关注别的用户，关注的用户的文章会展示在用户的 feed 中</li>\n</ol>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090236378256.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>这是一个前后端分离的项目，其提供了后端 api 的<a href=\"https://github.com/gothinkster/realworld/tree/master/api\">规范</a>。这里，我们不评论其 API 设计的好坏，要完全遵循其设计并实现它。当然，对于不同的语言和框架实现都有其 API 设计的偏好，既然这里定死了一种规范，那么在实现的过程中难免会有一些 tricky 的地方需要我们去克服。</p>\n<h2 id=\"目录结构\" style=\"position:relative;\">目录结构<a href=\"#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\" aria-label=\"目录结构 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如标题所述，这里我提供了一个 spring boot + spring mvc + mybatis 的实现。其大概的结构如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── JacksonCustomizations.java\n├── MyBatisConfig.java\n├── RealworldApplication.java\n├── api\n├── application\n├── core\n└── infrastructure</code></pre></div>\n<ol>\n<li><code class=\"language-text\">api</code> 是 web 层，实现了和 spring mvc 的 web 接口</li>\n<li><code class=\"language-text\">core</code> 是业务层，包含了最关键的业务实体和领域服务以及其各个实体之间的交互</li>\n<li><code class=\"language-text\">application</code> 是对外的服务层，由于这个项目本身的业务并不复杂，这里处理的基本都是各种信息的查询</li>\n<li><code class=\"language-text\">core</code> 中定义的大量接口在 <code class=\"language-text\">infrastructure</code> 包含了其具体的实现，比如 data mapper 的实现，具体的密码加密的实现等</li>\n<li>其他则是一些整体的配置类，如主类 <code class=\"language-text\">RealworldApplication</code> 数据库配置类 <code class=\"language-text\">MyBatisConfig</code> 等</li>\n</ol>\n<h2 id=\"六边形架构\" style=\"position:relative;\">六边形架构<a href=\"#%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84\" aria-label=\"六边形架构 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"http://alistair.cockburn.us/Hexagonal+architecture\">六边形架构</a> 或者说是 <a href=\"https://www.infoq.com/news/2014/10/ddd-onion-architecture\">洋葱架构</a> 其实不是一个什么新东西，因为<strong>分层架构</strong>会导致其最底层的实现是数据库，而之前很多的业务逻辑和数据库是揉在一起的（事实上很多项目也确实这样，大量的存储过程中包含着业务的逻辑，业务和数据库紧密的结合在了一起）；但实际上，一个应用最核心的东西应该是<strong>业务逻辑</strong>，而业务逻辑是不应该和技术细节有强关联的，数据库实现和视图层一样，是某种技术细节，不应该和将其与业务逻辑绑定，所以应该用应该强调内部和外部：内部是我的业务逻辑，而外部与外界沟通的基础设施和技术细节，比如具体的数据库存储，比如 restful 的 api，再比如 html 的视图。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090236589859.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>通过这样的思考方式，我们可以认为 mysql 数据库实现仅仅是众多数据库实现中的一个而已，我们可以在不同的环境中轻易的替换掉它，尤其是为对业务的测试提供了可能：我们可以采用内存数据库或者 mock 轻松的实现业务测试。</p>\n<p>我所实现的这个 realworld 项目也基本遵循这个架构，首先在 <code class=\"language-text\">core</code> 中定义了我们的业务实体 <code class=\"language-text\">User</code> <code class=\"language-text\">Article</code> 已经各种 <code class=\"language-text\">Repository</code> 的接口。他们定义了这个项目核心实体的关系以及交互行为。其中具体的 Repository 的实现以及 web 接口的实现都与它无关。对于比较简单的数据创建等行为我们直接在 web 层中处理了，而相对比较麻烦的查询业务我们按照用例在 application 中提供。</p>\n<p>在 api 层直接创建用户：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> POST<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">RegisterParam</span> registerParam<span class=\"token punctuation\">,</span>\n                                 <span class=\"token class-name\">BindingResult</span> bindingResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">checkInput</span><span class=\"token punctuation\">(</span>registerParam<span class=\"token punctuation\">,</span> bindingResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n        registerParam<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        registerParam<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        encryptService<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>registerParam<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        defaultImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">UserData</span> userData <span class=\"token operator\">=</span> userQueryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">userResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserWithToken</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">,</span>\n                                               jwtService<span class=\"token punctuation\">.</span><span class=\"token function\">toToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 application 层创建一个 <code class=\"language-text\">findRecentArticles</code> 的服务，用于处理相对比较复杂的查询：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArticleDataList</span> <span class=\"token function\">findRecentArticles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tag<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">String</span> favoritedBy<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">Page</span> page<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">User</span> currentUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> articleIds <span class=\"token operator\">=</span> articleReadService<span class=\"token punctuation\">.</span><span class=\"token function\">queryArticles</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> \n                                                               author<span class=\"token punctuation\">,</span> \n                                                               favoritedBy<span class=\"token punctuation\">,</span> \n                                                               page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> articleCount <span class=\"token operator\">=</span> articleReadService<span class=\"token punctuation\">.</span><span class=\"token function\">countArticle</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> favoritedBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>articleIds<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArticleDataList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> articleCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArticleData</span><span class=\"token punctuation\">></span></span> articles <span class=\"token operator\">=</span> articleReadService<span class=\"token punctuation\">.</span><span class=\"token function\">findArticles</span><span class=\"token punctuation\">(</span>articleIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fillExtraInfo</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArticleDataList</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> articleCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>注意</strong> 这里之所以没有为创建数据的用例在 application 中创建 service 纯粹是因为它们比较简单，在面向复杂的场景时是可以提供的。</p>\n<h2 id=\"CQRS\" style=\"position:relative;\">CQRS<a href=\"#CQRS\" aria-label=\"CQRS permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 DDD 中 Repository 主要负责数据的持久化：它的任务非常的简单：要么是将内存中的 aggregate 储到数据库中，要么是从数据库中将指定 id 的实体从数据库中重新在内存中构建起来。它实际上是不负责那种复杂的查询业务的，比如获取被喜爱最多的 50 篇文章。更多的内容可以看<a href=\"/some-tips-for-ddd\">这篇文章</a>。</p>\n<p>CQRS 全称 Command Query Responsibility Segregation，强调一个系统的读模型和写模型是分离的。其中 DDD 所实现的是读模型，保证了业务的实现以及数据的一致性。而读模型则纯粹是利用底层数据库的优势将用户需要的数据拼装起来，完全不涉及到实体。<strong>这样的好处在于我们可以完全实现界面所需要的数据模型和真正的业务模型的独立演进，不会因为一个界面上数据展示的变化而导致本身的业务模型出现变更</strong>。当然，这里所谓的界面就是我们的 json API 规格。对于查询业务，我们在 <code class=\"language-text\">application/data</code> 下提供了单独的 <code class=\"language-text\">Data Transfer Object</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleData</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> slug<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> body<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> favorited<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> favoritesCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> createdAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> updatedAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tagList<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProfileData</span> profileData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code class=\"language-text\">ArticleData</code> 就是 <code class=\"language-text\">DTO</code> 或者说是 <code class=\"language-text\">Presentation Model</code> 它和 API 文档中对数据的格式要求完全对齐而不考虑 Article 和 Author 到底应不应当属于一个聚合。</p>\n<p>而下面则是在 core 下的实体：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>of <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> slug<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> body<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tags<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> createdAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> updatedAt<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很显然，这里 Article 中并不包含 Author 的概念，因为它们并不属于一个聚合，Article 只能保存另外一个聚合的 Id (userId)。</p>\n<p>具体的代码见 <a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app\">GitHub</a> 欢迎 star、fork、报 bug、提供 PR。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://github.com/gothinkster/realworld\">Real World</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">CQRS</a></li>\n<li><a href=\"https://aisensiy.github.io/2016/05/17/ddd-repository/\">DDD Repository</a></li>\n<li><a href=\"https://aisensiy.github.io/2016/04/20/some-tips-for-ddd/\">Some tips about DDD</a></li>\n</ol>","fields":{"slug_without_date":"/real-world-spring-boot-and-mybatis"}},{"id":"fd43aa69-c14e-531d-9858-24206aeefa41","frontmatter":{"title":"有关 servlet 和 filter 的基础知识","date":"2017 August-13"},"html":"<p>用惯了抽象级别比较高的 web 框架的人在看一些相关的资料的时候也会时不时看到 filter 和 servlet 这样的名词，也会听到一个<strong>容器</strong>的概念。如果你想真正的明白整个 java web 的开发体系，还是需要了解一些古老的知识，以便明白 java web 整个的体系是什么样子的。</p>\n<h2 id=\"servlet-的基础知识\" style=\"position:relative;\">servlet 的基础知识<a href=\"#servlet-%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\" aria-label=\"servlet 的基础知识 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>这里只讲一些大概的概念，具体的操作以及最新的 servlet 注解的支持大多数人都不会使用，因此只要知道基本的体系即可，需要深究请看文档。</p>\n<h3 id=\"servlet\" style=\"position:relative;\">servlet<a href=\"#servlet\" aria-label=\"servlet permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>servlet 是 java web 得以实现的基础，任何 java web 的框架都是通过对 servlet 加以封装实现的。java 最基础的 servlet 接口只定义了一下的几个方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletConfig</span> config<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span> <span class=\"token function\">getServletInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">ServletConfig</span> <span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>不过我们平时使用的是 <code class=\"language-text\">HttpServlet</code> 一个实现了 Http 处理并实现了 Servlet 接口的一个继承类。它针对 http 请求增加了 <code class=\"language-text\">doGet</code> <code class=\"language-text\">doPost</code> <code class=\"language-text\">doDelete</code> <code class=\"language-text\">doPut</code> 等方法。以用于处理不同类型的 http 请求。然后，通过一个 <code class=\"language-text\">web.xml</code> 定义 servlet 与请求路径之间的映射关系，以说明哪些请求被哪个 servlet 处理。这里我们展示一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n                    <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 1</span>\n    <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, Servlet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=”1.0” encoding=”ISO-8851-1” ?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">...</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span> // 2\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>Test Servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>TestServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span> // 3\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>Test Servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/Serv1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以看到，</p>\n<ol>\n<li>实现了 doGet 方法，用于处理 <code class=\"language-text\">GET</code> 请求</li>\n<li>在 web.xml 声明一个 <code class=\"language-text\">servlet</code> 元素，并定义一个新的名字 <code class=\"language-text\">Test Servlet</code> 与实际的 <code class=\"language-text\">TestServlet</code> 类之间的映射关系</li>\n<li>定义 <code class=\"language-text\">servlet-mapping</code> 定义 <code class=\"language-text\">Test Servlet</code> 与具体的 <code class=\"language-text\">url-pattern</code> 之间的映射关系，这里定义到 <code class=\"language-text\">/Serv1</code> 路径的请求都由 <code class=\"language-text\">Test Servlet</code> 这个 servlet 处理</li>\n</ol>\n<h3 id=\"servlet-container\" style=\"position:relative;\">servlet container<a href=\"#servlet-container\" aria-label=\"servlet container permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>在完成了 servlet 以及 web.xml 的编写之后需要使用一个叫做 servlet container 的东西才能让服务运行起来。著名的 servlet container 有 tomcat，jetty。它们主要负责维护其生命周期并按照 web.xml 的规则将 http 请求分发到指定的 servlet 进行处理。</p>\n<h3 id=\"filter\" style=\"position:relative;\">filter<a href=\"#filter\" aria-label=\"filter permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>有的时候你需要一种机制来控制那些涵盖了多个 servlet 映射的请求，比如追踪每一次请求的执行时间，或者对一系列路径的访问做限制。java 有一个 Filter 的组件用于完成这样的工作。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090235377078.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>它在将 request 传递给 servlet 前以及从 servlet 返回 response 后分别进行一系列的处理。并且 servlet 前后可以包含多个 filter。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090235507175.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>一个 filter 的例子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServlet</span> <span class=\"token class-name\">Request</span> request<span class=\"token punctuation\">,</span> \n                       <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> \n                       <span class=\"token class-name\">FilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this is where request handling would go</span>\n    chain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> respoonse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// this is where response handling would go</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">...</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span> // 2\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>BeerRequest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>com.example.web.BeerRequestFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span> // 3\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>BeerRequest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>*.do<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以看到，</p>\n<ol>\n<li>java 同样已经提供了一个 <code class=\"language-text\">Filter</code> 的基类，并且每个 filter 都包含了处理 request 和处理 response 的双重任务：在 <code class=\"language-text\">chain.doFilter</code> 前的通常是处理请求的，当然你也可以根据一些情况直接返回异常结果而不允许请求继续传递下去；在 <code class=\"language-text\">chain.doFilter</code> 后的是 servlet 处理完之后返回的结果，这里可以对其进行进一步的加工。</li>\n<li>filter 同样需要在 <code class=\"language-text\">web.xml</code> 进行声明，指定其名字和类的映射关系</li>\n<li>filter 也需要对请求进行映射，和 servlet 类似</li>\n</ol>\n<p>最后说明一些 filter 的顺序和其在 web.xml 的声明顺序有关。</p>\n<h2 id=\"spring-mvc-与-servlet-的关系\" style=\"position:relative;\">spring mvc 与 servlet 的关系<a href=\"#spring-mvc-%E4%B8%8E-servlet-%E7%9A%84%E5%85%B3%E7%B3%BB\" aria-label=\"spring mvc 与 servlet 的关系 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前面提到过，java web 的各种框架都是建立在 servlet 体系之上的，SpringMVC 也不例外。和 structs 等老牌的 web 框架类似，它也提供了一个 <code class=\"language-text\">DispatcherServlet</code> 作为 Front Controller 来拦截所有的请求，并通过自己的请求分发机制将请求分发到 SpringMVC 下实际的 controller 之中。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090235645088.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n            org.springframework.web.servlet.DispatcherServlet\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/example/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"spring-security-web-与-filter-的关系\" style=\"position:relative;\">spring security web 与 filter 的关系<a href=\"#spring-security-web-%E4%B8%8E-filter-%E7%9A%84%E5%85%B3%E7%B3%BB\" aria-label=\"spring security web 与 filter 的关系 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>spring security web 都是基于 servlet filter 建立起来的。其使用的方式和 SpringMVC 的 <code class=\"language-text\">DispatcherServlet</code> 非常类似，有一个 <code class=\"language-text\">DelegatingFilterProxy</code> 作为全局的 Filter 对所有的请求进行过滤，并在其层次之下实现 Spring Security 所提供的特有的 Filter（当然不再是继承自 java Filter 的类了）层次。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>myFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>\n        org.springframework.web.filter.DelegatingFilterProxy\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>myFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html\">SpringMVC</a></li>\n<li>Head First Servlets and JSP</li>\n<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#web-app-security\">Spring Security: Web Application Security</a></li>\n</ol>","fields":{"slug_without_date":"/servlet-and-filter-with-web-framework"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":7,"pageCount":22}}},"pageContext":{"limit":5,"skip":30}},"staticQueryHashes":[]}