{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/30",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"4d442626-eebc-598b-be4d-7a42ded631dd","frontmatter":{"title":"angluar-resource rails integration","date":"2013 July-31"},"html":"<p>最近本来是在折腾 parse angular rails 的一个项目。一直想把 parse 封装成和 rails 自带的 activerecord 那样的的 api 但是最终由于各种原因还是放弃了。整体来说还是因为 parse 的社区不够大，需求量不够大，导致周边做的不是很给力。要啥啥没有也就罢了，关键是 parse 目前处于高不成低不就的地步：要啥有啥，但是，做的不好，不完善。</p>\n<p>浪费了一天在 <code>parse-resource</code> 上无果很是伤心。总想做点东西去弥补下损失，起码找到个可以用于目前项目的，简化项目开发的东西吧？那就从这个的周边入手吧。我一直都在想如果 backend restful 的这个接口搞定了，那前面就可以尝试 <code>angular-resource</code> 了。虽说目前后端没有搞定，但是我们依然可以去尝试它。</p>\n<p><code>angular-resource</code> 就是一个可以简化 <code>angular</code> 写 restful 接口的工具。之前不使用它是因为有这样一个疑问：我并不是仅仅有 restful CRUD 的接口。当我有其他的自定义的动作的时候 <code>angular-resource</code> 能支持吗？今天我终于把这个问题弄清楚了。</p>\n<p>首先，要给 <code>angular-resource</code> 提供一个完整的 restful 的 backend。这里我就用 rails 做了一个。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ApplicationController</span>\n  respond_to <span class=\"token symbol\">:json</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">index</span></span>\n    <span class=\"token variable\">@posts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>all\n\n    respond_with <span class=\"token variable\">@posts</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">show</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">create</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n\n    respond_with <span class=\"token variable\">@post</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">update</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>update_attributes<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">destroy</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>destroy <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">reset</span></span>\n    <span class=\"token variable\">@post</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">[</span><span class=\"token symbol\">:id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span>\n      <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'reset as default content'</span>\n      <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span>save\n    <span class=\"token keyword\">end</span>\n\n    respond_with <span class=\"token variable\">@post</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token keyword\">if</span> <span class=\"token variable\">@post</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">nil</span><span class=\"token operator\">?</span> <span class=\"token keyword\">then</span> <span class=\"token symbol\">:not_found</span> <span class=\"token keyword\">else</span> <span class=\"token number\">200</span> <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">top2</span></span>\n    <span class=\"token variable\">@posts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Post</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    respond_with <span class=\"token variable\">@posts</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>这个 controller 在错误的处理以及 http code 的返回上可能还有一些问题，但是我们先忽略这些。关键的提供一个如下的 routes。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">resources <span class=\"token symbol\">:posts</span> <span class=\"token keyword\">do</span>\n  member <span class=\"token keyword\">do</span>\n    post <span class=\"token symbol\">:reset</span>\n  <span class=\"token keyword\">end</span>\n  collection <span class=\"token keyword\">do</span>\n    get <span class=\"token symbol\">:top2</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$: rake routes\n\nreset_post POST   /posts/:id/reset(.:format) posts#reset\ntop2_posts GET    /posts/top2(.:format)      posts#top2\n     posts GET    /posts(.:format)           posts#index\n           POST   /posts(.:format)           posts#create\n  new_post GET    /posts/new(.:format)       posts#new\n edit_post GET    /posts/:id/edit(.:format)  posts#edit\n      post GET    /posts/:id(.:format)       posts#show\n           PUT    /posts/:id(.:format)       posts#update\n           DELETE /posts/:id(.:format)       posts#destroy</code></pre></div>\n<p>好，有了这些之后，我们就可以用 <code>angular-resource</code> 构建一个 <code>Post</code> 的 module 来处理 restful 的请求啦。</p>\n<p>首先 ngResource 的文档在这里 <a href=\"https://docs.angularjs.org/api/ngResource.$resource\">https://docs.angularjs.org/api/ngResource.$resource</a> 虽然大家都吐槽 angular 的文档很糟糕，但是没有别的办法，这个就是最官方的出处了。而且起码我觉得这篇讲的还算说的过去。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">App <span class=\"token operator\">=</span> angular<span class=\"token punctuation\">.</span>module <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ngResource'</span><span class=\"token punctuation\">]</span>\n\nApp<span class=\"token punctuation\">.</span>factory <span class=\"token string\">'Post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>$resource<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n  <span class=\"token function\">$resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts/:id/:verb'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> <span class=\"token string\">'@id'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    reset<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>verb<span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    top2<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>verb<span class=\"token operator\">:</span> <span class=\"token string\">'top2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> isArray<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上所示，对于有自定义的 restful 接口的情况，我提供了一个额外的参数 <code>verb</code>。对默认的 restful 接口 <code>angular-resource</code> 可以帮我们处理了，我们只需要处理额外的自定义的即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reset: { method: 'POST', params: {verb: 'reset'} }</code></pre></div>\n<p>设置 verb: reset 就可以将这个动作和 url 绑定了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    post <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span>$scope<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">)</span>\n    post<span class=\"token punctuation\">.</span><span class=\"token function\">$reset</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success!!'</span><span class=\"token punctuation\">)</span>\n        $scope<span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> data\n    <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>同理，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">top2: { method: 'GET', params: {verb: 'top2'}, isArray: true }</code></pre></div>\n<p>verb: top2 就对应 posts/top2 的 url。不过这里有一个额外的参数 <code>isArray</code> 这个就好像 rails routes 里面声明的 <code>collection</code> 一样，说明不是针对单个元素的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">App.controller 'IndexController', ($scope, Post) ->\n  $scope.posts = Post.top2()</code></pre></div>\n<hr>\n<p>虽然这里还没有涉及嵌套的情况，但是整体来说应该是类似的。</p>\n<p>顺便说一句，项目用到了一个 gem <code>bower-rails</code> 把 bower 整合进来。可以更简单的安装 各种 css js 资源。<a href=\"https://pete-hamilton.co.uk/2013/07/13/angularjs-and-rails-with-bower/\">https://pete-hamilton.co.uk/2013/07/13/angularjs-and-rails-with-bower/</a> 的讲解推荐一看。</p>\n<p>再多说一句，前面有一篇讲述 webapps 的文章，这篇其实和它也有一点关系。目前我比较看好 angularjs 希望用它作为 webapp 的开发框架。</p>","fields":{"slug_without_date":"/angluar-resource-rails-integration"}},{"id":"c138b5e0-4c4a-530b-857d-4e3651604700","frontmatter":{"title":"最近工作的总结","date":"2013 July-02"},"html":"<p>每一段经历都是有意义的。一方面是在这个过程中的感受，另一方面是经历了这个之后的收获。最近又有些疏于码字了。赶紧补一补。记录一些最近工作的一些感想。</p>\n<h2 id=\"用类-dsl-去管理表单的展现\" style=\"position:relative;\">用类 dsl 去管理表单的展现<a href=\"#%E7%94%A8%E7%B1%BB-dsl-%E5%8E%BB%E7%AE%A1%E7%90%86%E8%A1%A8%E5%8D%95%E7%9A%84%E5%B1%95%E7%8E%B0\" aria-label=\"用类 dsl 去管理表单的展现 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先当然是讲一讲技术方面的。最近接触了一些相对来说比较复杂的表单：对，就是那种</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">对于一个下拉选框的每一个选项\n  if option == 1 then\n    表单 1\n  else if option == 2 then\n    表单 2\n  else if\n  ...\n  end\nend</code></pre></div>\n<p>其中，表单 1 到 表单 n 都不不太一样。然后，还要杂揉着表单验证以及自定义的表单组件。</p>\n<p>就具体工作来讲，对每次 select change 事件做出不同的响应是不可避免的。但是，这样的代码往往很难看，并且显得臃肿而不灵活。但是，对于这种业务逻辑与代码要紧密结合的事情，又能有更好的办法么。</p>\n<p>首先，我个人感觉，这种工作不可避免。它涉及业务逻辑。而业务逻辑就是人定义的。人的干涉不可避免。那么，就最好去简化这种工作。让人只做最关键的东西，尽量做抽象。对于目前这种工作，人需要提供的就是规则：什么时候应该显示什么表单，什么时候不应该显示什么表单。</p>\n<p>然后，我找到了一个比较理想的 lib <a href=\"https://github.com/miohtama/jquery-interdependencies\">jquery-interdependencies</a>。这个东西所提供的功能恰好就是我所需要的。它就是一个类似于 dsl 的东西：我告诉它当一个东西的值等于什么的时候，应该做什么。下面是其 github 页面上所提供的一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Start creating a new ruleset</span>\n<span class=\"token keyword\">var</span> ruleset <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">createRuleset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 这里就是指定一条条的规则了。当一个 xx 的值 是 xx 然后就 xxx</span>\n<span class=\"token keyword\">var</span> dietRule <span class=\"token operator\">=</span> ruleset<span class=\"token punctuation\">.</span><span class=\"token function\">createRule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#diet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"special\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndietRule<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#special-diet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make these fields visible when user checks hotel accomodation</span>\n<span class=\"token keyword\">var</span> hotelRule <span class=\"token operator\">=</span> ruleset<span class=\"token punctuation\">.</span><span class=\"token function\">createRule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#accomodation\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhotelRule<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#adults\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhotelRule<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#children\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make the ruleset effective on the whole page</span>\nruleset<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>log<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>写这种简单的规则让我觉得比自己建立事件并配合 switch case 要好很多。我很高兴有人已经提供了这样的 lib。</p>\n<p>但是，这里还有一个问题有待处理。如果我们使用 html 里默认的表单提交方式的话。即便是被隐藏的表单，它们的值也会被提交。这并不是我想要的。应该怎么办呢？html 有一个这样的规则，如果 form 中的一个 input 是 disabled 那么它的结果是不会被提交的。那么，我们需要在 interdependencies 帮助我们隐藏表单的同时将要隐藏的字段做 disable 处理，而在显示的时候则将其 disable 去掉即可。谢天谢地，jquery-interdependencies 给我们提供了这种 callback 的机制。</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">cfg <span class=\"token operator\">=</span>\n  <span class=\"token property\">hide</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input, textarea, select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token property\">show</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input, textarea, select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样的话，每次提交表单，其内容就是我们所需要的了。</p>\n<h2 id=\"用前端模版去渲染界面\" style=\"position:relative;\">用前端模版去渲染界面<a href=\"#%E7%94%A8%E5%89%8D%E7%AB%AF%E6%A8%A1%E7%89%88%E5%8E%BB%E6%B8%B2%E6%9F%93%E7%95%8C%E9%9D%A2\" aria-label=\"用前端模版去渲染界面 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>其实之前的项目就有这么做了。但这次有多学了一招。</p>\n<p>之前使用 handlebars 都是和 backbone 做配合。而这次呢，是要简化复杂的界面呈现。这里用到了一个 gem <a href=\"https://github.com/leshill/handlebars_assets\">handlebars_assets</a>。它可以帮助预编译前端的 handlebars 模版。而不必每次使用的时候都去使用 <code>Handlebars compile</code> 去重新编译。并且，利用 assets pipeline 可以将每个模版写成独立的文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   templates/\n      contacts/\n        new.hbs\n        edit.hbs\n        show.hbs</code></pre></div>\n<p>这样的支持让我不用在代码的组织上费什么脑筋了。</p>\n<h2 id=\"coffee-对象的封装\" style=\"position:relative;\">coffee 对象的封装<a href=\"#coffee-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B0%81%E8%A3%85\" aria-label=\"coffee 对象的封装 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>项目中是用 coffee 而不是用 javascript。在考虑将一坨一坨的代码按照 js 的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var abc = (function() {\n  bla bla…\n\n  return {\n    bla bla...\n  };\n})();</code></pre></div>\n<p>进行的时候发现 coffee 中对应的语法显得非常古怪。我甚至想要放弃 coffee 了。但是，转念一想，coffee 简化了 js 中类的定义和使用。<a href=\"https://coffeescript.org/#classes\">coffee#class</a> 有比较详尽的说明。</p>\n<p>用这个做封装其实刚刚好。</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DateRangeGenerator</span>\n  day <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">86400</span>\n  week <span class=\"token operator\">=</span> day <span class=\"token operator\">*</span> <span class=\"token number\">7</span>\n  year <span class=\"token operator\">=</span> day <span class=\"token operator\">*</span> <span class=\"token number\">365</span>\n\n  date_format <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>date<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"<span class=\"token interpolation variable\">#{date.getFullYear()}</span>-<span class=\"token interpolation variable\">#{date.getMonth() + 1}</span>-<span class=\"token interpolation variable\">#{date.getDate()}</span>\"</span>\n\n  generate_range <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">date_format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> time <span class=\"token operator\">*</span> period<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> period <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token property\">day_range</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">generate_range</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n\n  <span class=\"token property\">week_range</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">generate_range</span><span class=\"token punctuation\">(</span>week<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n\n  <span class=\"token property\">year_range</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">generate_range</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面是我建立的一个类的示例。把代码这里整理之后其实比 jquery 那种胡乱点点的函数用来用去要强很多。</p>\n<hr>\n<p>下面就是吐槽了。</p>\n<p>其实很多时候，当我们接受一个半途的项目的时候，都会有强烈吐槽的欲望。可能代码的风格不和你的意，可能项目的理念和你不相投。可能代码就是一片混乱，难以下手。但是，静下来看看，总还是可以着手去工作的。与其以一个极端对立的态度给自己打退堂鼓，不如说静下心来想办法如何应对。</p>\n<p>当然，上一段说的有点扯淡。关键是应该要怎么想，要怎么做吧。</p>\n<p>别人的代码搓是别人的代码。不能说别人的不好，我的也无所谓了。最起码的，别人的东西我不帮忙收拾就罢了，但是从我的开始，我会让它尽量好起来。起码要对自己的代码负责任，然后再能者多劳吧。</p>\n<p>给别人做项目的时候要有一定的主动权。其实很多客户给你提要求的时候并不一定是深思熟虑了。他们可能也是一时随口一说。但是如果自己不好好权衡和争取的话，可能会拖慢了进度又做不出客户想要的结果。而且，有的时候真正的客户也不是给你钱的人，那么就更要多沟通，灵活点。</p>","fields":{"slug_without_date":"/e69c80e8bf91e5b7a5e4bd9ce79a84e680bbe7bb93"}},{"id":"24a3e4c6-c7e3-5880-9d28-f7c363aa9b0d","frontmatter":{"title":"webapps","date":"2013 June-15"},"html":"<p>其实我一直都很看好 web。但是，我自我感觉自己并没有盲目的看好。当然，在大家纷纷打压 webapps 的时候，我也没有很果断的说还是 native 靠谱。同时画过界面并做过 web 开发的人知道 html css javascript 三个层次分离的重大优势。界面的元素与样式分离，那么修改样式这种 +1 -1 的动作也不会那么的令人讨厌了。js 的事件驱动看起来也是相当的优雅。面对多屏幕适配的问题，responsive design 天生就是来处理这个问题的。总体来说，我很满意 html css js 的这种协作方式。不过，我还是觉得应该尽量避免拿了锤子就把什么都当钉子的2b观点。我一直在观望 web 到底是不是我需要的功能齐全的瑞士军刀。</p>\n<h2 id=\"语义标签是浮云\" style=\"position:relative;\">语义标签是浮云<a href=\"#%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE%E6%98%AF%E6%B5%AE%E4%BA%91\" aria-label=\"语义标签是浮云 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先 html5 包含了很多的东西。最基本的，也是最可用的，就是各种新兴的语义标签：<code>article</code> <code>header</code> <code>footer</code>。这些东西没什么可说的。浏览器其实对于不认识的标签也早就有考虑。</p>\n<h2 id=\"canvas-也是浮云\" style=\"position:relative;\">canvas 也是浮云<a href=\"#canvas-%E4%B9%9F%E6%98%AF%E6%B5%AE%E4%BA%91\" aria-label=\"canvas 也是浮云 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>然后呢，就是 canvas 这个可以独立讲的东西。其实吧，它就是一个 javascript 可以控制的像素级别的画图板。对于一些应用场景，比如图表，图片的处理，图像的拼接这些是一个大大的增强。web 可以直接在前端做那些 flash 甚至是后端才可以做的事情了。这里有一个 canvas 做滤镜的 demo <a href=\"https://xiebiji.com/works/QST/examples_new/imgCutMod/\">https://xiebiji.com/works/QST/examples_new/imgCutMod/</a>。对于 canvas 做游戏这方面我确实是没有什么了解。我就不瞎说了。</p>\n<h2 id=\"css3-很给力\" style=\"position:relative;\">css3 很给力<a href=\"#css3-%E5%BE%88%E7%BB%99%E5%8A%9B\" aria-label=\"css3 很给力 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>还有就是新兴的 css3 里面的一些效果。css transition css animation css tranlation 这些虽说老的桌面浏览器并不支持。但对于移动端来说，这些功能大部分都是可用的了。尤其是像 iphone 其内置的 safari 在这方面的支持非常的好。在没有这些之前，页面的动画效果是靠 javascript 做出来的。靠 cpu 跑的话，似乎还是差一些。这就是很多人声称的</p>\n<blockquote>\n<p>Native apps perform better than Web apps.</p>\n</blockquote>\n<p>然而 transition 与 tranlation 在有些浏览器已经支持硬件加速，很多 native 的动画效果就差不多可以实现了。更详细的东西可以移步这里 <a href=\"https://mobile.smashingmagazine.com/2012/06/21/play-with-hardware-accelerated-css/\">https://mobile.smashingmagazine.com/2012/06/21/play-with-hardware-accelerated-css/</a>。</p>\n<p>最后，很多 web 固有的，不如 native 的体验并不是不可避免的。比如 html 刷新的闪屏，我们是可以将内容通过 ajax 拿到之后通过一个动画效果展现出的。这些东西可能比较细致，听起来很麻烦，但是随着这方面的基础设施的越发齐全。我想，慢慢是可以解决的。</p>\n<p>哦，当然，还有一个不可避免的问题。webapps 拿不到系统的一些资源。比如 地理位置，拍照，推送。这些问题可以通过 phonegap 这种的工具去解决。毕竟，目前来看，很多移动端的浏览器对于全屏浏览这样的效果支持的并不好。如果说这方面有进一步提升的话，webapps 完全可以不走 app store 而只是一个链接的快捷方式。</p>\n<p>接下来我会花一段时间自己去尝试做一个 webapp 试水。看看是否可以做的让我满意。当然，这个 app 一开始应该不会用到那些不好获取的系统资源。先从动画以及体验着手。</p>","fields":{"slug_without_date":"/webapps"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":30,"pageCount":43}}},"pageContext":{"limit":3,"skip":87}},
    "staticQueryHashes": []}