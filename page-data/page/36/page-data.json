{"componentChunkName":"component---src-templates-blogs-js","path":"/page/36/","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"e8467539-7bc8-5ff2-8150-28a4e1c6891e","frontmatter":{"title":"autosize textarea","date":"2013 April-07"},"html":"<p>最近需要一个功能，要让 textarea 可以根据内容进行自动 resize 保证元素的高度不能低于目前填充内容的高度。这种需求似乎也挺广泛的了。比如 zhihu 的评论就应用了这样的体验。</p>\n<p>最近自己也需要这样的体验效果，于是 google 了下，迅速的找到了一个 jquery 的插件就 ok 了。不过我自己想了下，感觉自动的增加高度是可行的。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">elem.style.height = elem.scrollHeight + 'px';</code></pre></div>\n<p>似乎就可以解决问题。但是，如果我删除了一些文字，怎么能够让已经变高的文本框再变低呢。这个我没有想到什么解决办法。于是就去看了下人家的源码，发现这个功能做的非常的聪明。还是要利用 <code>scrollHeight</code>  这个东西来做。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">elem.style.height = 0; elem.style.height = elem.scrollHeight + 'px';</code></pre></div>\n<p>简单说明一下，把 <code>height</code> 设置为 0 之后，<code>scrollHeight</code> 的值就是真实的高度了。那么，把目前的高度设置成 <code>scrollHeight</code> 就 ok 了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">auto_grow</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>len <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>scrollHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">!=</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    elem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n    elem<span class=\"token punctuation\">.</span>len <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>scrollHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'textarea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">auto_grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么就是这么简单。</p>","fields":{"slug_without_date":"/autosize-textarea"}},{"id":"7bb340dd-479a-5b73-80f2-bca8e455295f","frontmatter":{"title":"最近用番茄工作法的感想","date":"2013 April-06"},"html":"<p>几天前想写这篇 blog 的时候感觉有超级多的话要说，可是搁置了两天再来就感觉全都忘了，什么都想不起来了。看来这东西当时想到了起码要记下些东西呀，不然感觉走的可真快。不过还是硬着头皮写吧，不然过几天忘得更干净了。</p>\n<p>番茄工作法之前就听说过的。但是一直都没有什么导火线让我去主动的尝试，知道听了一期 teahour 里面提到了一个 gem <code>pomo</code> 一个命令行下的番茄计时器。然后，我就在我的 ubuntu 下尝试了一下，可是行不通，于是就转而去使用早就知道的那个 <a href=\"https://pomotodo.com/\">https://pomotodo.com/</a> 了。</p>\n<p>这个网站的标题叫做 番茄土豆，在没有仔细学习番茄工作法之前，我一直以为 <code>pomotodo</code> 是一个 番茄 和 土豆 的结合体。但是为了写这篇 blog 介绍下自己使用的这个方法我还专门看了那本 <a href=\"https://book.douban.com/subject/4198078/\">The Pomodoro Technique</a> 了解了下真正的番茄工作法应该是个什么样子的，甚至还做了个笔记。这才发现这个就是叫做番茄工作法，和土豆没什么关系。名字的来源是因为作者是靠一个番茄样子的厨房计时器来计时的。而且 <code>番茄</code> 在意大利语中叫做 <code>pomodoro</code> 是不是也是导致大家把这个和土豆联系在一起的原因呢。</p>\n<p>这个站点基本满足了计时以及写 todo 的需求，是够用了的。于是就很快的开始做番茄了。刚开始我不像书中那个作者说的那样很难，而是恰恰相反，我对这种新的工作方式非常的感兴趣而导致我的工作效率大增。我为了追求更少的番茄做更多的事情而非常努力的工作着。每次完成一个番茄都非常有成就感。而且我一直追求我的一切是可追朔的，我很希望有一个这样的工具可以记录我每天的工作学习进度。那么，我就开始了欢乐的做番茄的新生活。</p>\n<p>3月 11 日是第一次正式的做番茄，到现在已经将近一个月的时间了，在这个过程中发现了很多的问题，值得反思。</p>\n<h2 id=\"碎片化的事情导致了时间的流失\" style=\"position:relative;\">碎片化的事情导致了时间的流失<a href=\"#%E7%A2%8E%E7%89%87%E5%8C%96%E7%9A%84%E4%BA%8B%E6%83%85%E5%AF%BC%E8%87%B4%E4%BA%86%E6%97%B6%E9%97%B4%E7%9A%84%E6%B5%81%E5%A4%B1\" aria-label=\"碎片化的事情导致了时间的流失 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>虽然很多书都会讲这种问题，我也不是第一次听到这种说法。但是真正追朔自己的番茄进度才能看出来这个问题的严重性。稍微的走神或者是突发奇想的事情都会导致大量时间的流逝。尤其是当你这些新奇的问题在解决的过程中遇到问题的时候，那就更悲剧了。闷头做这种事情甚至让自己忘记之前在做的正经事到底是什么了。</p>\n<p>而番茄计时器的滴答声让自己的工作有了更明确的目的性，那么在跑神的时候就多了戒备心，让自己更多的考虑番茄。而方法的创造者也在书中说了这种问题的解决方法：</p>\n<ul>\n<li>如果这个真的很重要，直接干掉现在的番茄，重新计划任务做当前的事情</li>\n<li>但是，通常这样的事情并不重要，你可以快速的记下来，然后去继续做现在的番茄。等现在的番茄完成后再考虑这件事情是否需要去做</li>\n</ul>\n<h2 id=\"8-个小时绝不等于-16-个番茄\" style=\"position:relative;\">8 个小时绝不等于 16 个番茄<a href=\"#8-%E4%B8%AA%E5%B0%8F%E6%97%B6%E7%BB%9D%E4%B8%8D%E7%AD%89%E4%BA%8E-16-%E4%B8%AA%E7%95%AA%E8%8C%84\" aria-label=\"8 个小时绝不等于 16 个番茄 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>我几乎没在哪一天做到过这么多的番茄。而且，大部分时间都远小于这个数目。并且那些做够 16 个番茄的时候的工作时间绝对远超 8 个小时。这么说来，传统的 8 小时工作制真正工作的时间是非常的有限的。</p>\n<h2 id=\"很多事情并不像你想象的那么简单\" style=\"position:relative;\">很多事情并不像你想象的那么简单<a href=\"#%E5%BE%88%E5%A4%9A%E4%BA%8B%E6%83%85%E5%B9%B6%E4%B8%8D%E5%83%8F%E4%BD%A0%E6%83%B3%E8%B1%A1%E7%9A%84%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95\" aria-label=\"很多事情并不像你想象的那么简单 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>最近在做 rails 的站点开发。本来想好的一两个番茄就能搞定的事情结果可能是四五个番茄才行的。很多时候都是这个样子。那些看似琐碎的东西却很有可能花费很长的时间。这确实让我很沮丧，感觉自己的效率很低下。同时，也在想解决办法：采用更好的工具，采用更好的方法，提升自己的水平等等。</p>\n<p>测试驱动开发似乎是一个不错的方法，可以尽量的控制 debug 的时间。让该出的问题尽早的出现。当然，测试越来越多，我也会想办法去提升测试的速度。减少时间无谓的浪费。</p>\n<p>工具方面就是要敢于去折腾。多看多找多尝试。</p>\n<p>然后就是思维和做事方式的改进了。想好了再做或者想的差不多了再做是个不错的注意。而且特别避免不想就做。好的设计绝对是成功的保障，不论是物理方面的或是心理方面的。可是我似乎一直对这方面很欠缺。总是会走弯路。不过没关系，这也是和经验有关系的，走过的弯路记下来，避免以后再走就是了。</p>\n<h2 id=\"最后要告诫自己持之以恒\" style=\"position:relative;\">最后要告诫自己，持之以恒<a href=\"#%E6%9C%80%E5%90%8E%E8%A6%81%E5%91%8A%E8%AF%AB%E8%87%AA%E5%B7%B1%E6%8C%81%E4%B9%8B%E4%BB%A5%E6%81%92\" aria-label=\"最后要告诫自己持之以恒 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>坚持就是胜利，才一个月那么就要坚持下去。虽说好的方法可以让自己更容易的坚持做某项事情，但是强大的自制力始终是不可或缺的。</p>\n<h2 id=\"在吐槽下那个番茄土豆\" style=\"position:relative;\">在吐槽下那个番茄土豆<a href=\"#%E5%9C%A8%E5%90%90%E6%A7%BD%E4%B8%8B%E9%82%A3%E4%B8%AA%E7%95%AA%E8%8C%84%E5%9C%9F%E8%B1%86\" aria-label=\"在吐槽下那个番茄土豆 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>我经常不明缘由的被 logout 然后丢失番茄。这让我很郁闷。而且我一直觉得目前的站点有点无人监管状。虽说有人在豆瓣小组回复，但是开发方面似乎没有太大进展。</p>\n<p>然后就是移动端空缺。</p>\n<p>我都想自己做一个了。</p>\n<hr>\n<p>大概就是这样了吧，以后有了再补充好了。</p>","fields":{"slug_without_date":"/review-of-pomodoro-tech"}},{"id":"a88cb874-2cc9-5270-9819-2042eec43972","frontmatter":{"title":"对于学习的一些想法","date":"2013 March-13"},"html":"<p>刚刚看了 js 类继承这部分的东西。其实，这不是我第一次看类继承这个内容了，一次又一次的看，一次又一次的忘，最主要的问题是从来没有在实际的代码中用过...在 backbone 中是有使用这个内容的，但是每次就是直接使用人家封装好的方法罢了，对于内部的实现并不关心。其实我一直觉得学习和那种比较流行的 TDD 的开发方式一致也挺好的。那种测试驱动开发的方式强调<strong>每次你要做的就是让你的代码通过测试</strong>。那么，不论我用什么方式，我就是让你通过测试我就算是编码完成了。但是我的测试会不断的进化，越发的复杂，每次测试添加了新的逻辑，那么代码就需要跟进，让你的代码可以通过更复杂的测试，并最终在测试的促进下完成整个项目。而整个测试就是对于需求的体现，这样就是让自己的代码保持与测试高度的一致，一方面保证了需求的达成，另一方面保证测试是高覆盖的。</p>\n<h2 id=\"学习经常接触的东西所延伸的领域\" style=\"position:relative;\">学习经常接触的东西所延伸的领域<a href=\"#%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%B8%B8%E6%8E%A5%E8%A7%A6%E7%9A%84%E4%B8%9C%E8%A5%BF%E6%89%80%E5%BB%B6%E4%BC%B8%E7%9A%84%E9%A2%86%E5%9F%9F\" aria-label=\"学习经常接触的东西所延伸的领域 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>而学习我其实也比较倾向于类似的方法论。就是什么时候用，什么时候学，而不是说在完全没有应用环境的时候盲目的学习，这样学习的效率并不高，很快就会忘记。虽然我说过，其实以前学过的东西永远都是有意义的，但是当我隔很久时间用到这些知识的时候发现只知道个大概、甚至只是看到书上各种图画的痕迹却一直怀疑自己从来没有看过这些内容的时候还是会觉得沮丧。后来想了想，这种没有效率的学习通常都是因为<strong>比较盲目的学习一些没有背景的知识造成的</strong>。我觉得学习应该是在自己已经熟识的领域自然的延伸会比较有效率，比如我做前端，那么对 http 请求的了解是比较自然的。如果我突然觉得 C++ 比较有意思，自己去写，那么除非说我有什么实际的项目要使用这个技能以推动我，那么，我想这部分技能的提升是非常困难的。</p>\n<p>我记得以前看过一些讲帮助提升记忆效果的东西，大多是说要把需要记忆的东西尽量和已经熟悉的东西建立关联，关联越多那么记忆的效果就越好，那么这种延伸式的学习也算是有利用这个点吧。</p>\n<p>我觉得比较理想的情况就是当我做东西需要某部分知识的时候，我就抽出一些时间快速的熟悉这部分内容并在实际的开发中使用之。我想这样的效果应该是最好的。</p>\n<h2 id=\"可是用也不一定是最好的学习\" style=\"position:relative;\">可是，用也不一定是最好的学习<a href=\"#%E5%8F%AF%E6%98%AF%E7%94%A8%E4%B9%9F%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E5%AD%A6%E4%B9%A0\" aria-label=\"可是用也不一定是最好的学习 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>使用才会驱动你去学习，但是如果仅仅是为了临时的项目，遇到问题仓促的 google stackoverflow 然后暴力遍历所有解决方法解决之后头也不回的走了，那么再次遇到类似的问题依然还是要重新走类似的流程。有的时候实际的项目并不一定可以帮助我们快速的成长，没有对知识进行良好的消化吸收，那么这个经历的意义就小了很多。</p>\n<p>不知道是不是我的心态不太好，每次做项目都很有压力，希望尽快的做完，做完了才安心。那么，当遇到问题之后，我就会先用 google + stackoverflow 的方法迅速解决之，然后快速推进。但是这会失去一个消化吸收的机会。虽然事后想起来会去进一步学习，但是那个时候与当即遇到问题当即学习的感觉是不大一样的。</p>\n<p>有的时候感觉这就是像是打红白机的对打游戏。尽量用这些熟悉的招数，而不敢在对打过程中去尝试的招数，因为这是有成本的，随便尝试招数很有可能被对手快速打爆。反而是没人对打的时候自己偷偷去练习一下才会有很好的提高。</p>\n<p>其实我的理想是可以不紧不慢的按照自己的安排去学习。但是我后来觉得，人，是很难靠自觉去生活的。就像政府是很难靠自觉去抵制腐败一样。人都有一个向着懒惰的趋势。如果没有比较强硬的措施加以阻止是很难控制的。给国家立法或者是给自己外界压力才会保证自己不停的努力。总是把自己放在最舒适的地方希望靠自律是完全不靠谱的。</p>","fields":{"slug_without_date":"/e5afb9e4ba8ee5ada6e4b9a0e79a84e4b880e4ba9be683b3e6b395"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":36,"pageCount":47}}},"pageContext":{"limit":3,"skip":105}},"staticQueryHashes":["26522286"],"slicesMap":{}}