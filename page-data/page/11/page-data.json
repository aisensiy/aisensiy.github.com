{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/11",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"c8c4477d-66f9-5902-9cf1-32846332d9ec","frontmatter":{"title":"国内环境下更好的 docker 镜像获取","date":"2018 June-10"},"html":"<p>最近欠了好多的 blog，是在是有点忙，周末也被各种事情缠身。今天趁周日的最后半个小时抓紧记录下来一些调研的成果。</p>\n<p>国内的网络环境大家都知道，一方面是不稳定的宽带，另一方面就是对一些国外网站访问的不可靠。今天集中记录一下自己在 docker 镜像处理方面的一些小技巧。</p>\n<h2 id=\"加速-docker-pull\" style=\"position:relative;\">加速 docker pull<a href=\"#%E5%8A%A0%E9%80%9F-docker-pull\" aria-label=\"加速 docker pull permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Docker 本身提供了一个叫做 <a href=\"https://docs.docker.com/registry/recipes/mirror/\">docker registry mirror</a> 的东西，就是为了减少重复的镜像下载所产生的额外带宽，在国内访问 docker 官方 image 极其缓慢的场景下这种需求尤为凸显。如果不设置相应的 mirror 国内服务器下载镜像真是举步维艰。</p>\n<p>通过在 <code>/etc/dockeer/daemon.json</code> 做相应的配置就可以添加一个 registry mirror:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;your registry mirror url>\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>配置之后需要重启 docker。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">pkill</span> -SIGHUP dockerd</code></pre></div>\n<h3 id=\"docker-cn\" style=\"position:relative;\">docker-cn<a href=\"#docker-cn\" aria-label=\"docker cn permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://www.docker-cn.com/\">Docker 中国</a> 估计是 docker 为了在中国开展业务搞的子公司吧？不应该是什么山寨网站吧。其提供了加速国内 docker pull 的镜像地址 <a href=\"https://registry.docker-cn.com%E3%80%82%E6%8C%89%E7%85%A7%E4%B8%8A%E8%BF%B0%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E5%8D%B3%E5%8F%AF%E4%BD%BF%E7%94%A8%EF%BC%9A\">https://registry.docker-cn.com。按照上述的配置方式配置即可使用：</a></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://registry.docker-cn.com\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而很遗憾，这个速度并不理想，以我目前所在的网络环境，下行速度 4MB/s 拉取 ubuntu 镜像的速度大概也就是 400KB/s ~ 500KB/s。</p>\n<h3 id=\"daocloud\" style=\"position:relative;\">daocloud<a href=\"#daocloud\" aria-label=\"daocloud permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><a href=\"https://daocloud.io\">daocloud</a> 作为一个做 caas 的公司为国内提供了号称免费的 mirror 构建服务。登录控制台就可以看到如图所示的位置的加速器按钮了，点进去就有相应的脚本了。</p>\n<p><strong>注意</strong> 虽然人家是好意给了一个 shell 脚本帮助修改 /etc/docker/daemon.json 的配置，然而<strong>如果你的 docker 不止有一个 runtime</strong>，比如你像我这样需要跑 nvidia docker 的 runtime，那么这个脚本会把你的配置搞砸...建议直接想我这样手动配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"registry-mirrors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"{{ docker_mirror }}\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"runtimes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"nvidia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/nvidia-container-runtime\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"runtimeArgs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中将 <code>{{ docker_mirror }}</code> 替换成 daocloud 提供的 mirror 即可。</p>\n<p>配置之后重启 dockerd 感受下速度吧，同样的网络环境，基本是 2MB/s ~ 3MB/s。</p>\n<h2 id=\"拉取更难以获取的镜像\" style=\"position:relative;\">拉取更难以获取的镜像<a href=\"#%E6%8B%89%E5%8F%96%E6%9B%B4%E9%9A%BE%E4%BB%A5%E8%8E%B7%E5%8F%96%E7%9A%84%E9%95%9C%E5%83%8F\" aria-label=\"拉取更难以获取的镜像 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>上述的 docker-cn 以及 daocloud 仅仅是支持官方 docker.io 镜像的加速，然而要知道当今世界 google 的 google cloud platform 做的是相当不错，google 旗下的 kubernetes 基本是当前 PaaS 的不二之选，其官方镜像域名 gcr.io 下有大量 docker.io 无法取代的重要资源。而这些资源早早的已成为了墙外之物。</p>\n<h3 id=\"做搬运工\" style=\"position:relative;\">做搬运工<a href=\"#%E5%81%9A%E6%90%AC%E8%BF%90%E5%B7%A5\" aria-label=\"做搬运工 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>为了获取 gcr.io 域名下的镜像，我们可以在境外创建一个 vps 然后通过蚂蚁搬家的方式一点一点挪过来：</p>\n<ol>\n<li>把 gcr.io/image-name:tag pull 到 vps 上 <code>docker pull gcr.io/image-name:tage</code></li>\n<li>重新打标签到自己 docker.io 的账号下 <code>docker tag gcr.io/image:tag &#x3C;username>/image:tag</code></li>\n<li>把新镜像推送到 docker.io <code>docker push &#x3C;username>/image:tag</code></li>\n</ol>\n<p>当然你可以写一个脚本，把自己用得着的镜像一个个 push 到 docker.io 中。甚至有人会写一些类似于 webhook 的东西，当 gcr.io 一些特定项目的镜像更新后会自动触发相应的流程自动托运新的镜像。不过不论如何这样的坏处显而易见：这是一个体力活，虽然有一些加速的脚本但是我依然需要更新脚本，管理 webhook...我先前已经用这个方法搞了一堆这样的镜像了...都是眼泪...</p>\n<p>google 一下发现这种方式在用 kubeadam 安装 kubernetes 的场景被很多人采用了。</p>\n<h3 id=\"docker-proxy-配置\" style=\"position:relative;\">docker proxy 配置<a href=\"#docker-proxy-%E9%85%8D%E7%BD%AE\" aria-label=\"docker proxy 配置 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>既然有了 vps 自然是可以直接搭建一个代理的，docker 本身是支持在 docker pull 使用代理的，那么配个代理不久解决问题了吗。具体怎么配置代理这里就不讲了，我只记录 docker 这边的配置：</p>\n<p>首先 <code>mkdir /etc/systemd/system/docker.service.d</code>。</p>\n<p>然后创建 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>，添加内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Service]\nEnvironment=\"HTTP_PROXY=http://user01:password@10.10.10.10:8080/\"\nEnvironment=\"HTTPS_PROXY=https://user01:password@10.10.10.10:8080/\"\nEnvironment=\"NO_PROXY=localhost,.docker.io,.docker.com,.daocloud.io\"</code></pre></div>\n<p>当然要使用自己的 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code>，然后把不想使用代理的域名添加到 <code>NO_PROXY</code>，尤其是使用的镜像域名和 docker.io 应该考虑在内。</p>\n<p>最后更新 systemctl 并重启服务</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ systemctl daemon-reload\n$ systemctl restart docker</code></pre></div>\n<p>之后可以用以下镜像测试一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker pull k8s.gcr.io/kube-scheduler-amd64:v1.10.2</code></pre></div>\n<h4 id=\"注意\" style=\"position:relative;\">注意<a href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"注意 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>在查找有关 docker proxy 内容时会发现有两种搜索结果，一种是我上述讲的 docker pull 时采用代理的方法；另一种是<strong>如何在 docker container 中</strong>配置代理：<a href=\"https://docs.docker.com/network/proxy/\">Configure Docker to use a proxy server</a> 这个迷惑性还是有的...不过第二种情况以后也可能会用得上。</p>","fields":{"slug_without_date":"/docker-accelerate"}},{"id":"b253cacb-f67c-558f-ab7f-85708192a268","frontmatter":{"title":"docker 存储","date":"2018 May-25"},"html":"<p>由于自己接触 docker 的时候和现在的 docker 不少的 api 已经有所变化，还是需要更新一下自己的知识。这篇文章大部分源自 docker 的官方文档，然后还有部分自己添油加醋。</p>\n<p>在 docker 中所有的文件是存储在容器的 <code>writable container layer</code>。存在以下的问题：</p>\n<ul>\n<li>容器里的数据不好拿出来</li>\n<li>在容器里写依赖于 <code>storage driver</code> 采用了 <code>union filesystem</code> 效率低下</li>\n</ul>\n<p>然而 docker 提供了可以直接往 host 机器写内容的方式：</p>\n<ol>\n<li>volumes</li>\n<li>bind mounts</li>\n<li>tmpfs</li>\n</ol>\n<p>采用这些方式，即使容器关了甚至删除了数据依然不会丢失。</p>\n<h2 id=\"选择适合的数据绑定方式\" style=\"position:relative;\">选择适合的数据绑定方式<a href=\"#%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F\" aria-label=\"选择适合的数据绑定方式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先不论是采用哪种方式，在容器里看起来都是一样的。</p>\n<ul>\n<li>Volume 将数据存储在 host 但是其实是由 docker 管理的 <code>/var/lib/docker/volumes</code> 非 docker 无法使用</li>\n<li>Bind mounts 是可以将数据随意存储在任意 host system 文件系统中，任何非 docker 应用也有权利对其进行使用</li>\n<li>tmpfs mounts 将文件存储在内存中</li>\n</ul>\n<h2 id=\"更多详情\" style=\"position:relative;\">更多详情<a href=\"#%E6%9B%B4%E5%A4%9A%E8%AF%A6%E6%83%85\" aria-label=\"更多详情 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"volume\" style=\"position:relative;\">Volume<a href=\"#volume\" aria-label=\"volume permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Volume 可以通过 <code>docker volume create</code> 显式创建，当然 docker 也可以在运行的时候创建 volume（比如在 <code>Dockerfile</code> 里面有 <code>VOLUME</code> 语法时如果没有没有显式绑定 volume 那么就会默认创建一个新的 volume）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker volume create data\ndocker run -v data:/data ...</code></pre></div>\n<p><strong>注意</strong> <code>docker volume inspect xxx</code> 会得到如下的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    {\n        \"CreatedAt\": \"2018-05-22T07:53:58Z\",\n        \"Driver\": \"local\",\n        \"Labels\": null,\n        \"Mountpoint\": \"/var/lib/docker/volumes/test/_data\",\n        \"Name\": \"test\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]</code></pre></div>\n<p>其存储的位置为 <code>/var/lib/docker/volumes/test/_data</code> 但是在 Mac OS 下你会发现根本没有这个目录，那是因为 Mac 下的 docker 还是以 linux 虚拟机的形式运行的，你所看到的是其虚拟机下的目录而不是 Mac 下的目录。</p>\n<h3 id=\"bind-mounts\" style=\"position:relative;\">Bind mounts<a href=\"#bind-mounts\" aria-label=\"bind mounts permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>其功能相对 volume 比较有限。但是其好处是可以绑定任意的外部目录给 docker，尤其是在做一些外部数据共享给 docker 的时候非常适合。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -v /tmp/data:/data:ro ...</code></pre></div>\n<h3 id=\"tmpfs\" style=\"position:relative;\">Tmpfs<a href=\"#tmpfs\" aria-label=\"tmpfs permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我自己是没有直接使用过。基本就是用于沙盒环境吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run --tmpfs /data ...</code></pre></div>\n<h2 id=\"注意\" style=\"position:relative;\">注意<a href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"注意 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>两个特殊的场景：</p>\n<ol>\n<li>如果你 mount 一个 empty volume 到一个 container 中已经存在的文件夹，那么 container 会将容器目录中的内容拷贝到这个空的 volume 里面</li>\n<li>如果你使用 bind mount 或者一个非空的 volume 绑定到容器中某一个目录，那么目录里面的东西就会隐藏而只能看到 bind mount 或者 volume 里面的内容。注意，原有的内容不是被删除了而仅仅是被隐藏了</li>\n</ol>\n<h2 id=\"相关文献\" style=\"position:relative;\">相关文献<a href=\"#%E7%9B%B8%E5%85%B3%E6%96%87%E7%8C%AE\" aria-label=\"相关文献 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://docs.docker.com/storage/volumes/\">Docker Volumes</a></li>\n<li><a href=\"https://docs.docker.com/storage/bind-mounts/\">Use bind mounts</a></li>\n<li><a href=\"https://docs.docker.com/storage/volumes/\">Use Volumes</a></li>\n</ol>","fields":{"slug_without_date":"/docker-storage"}},{"id":"a2bf670d-65be-5882-8608-d811b6460bb0","frontmatter":{"title":"用 kubeadm 部署 aws 环境下的 kubernetes","date":"2018 April-24"},"html":"<p>最近一个多月开始折腾在 <strong>国内</strong> 环境部署 kubernetes 集群。是的，确实这还是一个工作内容，和直接在什么 aws googlecloud 或者是 rancher 2.0 直接点点就能创建有一个集群不一样。之所以还要付诸这样的精力去做这件事有两个原因：</p>\n<ol>\n<li>kubernetes 默认部署安装依赖于很多 google 的域名，而因为特殊的国内网络环境，那些自动执行创建集群的工具默认都是不适用的，我不得不把 kubernetes 集群部署搞得一清二楚才能明白具体哪里去 hack 那些被 block 的资源</li>\n<li>我们有自己搭建 bare metal 集群的需求，而那些可以随便点点就能构建集群的方式都是支持公有云的方案</li>\n</ol>\n<p>不过因为我刚刚搞定了 aws 环境下 kubernetes 的部署，趁热打铁我就先记录一下这一部分。</p>\n<h2 id=\"aws-环境下-kubernetes-的特殊性\" style=\"position:relative;\">aws 环境下 kubernetes 的特殊性<a href=\"#aws-%E7%8E%AF%E5%A2%83%E4%B8%8B-kubernetes-%E7%9A%84%E7%89%B9%E6%AE%8A%E6%80%A7\" aria-label=\"aws 环境下 kubernetes 的特殊性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>k8s 有一个 <code>cloud-provider</code> 的概念，其目的是通过和一些公有云的服务集成以达到更好的功能。</p>\n<p>aws 环境下的 k8s 是指 k8s 集成了部分 aws 的服务方便集群的使用。到目前为止，我所知道的包含如下内容：</p>\n<ol>\n<li>ebs 做 persistent volume</li>\n<li>通过 elb 为 <code>LoadBalancer</code> 类型的 service 绑定一个外部域名可以直接通过域名去访问</li>\n</ol>\n<p>而这篇文章则是重点介绍如何让 k8s 去支持这些特性，当然会缺少 kubeadm 一些信息，会在另外一篇介绍。</p>\n<h2 id=\"配置\" style=\"position:relative;\">配置<a href=\"#%E9%85%8D%E7%BD%AE\" aria-label=\"配置 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>k8s 现在已经相当庞大，大的跟个操作系统似的。但是很遗憾其文档的成熟度还处于初级阶段，我甚至找不到 <code>cloud-provider</code> 配置的一些细节，唯一可靠的文档似乎就是代码，但是一不小心打开一个三四千行的 golang 文件我也是一脸迷茫...最后在一个诡异的 github issue 里面找到了一个 googledoc 解释了 <code>cloud-provider=aws</code> 的一些细节。</p>\n<h3 id=\"为-ec2-添加-iam-权限\" style=\"position:relative;\">为 EC2 添加 IAM 权限<a href=\"#%E4%B8%BA-ec2-%E6%B7%BB%E5%8A%A0-iam-%E6%9D%83%E9%99%90\" aria-label=\"为 ec2 添加 iam 权限 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>为了让 k8s 可以操纵 aws 的资源需要为 ec2 添加权限：</p>\n<h4 id=\"for-master\" style=\"position:relative;\">for master<a href=\"#for-master\" aria-label=\"for master permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token key atrule\">\"Version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token key atrule\">\"Statement\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token key atrule\">\"Effect\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token key atrule\">\"Action\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string\">\"ec2:*\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"elasticloadbalancing:*\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:GetAuthorizationToken\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:BatchCheckLayerAvailability\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:GetDownloadUrlForLayer\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:GetRepositoryPolicy\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:DescribeRepositories\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:ListImages\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:BatchGetImage\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"autoscaling:DescribeAutoScalingGroups\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"autoscaling:UpdateAutoScalingGroup\"</span>\n\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token key atrule\">\"Resource\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"for-worker\" style=\"position:relative;\">for worker<a href=\"#for-worker\" aria-label=\"for worker permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token key atrule\">\"Version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token key atrule\">\"Statement\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token key atrule\">\"Effect\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token key atrule\">\"Action\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string\">\"ec2:Describe*\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:GetAuthorizationToken\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:BatchCheckLayerAvailability\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:GetDownloadUrlForLayer\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:GetRepositoryPolicy\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:DescribeRepositories\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:ListImages\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"ecr:BatchGetImage\"</span>\n\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token key atrule\">\"Resource\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"为-ec2-机器添加标签\" style=\"position:relative;\">为 ec2 机器添加标签<a href=\"#%E4%B8%BA-ec2-%E6%9C%BA%E5%99%A8%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE\" aria-label=\"为 ec2 机器添加标签 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>为了识别具体哪些 ec2 是集群的一部分需要为每个 ec2 添加一个 <code>KubernetesCluster</code> 的 tag。</p>\n<h3 id=\"更新-kubelet-config\" style=\"position:relative;\">更新 kubelet config<a href=\"#%E6%9B%B4%E6%96%B0-kubelet-config\" aria-label=\"更新 kubelet config permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>为了支持 cloud-provider 首先需要在 kubelet 的配置里做相应修改，为 <code>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code> 添加 <code>KUBELET_EXTRA_ARGS</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[Service]\nEnvironment=\"KUBELET_EXTRA_ARGS=--cloud-provider=aws</code></pre></div>\n<h3 id=\"更新-kubeadm-配置\" style=\"position:relative;\">更新 kubeadm 配置<a href=\"#%E6%9B%B4%E6%96%B0-kubeadm-%E9%85%8D%E7%BD%AE\" aria-label=\"更新 kubeadm 配置 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kubeadm.k8s.io/v1alpha1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> MasterConfiguration\n<span class=\"token key atrule\">cloudProvider</span><span class=\"token punctuation\">:</span> aws\n<span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">advertiseAddress</span><span class=\"token punctuation\">:</span> &lt;internal<span class=\"token punctuation\">-</span>ip<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">></span>\n<span class=\"token key atrule\">apiServerCertSANs</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> &lt;public<span class=\"token punctuation\">-</span>ip<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">></span>\n<span class=\"token punctuation\">-</span> &lt;public<span class=\"token punctuation\">-</span>hostname<span class=\"token punctuation\">></span></code></pre></div>\n<p>在用 kubeadm 创建集群时采用命令即可</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kubeadm init --config=init-config.yaml</code></pre></div>\n<h3 id=\"更新-hostname\" style=\"position:relative;\">更新 hostname<a href=\"#%E6%9B%B4%E6%96%B0-hostname\" aria-label=\"更新 hostname permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>首先先要说明一下，aws 的机器默认的 hostname 是和其 internal dns hostname 不同。默认的是这个样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ip-xx-xx-xx-xx</code></pre></div>\n<p>而 internal hostname 则是</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ip-xx-xx-xx-xx.&lt;region>.compute.internal</code></pre></div>\n<p>之类的东西。而 aws kubernetes 需要通过这个 internal dns hostname 去定位 node 所以需要将 hostname 更改成这个。</p>\n<p>先前可以通过 `--hostname-override`` 参数覆盖默认的 aws hostname，但是最近似乎不行了，不如直接修改 hostname 一劳永逸。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl http://169.254.169.254/latest/meta-data/local-hostname > /etc/hostname</code></pre></div>\n<p>然后重启机器使得更新起效。</p>\n<h2 id=\"注意\" style=\"position:relative;\">注意<a href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"注意 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果一开始配置坏了需要重新配置那一定要 kubeadm reset 哦：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">kubeadm reset\nifconfig cni0 down\nip link delete cni0\nifconfig flannel.1 down\nip link delete flannel.1\nrm -rf /var/lib/cni/</code></pre></div>\n<p>因为我自己安装的 flannel 其他的要看情况修改哦。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://docs.google.com/document/d/17d4qinC_HnIwrK0GHnRlD1FKkTNdN__VO4TH9-EzbIY/edit#\">aws cloud provider</a></li>\n<li><a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/\">kubeadm</a></li>\n<li><a href=\"https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/\">kubeadm init</a></li>\n<li><a href=\"https://medium.com/jane-ai-engineering-blog/kubernetes-on-aws-6281e3a830fe\">Kubernetes on AWS</a></li>\n</ol>","fields":{"slug_without_date":"/kubeadm-aws-provider"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":11,"pageCount":39}}},"pageContext":{"limit":3,"skip":30}},
    "staticQueryHashes": []}