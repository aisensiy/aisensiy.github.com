{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/37",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"c6c7ad40-2f5b-5cb9-bf52-41c24d94dbbe","frontmatter":{"title":"rails -- factory_girl and faker","date":"2013 January-29"},"html":"<p>昨晚写 high 了，本来想写写 factory_girl 和 faker 这两个 gem，结果一字未提。这里再写一篇好了。</p>\n<p>factory_girl 与 faker 都是在那本在线的 rails tutorials 里面看到的。factory_girl 用于替换 fixtures 而 faker 用于生成各种随机的内容，这两个东西一个提供生成东西的框架，一个提供具体生产出来的内容，一起使用就显得非常合理了。刚刚纠结的在写相关的内容，反复的打开这两个 gem 的 github 页面翻来翻去，翻的好烦，决定总结一下！这里结合 rails tutorials 写一下自己感觉比较实用的内容。<!-- more --></p>\n<p>刚接触 rails 时看到 fixture 这个东西，感觉还是挺体贴的。不过，尽管是可以配合 erb 方式嵌入代码，但依然不够灵活。于是就有人（thoughtbot）做了个写 code 生成 fixture 的东西，叫做 factory_girl。用处和 fixture 是一样的，只是把 yaml 换成了 ruby code。既然，它的名字里面有 factory，那么我就把它认为是用于为每个类生成很多实例的。这里先给第一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  factory <span class=\"token symbol\">:user</span> <span class=\"token keyword\">do</span>\n    email <span class=\"token string\">'test@example.com'</span>\n    password <span class=\"token string\">'00000000'</span>\n    password_confirmation <span class=\"token string\">'000000000'</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>这是一个等价于 fixture 的例子，用于生成一个静态的 user 记录。\n不过 factory_girl 很灵活，不像 fixture 直接放进数据库，还可以有其他的方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Returns a User instance that's not saved</span>\nuser <span class=\"token operator\">=</span> <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns a saved User instance</span>\nuser <span class=\"token operator\">=</span> <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns a hash of attributes that can be used to build a User instance</span>\nattrs <span class=\"token operator\">=</span> <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>attributes_for<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns an object with all defined attributes stubbed out</span>\nstub <span class=\"token operator\">=</span> <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>build_stubbed<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>build create attributes_for 都比较容易理解，而最后这个 build_stubbed 就诡异了。我 search 了一下，发现了 thoughtbot 自己写的一篇文章 <a href=\"https://robots.thoughtbot.com/post/22670085288/use-factory-girls-build-stubbed-for-a-faster-test\">Use Factory Girl’s build_stubbed for a Faster Test Suite</a>，文章中提到</p>\n<blockquote>\n<p>build_stubbed is the younger, more hip sibling to build; it instantiates and assigns attributes just like build, but that’s where the similarities end. It makes objects look look like they’ve been persisted, creates associations with the build_stubbed strategy (whereas build still uses create), and stubs out a handful of methods that interact with the database and raises if you call them. This leads to much faster tests and reduces your test dependency on a database.</p>\n</blockquote>\n<p>差不多是说 很多测试的时候，虽然数据保存到了数据库，但是并不会和数据库打交道，你要的内容已经在这个对象里面了。那么，为了加速测试，你其实不用真的把数据写到数据库里面。build_stubbed 假装已经把数据保存到数据库了（伪装的create）。然后你在继续别的测试就行了。当然，既然是假装保存到数据库里面了，那么如果你真的用到保存后的信息，它会报错的。不过到目前为止，我并没有实用过这个方法。</p>\n<p>[update]学到老活到老，写这个的时候居然都不知道 stub 是什么，现在知道了。看了 mocha 就什么都知道了。</p>\n<p>额，刚才我还想写我对于 attributes_for 的实用呢，因为我以为 user model 保存之后，其 password 属性就不复存在了呢，不过刚才我尝试了一下，它依然建在，那么我之前为了得到原有的 password 而实用 attributes_for 就是徒劳的了。这么说来，这个方法就没什么用处了 o_o。因为 factory_girl 支持属性的重写。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">rails g scaffold comment content<span class=\"token symbol\">:text</span> user_id<span class=\"token symbol\">:integer</span> post_id<span class=\"token symbol\">:integer</span>\n\n<span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  factory <span class=\"token symbol\">:comment</span> <span class=\"token keyword\">do</span>\n    content <span class=\"token string\">'bla bla'</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token variable\">@comment</span> <span class=\"token operator\">=</span> <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>create <span class=\"token symbol\">:comment</span><span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">:</span> user_id<span class=\"token punctuation\">,</span> post_id<span class=\"token punctuation\">:</span> post_id</code></pre></div>\n<p>我仅仅为 comment 的 content 提供内容，在真正生产 comment 的时候，用重写的方式把 user_id post_id 补全即可。</p>\n<p>到目前为止，factory_girl 差不多只是 fixture 等价功能的加强版，下面就要讲述它作为 工厂 的特性了。同时，有了工厂，就要有材料，Faker 就要登场了。</p>\n<p>在 factory_girl 的 <a href=\"https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md\">readme</a> 中 有一个章节叫做 Lazy Attributes，是说一些属性在对象生成的时候才能定义，而不是用静态的定义。就比如 user，静态的 email 由于需要是唯一的，因此不能用于反复生成。需要我们提供一个方法可以生成不同的 email。那么 sequence 与 generate 就要登场了。</p>\n<p>sequence 与 generate 方法是配合使用的。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Defines a new sequence</span>\n<span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  sequence <span class=\"token symbol\">:email</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n    <span class=\"token string\">\"person<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>n<span class=\"token delimiter tag\">}</span></span>@example.com\"</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># => \"person1@example.com\"</span>\n\n<span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># => \"person2@example.com\"</span></code></pre></div>\n<p>如果用 python 的模式来解释 sequence 像是一个生成器，而 generate 像是一个迭代器，这样配合实用可以生成无限多的 email 了。</p>\n<p>上面的例子是 官方 readme 给出的。而我则把 sequence 与 faker 一起使用，就可每次生成随机的内容了。这部分内容在 rails tutorial 里面也有提及（<a href=\"https://ruby.railstutorial.org/chapters/user-microposts#sec-sample_microposts\">sample microposts</a>）。我的做法比较类似。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  sequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:random_title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Lorem</span><span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n  sequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:random_content</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n    <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Lorem</span><span class=\"token punctuation\">.</span>paragraphs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>elem<span class=\"token operator\">|</span> <span class=\"token string\">\"&lt;p><span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>elem<span class=\"token delimiter tag\">}</span></span>&lt;/p>\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  factory <span class=\"token symbol\">:post</span> <span class=\"token keyword\">do</span>\n    title <span class=\"token punctuation\">{</span> generate <span class=\"token symbol\">:random_title</span> <span class=\"token punctuation\">}</span>\n    content <span class=\"token punctuation\">{</span> generate <span class=\"token symbol\">:random_content</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>faker 确实是个很方便的东西，而且没有什么难度，想要看具体的用法，直接来看 <a href=\"https://faker.rubyforge.org/rdoc/\">docs</a> 就好了。</p>\n<p>最后，我结合这些，做了一个类似于 rails tutorials 里面的 populate task 的东西，用于生成初始数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">namespace <span class=\"token symbol\">:db</span> <span class=\"token keyword\">do</span>\n  desc <span class=\"token string\">\"Fill database with sample data\"</span>\n  task populate<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:environment</span> <span class=\"token keyword\">do</span>\n    email1 <span class=\"token operator\">=</span> <span class=\"token string\">\"normal@gmail.com\"</span>\n    email2 <span class=\"token operator\">=</span> <span class=\"token string\">\"example@example.com\"</span>\n    email3 <span class=\"token operator\">=</span> <span class=\"token string\">\"root@gmail.com\"</span>\n    email4 <span class=\"token operator\">=</span> <span class=\"token string\">\"mod@gmail.com\"</span>\n\n    user1 <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email1<span class=\"token punctuation\">)</span>\n    user2 <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email2<span class=\"token punctuation\">)</span>\n    user3 <span class=\"token operator\">=</span> make_admin<span class=\"token punctuation\">(</span>email3<span class=\"token punctuation\">)</span>\n    user4 <span class=\"token operator\">=</span> make_moderator<span class=\"token punctuation\">(</span>email4<span class=\"token punctuation\">)</span>\n\n    <span class=\"token number\">2.</span>times <span class=\"token keyword\">do</span>\n      post <span class=\"token operator\">=</span> make_posts<span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">[</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">,</span> user4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>u<span class=\"token operator\">|</span>\n        <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>create <span class=\"token symbol\">:comment</span><span class=\"token punctuation\">,</span> post_id<span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">:</span> u<span class=\"token punctuation\">.</span>id\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token number\">2.</span>times <span class=\"token keyword\">do</span>\n      make_posts<span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_user</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">User</span><span class=\"token punctuation\">.</span>create<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n      email<span class=\"token punctuation\">:</span> email<span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"00000000\"</span><span class=\"token punctuation\">,</span>\n      password_confirmation<span class=\"token punctuation\">:</span> <span class=\"token string\">\"00000000\"</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_admin</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n    user\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_moderator</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string\">\"moderator\"</span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n    user\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_posts</span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    content <span class=\"token operator\">=</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Lorem</span><span class=\"token punctuation\">.</span>paragraphs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>item<span class=\"token operator\">|</span> <span class=\"token string\">\"&lt;p><span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>item<span class=\"token delimiter tag\">}</span></span>&lt;/p>\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span>create<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Lorem</span><span class=\"token punctuation\">.</span>sentence<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> content<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>每次需要用命令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:reset &amp;&amp; rake db:populate</code></pre></div>\n<p>而且，前提是 seeds.rb 为空，因为 rake db:reset 重新跑所有的 migration 然后跑 seeds.rb。这让我觉得是不是这些 sample 数据放在 seeds.rb 会更好一些呢？单独的 task 粘和性并不是很好的样子。</p>\n<p>（更新）我已经这么做了，把 populate 这个 task 干掉，把里面的代码稍作修改直接放到 seeds.rb 然后每次\n只需</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:reset</code></pre></div>\n<p>即可。</p>\n<p>最后眼馋 factory_girl 里面 sequence generate 方法，自己写了一个 naive 版本的，挂在这里好了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span>\n  <span class=\"token variable\">@@generators</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">sequence</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>proc<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      seq<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      proc<span class=\"token punctuation\">:</span> proc\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:seq</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:proc</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:seq</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token constant\">Factory</span><span class=\"token punctuation\">.</span>sequence <span class=\"token symbol\">:email</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n  <span class=\"token string\">\"example<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>n<span class=\"token delimiter tag\">}</span></span>@exmple.com\"</span>\n<span class=\"token keyword\">end</span>\n\nputs <span class=\"token constant\">Factory</span><span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># example1@example.com</span>\nputs <span class=\"token constant\">Factory</span><span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># example2@example.com</span></code></pre></div>\n<p>factory_girl 到目前为止，用的还是比较浅的，不过作为 fixture 的替代品，以后应该有很多打交道的时候。</p>","fields":{"slug_without_date":"/rails-factory_girl-and-faker"}},{"id":"7041a0d1-78a9-5da0-bc27-472263ebefd2","frontmatter":{"title":"On rails way","date":"2013 January-28"},"html":"<p>好久好久没有写过 public 的 blog 了。虽然是有写一些东西，但是没有公开，那么，写的再多，自己的 blog 上也什么都体现不出来，何况，写的也不多。而且，质量也很有问题，这也是没有公开的原因之一吧。写的烂，不好意思放出来。而且，我发现人真的是很放松的时候才会去写 blog 的，如果你平时很压抑，很烦，即便是空转，白白浪费时间，也没有办法静下心来，去写一点东西。哦，或者更进一步，是首先平时的工作生活相对比较顺心，有了身心都空闲的时间，然后才会去做自己喜欢做的事情（当然，最理想的情况是工作的内容就是很喜欢的事情），然后才会从喜欢做的事情里面感悟出点什么东西，然后才会想起来写点东西表达出来的。勉强是写不出东西来的，上次快元旦的时候发现自己好久没有写东西，以刷数据的心态勉强去写，结果胡乱写了些东西放在草稿箱里，估计很难见得了人了。不过幸好，这次的应该可以。<!-- more --></p>\n<p>从去年八月份比较闲的时候我在又一个揪心的项目之后再次开始了寻找靠谱的开发框架的道路。这次，我决定跨越语言的界限，去尝试一下大名鼎鼎的 ruby on rails。说到语言的障碍，我又想先歪个楼，谈谈每个人对于语言的偏好。</p>\n<p>虽说自己接触了很多的编程语言，但是我觉得真正熟练的没有几个。真正让我说比较拿得出手的，我可能会说 js 一个。python 一瓶子不满，半瓶子晃荡。c c++ java php 都是什么时候用什么时候学，虽然有些语言在用的时候也会觉得得心应手（其实我说的是 python 还有 php）用完了就忘记了，一点都不会写（哦，当然 python 还是写的多一些，一直会呢 o_0，但是依然不深入）。这也是我很拙急的地方。一直这样晃荡下去可不是个长久之计，一定要很深刻的掌握一门通用的语言。python 是我一直比较看好的语言，有很强大的社区，自然的语法，整体来说比较理想。但是，可悲的是，python 在 web 开发方面的能力，我个人感觉并不是最佳方案。尤其是在看了 rails 之后发现 django 简直就是 rails 的翻版，而且翻的似乎不太理想。但是我有一直觉得 web 开发一定是重头戏，因为 web 开发有很多重复无聊的东西，需要一个可以 DRY 的框架来帮你摆脱那些无聊的东西。出于对 python 的失望，也同时在那段时间看了本书 37-signal 的书 rework。我决定尝试一下大名鼎鼎的 ruby on rails。</p>\n<p>跨语言一直我是比较忌讳但是有每次不得不去做的事情。前面有提到，由于工作环境的问题，我会不得不选择工作环境所共用的语言。这也是导致我使用了这么语言的原因。当然 python 是我自发学习的，没有任何一个环境是逼迫我实用 python 的，所以我一直对 python 很有好感。然后 js 作为前端唯一的语言，毋庸置疑的被我经常实用而导致对其比较熟练。很遗憾，一直在后端没有什么太大的建树，所以 c++ c java 都很没有信心。不过在前一阵子经历 java refactory 的历练之后，似乎对 java 也有些上道了，这也多亏了钱师傅的指导，没有他的指导，我觉得我要死在电脑桌前了o_o。所以说，其实每个经历都会有所收获的，即便是非常烂的经历。如果下次再遇到类似的问题，我想，我就不会像这次这么纠结了。起码，我是这么觉得。同时对后端似乎也有些开窍了，以前毫无概念的内存泄漏，起码知道是有理由担心的: 程序都是没昼没夜的跑的，错之毫厘谬之千里。而且性能也是非常值得考虑的问题，当数据量到了百万级别后，O(n^2)也是不小的工作量，甚至内存也是问题了。</p>\n<p>虽说我和一些人有探讨过语言到底是不是障碍的问题。一个观点是说，语言不应该是个障碍。有一定经验的工程师都会实用过好多种的语言，但是不论什么语言，真正重要的东西是那种连伪代码都可以表示的算法或者说是逻辑。我曾经一度比较认同这种观点，因为我也是经历了很多语言过来的。在百度写 php 的时候，我也不会觉得说 php 有什么问题，每种语言该有的东西它都是具备的。基本的 web 开发要做的事情在 python java php ruby 里面其实都会反复出现了，它们只不过是围着 http 协议转罢了。但之后我发现，其实每个人对于语言是有各自的钟爱的。就单拿 web 开发来说，虽然都是围着 http 协议转，但是每个语言转的方式各有区别。尤其是在经历了这些语言做类似的事情之后，我觉得，它们绕的水平还是有区别的，或者说我对于怎么绕比较好是有自己的喜好的。虽然经历了很多语言，但是在用一个不太喜欢的语言的时候总会有一种凑合的想法，就是感觉就用这么一阵子，反正不会一直用的，于是也不会太深入的去研究。现在想想，这种凑合的心态是很危险的，会浪费很多的时间。但是，其实这差不多就是在做自己不喜欢的事情，兴趣和动力都相对小一些，有些时间还是去折腾自己感兴趣的东西去了。更惨的情况就是干不喜欢又不得不去做的事情，心理消耗过大，导致空转，精力白白消耗，白天干不好，晚上不精神干别的。而且，说来说去，到真正做事情的时候，大家不都是还实用自己用的最顺手的语言的时候最有生产效率么。后台之前是 python，后来换做了别的语言是因为人换了吧。他们不会考虑说用之前的 python 代码而是换做了 java。这应该是目前核心人员最顺手的语言是 java 吧。R 和 clojure 大行其道也是因为类似的原因吧。那么，语言不是问题这种说法，就比较扯了。</p>\n<p>在对所了解的语言比较失望同时看到 37-signal 这个奇葩的时候（哦，我喜欢这样的奇葩），我觉得尝试一下这朵奇葩做出来的框架。看了本 agile rails 看了本 rails tutorial 感觉目前绝大多数的框架都是在学 rails 似的（当然，不排除 rails 跟风其他框架的可能）。不过 rails 的 generator 做的确实让人很顺心（对，就是 generator，一开是就觉得这样的设计很棒），同时 ruby 这个语言也确实有胜过 python 的地方，我对其还是有一些好感的。不过在去年 8 9 月份对于 ruby rails 还不是非常的有感觉。同时又有了新的事情要去做，这些东西就搁下了。</p>\n<p>跑来写 java 之后，发现钱师傅对 ruby 很是喜欢，于是多了些对 ruby 的讨论，这才重新开始尝试 rails。果然，做过的事情都是有意义的，虽然八月份干的活当时不太明白，但是起码建立起了索引，这次上手就快了许多。而且，这次聪明了写，开始写些没有意义的项目来加深印象。现在看来，效果还是不错的。</p>\n<p>之前和钱师傅讨论过有关语言的问题，钱师傅说，语言应该掌握两种，一种是非常动态，可以快速写出来的语言，一种是很底层的，可以保证执行效率的语言。那么，现在看来，其中一个是 ruby，另一个是 C 或者 C++。我比较偏爱 C，不过现在的偏爱是没有根据的，因为我没有做过。不过，这个想法是有了的，希望以后也有机会写一些很底层的 C 的 code。不过，目前，我已经走在了 rails 的道路上，现在先是 rails，以后用 ruby 做更多的事情吧。</p>","fields":{"slug_without_date":"/on-rails-way"}},{"id":"2bad34d5-74a2-54d1-ad4b-266694f81f4e","frontmatter":{"title":"All about sublime text 2 -- sublime 使用的一些经验","date":"2012 September-11"},"html":"<p>最近一直在折腾 sublime text2 这款编辑器，终于是用顺起来了。这里写篇 blog 记下如何快速的配置好一个易用的 sublime text，并分享一些技巧和资源。</p>\n<p>以前有用过 vim ，用过 vim 的人都知道，这，是神奇，难以替代。但是要知道，不是每个人都可以驾驭神器的，而且神器也是有适用场景的。比如在 linux 环境下，配合 terminal 的一些命令使用 vim 真的是酣畅淋漓。但是换了 windows 就没有那么顺了。那么，可否有一个替代品呢，当然有很多，但是 sublime text2 作为 editor 里面的新宠当然有它的过人之处。我今天就主要写一下我使用 sublime 的经验。不过，有篇文章 <a href=\"https://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/\">Sublime Text 2 Tips and Tricks</a> 已经算是 sublime 的 get started 了，我想，如果你没有用过 sublime 还是先看那篇比较好，这里会跟多的讲到配置的选择以及插件的推荐。<!-- more --></p>\n<h2 id=\"使用-sublime-text2-给个理由先\" style=\"position:relative;\">使用 sublime text2 给个理由先<a href=\"#%E4%BD%BF%E7%94%A8-sublime-text2-%E7%BB%99%E4%B8%AA%E7%90%86%E7%94%B1%E5%85%88\" aria-label=\"使用 sublime text2 给个理由先 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>当然，一开始有一个非常重要的问题要谈，那就是为什么要用 sublime text2。额...这个问题吧，其实这是个人爱好问题。每种 editor 或者 ide 都有它们各自的优势和劣势，我不想在这上面吐太多口水。我主要列出来这么几点吧。</p>\n<ul>\n<li>sublime 是一个轻型的文本编辑器，不是 ide，它的各种动作都很快。这种快的好处就是，我不需要每写一小段代码就要兴师动众的建立 project 等等，而是 ctrl_n 就开始写，ctrl_s 完了就去测试。但是，它同时支持项目的概念。可大可小，应用自如。</li>\n<li>其功能足够强大，可以满足大多数需求，如项目中的字符搜索，快速文件查找，快速定位函数等等。</li>\n<li>它可以轻松的进行扩展。可以像 vim 那样安装插件，也可以自己添加所谓的 snippets，一种自定义的 auto-complete 的东西，用过的人都知道，在别的编辑器中也有这个概念（貌似 textmate 是最开始有的？我不清楚，没有用过 textmate）。这种扩展的机制使得各种更高的功能的需求可以得到满足。我在下文中也会提到几个我觉得很赞的功能，它们都可以很好的提升我们的工作效率。</li>\n<li>还有就是它看起来很漂亮...不要忽略这个。我记得当初看过一个讲 sublime 的视频的时候，那货说自己不用 notepad++ 的理由就是，It's ugly. 有好看的干啥要用丑的呢？当然，这条对很多人来说不算是什么重要因素就是了，但是我确实很喜欢它的默认高亮主题的。</li>\n</ul>\n<h2 id=\"从无到有把它做到让你顺手\" style=\"position:relative;\">从无到有，把它做到让你顺手<a href=\"#%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E6%8A%8A%E5%AE%83%E5%81%9A%E5%88%B0%E8%AE%A9%E4%BD%A0%E9%A1%BA%E6%89%8B\" aria-label=\"从无到有把它做到让你顺手 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>好吧，和 vim 类似，虽然安装好了的 sublime 就差不多可以用了，但是作为一个长期使用 editor 混饭吃的人，这当然是不够的。</p>\n<h3 id=\"从配置文件下手\" style=\"position:relative;\">从配置文件下手<a href=\"#%E4%BB%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8B%E6%89%8B\" aria-label=\"从配置文件下手 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>sublime 有自己的 config 文件，我们可以设定一些喜好，让它更顺手。Preferences - Settings 有两个，一个是 settings - default 一个是 settings - User。我们大可以在 settings - user 里面大做文章。废话不多说，直接附上我觉得还不错的配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"color_scheme\": \"Packages/Color Scheme - Default/Monokai.tmTheme\",\n    \"detect_slow_plugins\": false,\n    \"rulers\": [80],\n    \"tab_size\": 4,\n    \"translate_tabs_to_spaces\": true,\n    \"ignored_packages\": [],\n    \"indent_to_bracket\": true,\n    \"use_tab_stops\": true\n}</code></pre></div>\n<p>对，就是这么简单，这样差不多就够了。这个配置会兼容 vim 模式，按下 esc 就会回到 vim 的普通模式了哦。虽然 sublime 下支持的 vim 的功能比较有限，但是用惯了 vim 的同学应该还是会比较亲切的。这个配置我做了一个 gist 在 <a href=\"https://gist.github.com/3617664\">https://gist.github.com/3617664</a>。</p>\n<p>然后这里要说一点，对于每种编程语言，其实都可以有一个新的配置文件来覆盖默认的配置的。点击 Preferences - Browse Packages 就会看到各种语言的收藏夹。在相应的文件夹下，新建并编辑 *.sublime-settings 文件即可。这里 <a href=\"https://stackoverflow.com/questions/9712113/can-i-set-tab-with-to-2-spaces-in-ruby-and-4-spaces-in-javascript-with-sublime-t\">https://stackoverflow.com/questions/9712113/can-i-set-tab-with-to-2-spaces-in-ruby-and-4-spaces-in-javascript-with-sublime-t</a> 有介绍哦。</p>\n<h3 id=\"package-control\" style=\"position:relative;\">Package Control<a href=\"#package-control\" aria-label=\"package control permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>sublime 有个 package control 可以让你像 apt-get 那样轻松的安装文件。具体安装这个 package controll 移步这里 ===> <a href=\"https://wbond.net/sublime_packages/package_control/installation\">https://wbond.net/sublime_packages/package_control/installation</a>。安装了这个东西之后，就可以很爽的安装各种插件了啊！！！！下面就列几个我觉得很给力的插件吧！</p>\n<ul>\n<li><a href=\"https://github.com/victorporof/Sublime-HTMLPrettify\">HTMLPrettify</a> 用来格式化 html css 的</li>\n<li><a href=\"https://github.com/spadgos/sublime-jsdocs\">DOCBlockr</a> 更方便的写注释</li>\n<li><a href=\"https://github.com/SublimeLinter/SublimeLinter\">SublimeLinter</a> 多种语言的语法检查</li>\n<li><a href=\"https://github.com/condemil/Gist\">Gist for sublime</a> 可以让你更容易的把某个文件作为 gist 或者是把某个 gist 取回本地来，如果你养成了积累一些常用代码片段的习惯，这样的工具可以让你更快的做这些事情。我的配置文件就是用这种方式去上传和下载的。</li>\n</ul>\n<p>这些插件当然不能满足我们的需求，其实很简单，在 ctrl_shift_p 之后 输入 install package 然后在新框框里面输入个比如 ruby 就看到各种 ruby 相关的包了，找个需要的安装之后立即就可以用了。</p>\n<h2 id=\"其他的技巧\" style=\"position:relative;\">其他的技巧<a href=\"#%E5%85%B6%E4%BB%96%E7%9A%84%E6%8A%80%E5%B7%A7\" aria-label=\"其他的技巧 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>添加一个文件夹到 sublime 然后 ctrl_p 就可以输入文件名来快速的打开文件了，这是最便捷的文件搜索工具了，平时用的频率非常高。</li>\n<li>ctrl_shift_f 全局搜索字符串，当然你也需要有一个文件夹或者是建立了一个项目。</li>\n</ul>\n<p>最后附上一个快捷键的列表，<a href=\"https://gist.github.com/3618541\">https://gist.github.com/3618541</a>。多多使用快捷键确实可以大大简化我们的操作的。比如 ctrl_enter 可以不用走到行尾就可以在当前行下添加新的一行，ctrl_d 选中当前的单词等等。</p>\n<p>整体来说就是这样了，sublime 没那么复杂，很好入手，推荐一试。</p>","fields":{"slug_without_date":"/all-about-sublime-text-2-sublime-e4bdbfe794a8e79a84e4b880e4ba9be7bb8fe9aa8c"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":37,"pageCount":46}}},"pageContext":{"limit":3,"skip":108}},
    "staticQueryHashes": []}