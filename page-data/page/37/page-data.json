{"componentChunkName":"component---src-templates-blogs-js","path":"/page/37","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"2abc8d28-a70c-5304-a3cd-fe2ebbead5f3","frontmatter":{"title":"毕设那点儿事情","date":"2011 April-14"},"html":"<p>最近在做毕业设计了，刚刚终于让那个PyAIML可以学习中文的语句了，这个速度真的大大慢于我的预期。我想在这里写出来我对这个东西做一个任务分解，详细的说说每一块应该做什么。\n首先，当然是要概述一些这个东西咯。我想要用目前的PyAIML去构建一个支持中文的ALICE。这种基于模板匹配的聊天机器人我觉得还是应该有一个自动学习的机制才能有所发展。最后，为了让这个聊天机器人可以更好的发展，需要提供更多的接口，让它可以通过不能的接口和别人去聊天，比如QQ，MSN等等。</p>\n<p>我把问题分成如下几个：</p>\n<ul>\n<li>如何去支持中文</li>\n<li>如何构建自动学习</li>\n<li>怎样添加接口</li>\n</ul>\n<p>中文的问题倒不是很难，可就是很讨厌。最近跑程序见到最多的错误就是UnicodeEncodeError和UnicodeDecodeError，恶心的不得了，每次看到这两个错误我都觉得自己以后应该去一个7位ascii就可以包含所有字符的国家活着去。编程这么久，遇到的最多的问题就是这讨厌的编码问题，mysql乱码，数据爬取乱码等等。写完这篇日志，我就要再写一篇专门将Python的编码相关的日志。我们回归正题，AIML是以词为单位进行分词的，以空格为词的分隔。天然中文之间是没有空格的，我要做的包括:</p>\n<ul>\n<li>为用户输入的中文字符之间添加空格</li>\n<li>剔除中文输出之间的空格</li>\n</ul>\n<p>构建自动学习是最近工作的主题，随着中英的测试成功后，这个也告一段落了。AIML的Specification中有说标签可以执行代码的。可PyAIML做的太槽了，<system>只能运行shell代码，而且是1行！So I hava to do it by myself....</p>\n<p>我想尽各种办法让python可以运行下的python代码，在这里遇到了诸多的难题。首先，如何让python代码可以在运行时嵌入到python当前环境中呢？这里，伟大的stackoverflow拯救了我，我找到了<a href=\"https://stackoverflow.com/questions/3981357/how-to-input-python-code-in-run-time-and-execute-it\">how to input python code in run time and execute it ?</a>, oh shit, i suddenly can not type Chinese in ubuntu now, what a shit os, it is better to be a server!!!! 好吧，我来到了我可爱的windows，一切继续吧。execfile可以把一个临时文件的代码相当于嵌入到当前的环境中。但是python是以indent为格式进行代码解析的。但是我们可爱的AIML默认把string 之间的 's+' 给删除掉了，我首先做的就是为system设置xml:space = \"preserve\"。然后，我写了一个算法可以格式化这些内容。之后就是无尽的debug了，比如全局变量和局部变量的问题呀，比如execfile无法嵌入import声明呀，比如中文字符问题呀。一坨一坨的，纠结了很久。这里就提一提我最后遇到的一个bug吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">file = codecs.open(filename, 'r+', encoding='utf8')\nxmldom = minidom.parse(file)</code></pre></div>\n<p>可耻的 minidom.parse 报错了，我纠结了很久很久！关键是之前已经因为各种bug烦的受不了了，遇到这个bug根本就没仔细看错误说明，开始根本就没注意是 parse 方法报错了！！！再次自责自己的不仔细，不淡定！最后，我删掉了那个codecs，让filename直接传递给 minidom.parse 就没问题了，一切就解决了！！！</p>\n<p>把大量的时间耗费在某些很白痴的 bug 上真的很打击我，我觉得这些时间真的是白白浪费了，明明可以做很多事情的时间，就是因为不仔细，不细心就丢失了。开始怀疑自己平时编程是不是养成了太多的坏毛病。最近在看新浪名校公开课的stanford的编程基础课，那里老师就说，如果你有了编程基础但是养成了一些坏习惯还不如那些一张白纸，什么都不知道的门外汉好教呢。我觉得我就有点坏毛病了，很多东西浅尝辄止实在是不能成大器。</p>\n<p>最后一个就是添加接口的问题了，我现在最想添加的就是 QQ 的接口了，不过看情况吧，不知道能不能做到那一地步，因为为了让机器人足够聪明，我还有很多工作要做，如果来不及的话，我就添加个 web 界面就OK了吧:)</p>","fields":{"slug_without_date":"/e6af95e8aebee982a3e782b9e584bfe4ba8be68385"}},{"id":"f4bf1bcb-e51f-5ba9-8632-833790a5b3bf","frontmatter":{"title":"让你的生活可复用 -- 细粒度的成功也很有意义","date":"2011 April-05"},"html":"<p>这个标题似乎让人很晕，我也在试图去修改它让它变得更清楚一些。大概已经两个年半过去了，我还是觉得这个想法是合理的。</p>\n<blockquote>\n<p>所谓生活就是在你忙着制定其他计划的时候发生的事情。</p>\n</blockquote>\n<p>复用的概念在软件开发领域已经倡导了很多年了，GoF的设计模式也已经深入人心。他们提倡模式的复用，代码的复用，软件的复用。当然，这是三个不同的层次。所谓的模式的复用是让一个软件有可生长的空间，让它拥抱变化使你最初的代码不因为新的变化需要大量的重写。代码的复用是将通用功能的模块做成了所谓的类库，避免了程序员重复发明轮子的过程。这种思想也让这个世界涌现出了众多的伟大的类库和框架，它们精心的结构，巧妙的接口让人惊叹不已。真不敢想象没有这些伟大的类库这个世界将是一个什么样子。伟大的东西就像这个领域发展的必然趋势，没有APACHE的世界最终也要有一个可能不叫做APACHE的角色出现。至于所谓的软件复用就有点说不清楚了，我们很难想像你windows里面的某两个软件可以被用于做别的事情。不过根据我目前的知识水平，我多能想到的就是UNIX下的一系列软件。那些命令行下的，神奇的shell程序。管道把它们连接起来形成了一套可以随意组合的灵活工具。</p>\n<p>不过，我没有想在真正的reusable上花太多的段落，我们回到第一段的引言。从小到大，我们给自己或有心或无心的定下了无数的计划。我们这里所说的计划是一个方向，是一个按部就班、坚持不懈的达到某个预期目标的过程。它似乎是一个整体，似乎是一连串的动作只是为了最终的那个结果。所谓的功亏一篑就是说你沿着这个道路一路向前却恰恰少了最后一根稻草，是的，少了最后这么一篑你就输了。</p>\n<p>那么，真的如此么？真的要这样坚持么？无心插柳：<a href=\"https://www.36kr.com/serendipity-finds-you-paul-buchheit/\">Gmail作者、FriendFeed创始人Paul Buchheit谈人生偶然性</a>则给我们阐述了生活的另一番场景：无心插柳柳成荫，机会就在我们周围，但被我们的习惯和信念断送。生活的乐趣就在于这丰富的偶然性之中。过分的心无旁骛很有可能断送了巨大的机遇。你真的确定自己的计划或者说是信念就是你达到目的的最好途径么。事实上，个人的信念或者计划总是源自于自己对外界世界信息的分析和理解。当你获取了一个所谓的计划之后就摒弃了最初计划的来源是很不明智的。你最初的计划很有可能是因为你获取了片面的信息而得出的结论，此后的一意孤行不一定能够得到你需要的结果，或者不能很快的得到你想要的结果。</p>\n<p>那么，我们应该怎么做呢。我认为很好的把握计划的粒度才是关键。</p>\n<p>计划是要执行的，不过绝不能一意孤行下去。这个所谓的计划很可能要根据你的心智的越发成熟而产生变化。我们要做的应该是在这个过程中把计划分解成一个个小的模块并认真的执行这些小模块，让每一段经历都\"值得一提\"。这和我们的软工原则是一致的：我们让每个模块有自己独立的功能，避免各个模块的过分依赖。当我们发现我们的需求发生了变化，那么原有的模块依然有用武之地。最怕的就是在经历计划的变革之后，我们发现自己原来的工作一无是处了。</p>\n<p>下面，我们就要说一说上一段所提到的\"值得一提\"了。其实，原则就是让你以前的经历有价值，不能因为它是错误的计划的产物就变得一无是处。举个例子，一个人在一个自己不感兴趣的公司做过一份自己不喜欢的工作，没几年就离开了。那么，在这个公司的一段时间是应当有价值的。是的，它在一个完整的计划中是失败的，但是你在这个经历中应该有所收获，而且最好是“值得一提”的。值得一提这个词真的很功利，它就好像是在说如果你去一个新的公司去面试，当HR问你以前的工作时，你可以很自豪的说出自己的业绩，而不是无言以对。当然，“值得一提”应该是你真的有所收获并有所成绩的外在表露，而不是夸夸其谈。</p>\n<p>所以，请珍惜生活的每一个阶段，不要找任何借口去荒废它。未来是那样的不可捉摸，你永远都不知道自己现在所做的一切对将来会有什么样的影响。请用心的去度过你生活的每一个部分。不论你的计划是什么，它并不重要，重要的是你经历的过程。希望你回首往事，发现自己的一段段经历都好像是给自己留下的无数可重用的优秀代码，自己随手捏来加以组合就可以构建一个伟大的系统。你生活的过程，其实在很大程度上并不是在“做软件”，而是在为了将来的“信手捏来”积累优秀的资源。</p>\n<h3 id=\"update-at-2013-10-05\" style=\"position:relative;\">Update at 2013-10-05<a href=\"#update-at-2013-10-05\" aria-label=\"update at 2013 10 05 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我自己在最近的一两年内接过一些外包项目或者和人做一些合伙项目。这些新项目有的已经在被人使用了一些时候了，这我当然很开心。有些项目在我接的时候就知道它注定会失败（真的哦）。但是我还是做了，一个是出于钱的考虑（对于一个穷学生来说，这再自然不过了）；另一方面则是觉得其实这些项目怎么来说都算是\"真是的需求\"。对的，比学校里的课程大作业强多了。我应该去捕捉这种机会去实际做一些东西。这其实对于很多人来事也算是难能可贵了。我除了关注项目的业务层级的发展之外还可以去关注它的技术方面的发展：这完全是另一个视角。这个项目不论成功与否，我通过实际项目去联系自己的技术的目的达到了。然后，通过踩过的这些坑，我可以在未来的项目中做的更快。</p>\n<p>很多人不重视这些的，但实际上这些纷繁错杂的、在实际项目中才能历练出来的各种解决问题的能力以及遇到各种诡异问题的经验的积累还是非常重要的。因为事实上开发工作很多内容就是这些：救火。并且，我也在反复强调，这确实是在比较真实的项目中才能遇到的。比如，我们在平时做自己的项目的时候，我们很少接触百万级或者千万级的数据。而在给别人做项目的时候就会有这些问题。那么性能的问题，内存，带宽这些都会显现出来。我本身就很崇尚实用主义，在实际项目中去学习一些东西对我来说确实非常的适合。</p>","fields":{"slug_without_date":"/e8aea9e4bda0e79a84e7949fe6b4bbe58fafe5a48de794a8"}},{"id":"765dae0e-f602-54e7-a4e1-631eac0e7930","frontmatter":{"title":"\"JAVA的命运\"","date":"2011 March-31"},"html":"<p>原文 <a href=\"https://www.programmer.com.cn/5200/\">https://www.programmer.com.cn/5200/</a></p>\n<blockquote>\n<p>语言更复杂后就会消失吗？不会。我认为C++早已超越了它的复杂度极限，但还是有很多人用它编程。可这实际上是逼人们只使用其中一个子集。所以我认识的每个用C++的公司都说：“对，我们用C++，但是用的是多继承，不用操作符重载。”有很多功能你完全不用，因为使用它们会造成代码太复杂。即使不得不用那些功能，我认为也实在没什么好处。那样的话，程序员就读不懂别人的代码，也就不存在“程序员的可移植性”了。</p>\n</blockquote>\n<p>是啊，C++的复杂度已经过于高了，让人觉得它真的不只是一个语言了。到现在我都没有很好的去用过C++。</p>\n<p>C吧，其实也用过，我不喜欢这语言的最大原因就是它太麻烦了。C++呢...唉，前几天有同学还给我说C++已经够强大了啊，STL就够了...我的天，好吧，真的是我懒好吧？我觉得有STL的C++与C相比那是巨大的提升，但是与C# JAVA相比真的没什么，它有的别的语言都有，顶多打个平手而已。不过boost确实有打破僵局的意味，不过我对C++是外行，我还是不要多嘴了。现在甚至连JAVA都有些讨厌了，总是它有一个那么庞大的类库，可是还是不能满足许多基本的需要。什么字符串匹配啊，html实体替换啊，这些真的真的都算是非常基本的内容了。可是JAVA没有。你要么去网上找一些JAR，要不就要自己写。这两种方法都会大大降低代码的可理解性。C就更不用提了，没有垃圾回收机制，极小的类库，让你真的无从下手。好在JAVA有个Apache，commons的强大让我对JAVA重新燃起了热情，但还是不够， 懒惰的程序员真的是一个单词都懒得拼写，python的简洁让我着迷。</p>\n<p>也可能是我对这些内容还不够了解吧？希望进一步的探索能有所突破。</p>\n<blockquote>\n<p>Bloch：我想说得更深入一些。我认为Java是现有语言中最好的。但有趣的是，现在很流行谈Java是否即将死去。我觉得这基本上是扯淡。我认为现在最好的多线程构件就在Java里。我认为Java将迎来复兴。我不是说它是未来20年内最先进的，也不是说它是处理多核的最好方式。但是我认为从现有的东西来看，我们是足以傲视同侪的。</p>\n</blockquote>\n<p>我现在有向python发展的趋势，因为与java相比它更简洁，有更多的内嵌的方法可以省去很多开发那种功能函数的时间，如in，not in这些用起来都太舒服了，我真的很喜欢这样的语法。尤其是list comprehension真的是太优雅了，我真的很痴迷这个。更快的实现自己的想法真的让人心旷神怡。</p>","fields":{"slug_without_date":"/javae79a84e591bde8bf90"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":37,"pageCount":38}}},"pageContext":{"limit":3,"skip":108}},"staticQueryHashes":[]}