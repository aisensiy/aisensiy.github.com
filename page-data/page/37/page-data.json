{"componentChunkName":"component---src-templates-blogs-js","path":"/page/37/","result":{"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"ea4c9bbf-82f1-568d-81bf-521bcb8bda98","frontmatter":{"title":"读书笔记|Practices of an Agile Developer 2: 1 + 1 要大于 2","date":"2013 March-07"},"html":"<p>距离上一篇有关这本书的读书笔记已经有相当长的时间了（大约有两年）。两年过去了，我由一个宿舍换到了另外一个宿舍，还是在过着自己相对封闭的学习生活，虽然感觉不是最优状态，但是起码还不错吧。</p>\n<p>这次写读书笔记的时候，其实整本书都已经看完了。这次是托豆瓣阅读的福，我可以在 touch 上面看完了中文版。可能是由于我一直对译本有歧视，虽然看的很快，但是不会视书中文字如真理，还会带着怀疑去翻阅原著，不过事实证明，这本书的翻译还是很不错的，看起来整体来说也比较的顺畅。</p>\n<h2 id=\"沟通的成本\" style=\"position:relative;\">沟通的成本<a href=\"#%E6%B2%9F%E9%80%9A%E7%9A%84%E6%88%90%E6%9C%AC\" aria-label=\"沟通的成本 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>当项目由一个人变成两个人的时候，项目就会有所谓的沟通的成本了（这个说法应该是在人月神话里面知道的）：首先，需要向新加入的人说清楚要做的东西是什么，为神马要做这个东西，以及怎么做的，现在处于什么状况了，然后你要做什么事情。随着人员的增加，这种说明以及规约的打成，方向的指定都便成了越发复杂的东西了。为了避免重复的工作或者是错误的理解，及时的不断的沟通是非常有必要的。书中讲解了一些策略，可以帮助团队更好的处理这些事情。</p>\n<h2 id=\"立会\" style=\"position:relative;\">立会<a href=\"#%E7%AB%8B%E4%BC%9A\" aria-label=\"立会 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>沟通是为了更好的工作，不能舍本逐末，让沟通花费了工作的时间。站着开会差不多就是为了让大家觉得不自在，赶紧开完走人，避免浪费时间。</p>\n<blockquote>\n<p>To help keep the meeting focused, everyone should limit their contribution to answering these three questions:</p>\n</blockquote>\n<blockquote>\n<p>• What did I achieve yesterday?</p>\n</blockquote>\n<p>• What am I planning to do today?\n• What’s in my way?</p>\n<blockquote>\n<p>Each participant is given only a short amount of time to talk (about two minutes). You may want to have a timer to help those of us who have the tendency to ramble. **If you want to discuss something in greater detail, then get together with the appropriate people after the stand-up meeting **(it’s OK to say, “I need to talk to Fred and Wilma about the database” during the meeting; just don’t start going into the details).</p>\n</blockquote>\n<p>花些时间彼此了解进度一直遇到的难题，如果会上恰好有人在你越到的问题方面有研究那太好了，你可以在会后请教他可以快速的解决问题。注意，这里要强调把那些具体而细节的东西在会后单独搞定，拖累不相干认识开会是很多会议无聊的关键所在。</p>\n<h2 id=\"发挥集体智慧\" style=\"position:relative;\">发挥集体智慧<a href=\"#%E5%8F%91%E6%8C%A5%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7\" aria-label=\"发挥集体智慧 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>We mentioned Aristotle’s quote earlier: “It is the mark of an educated mind to be able to entertain a hought without accepting it.” You are entertaining thoughts and perspectives of others, and in the process you broaden yours.</p>\n</blockquote>\n<p>很多 lead 都不懂这个，让下属变成按照他们意愿行事的工具，这样是可悲的。更可悲的是很多人就这么听之任之。每次这个世界陷入混乱都是因为太多没有个人主见的人对那些疯子听之任之。事实上，作为一个独立的思考体，每个人都有自己的意愿和偏好，虽然需要达到意见的一致，但是起码的看楼歪了赶紧叫停的能力是要有的吧。发挥团队的优势一方面是要鼓励各种看法，另一方面是队友们要多多提出自己的想法，不能因为一次的受挫就放弃，这也是自己提升在团队中的作用的一个好方法。</p>\n<h2 id=\"其实沟通不简单\" style=\"position:relative;\">其实，沟通不简单<a href=\"#%E5%85%B6%E5%AE%9E%E6%B2%9F%E9%80%9A%E4%B8%8D%E7%AE%80%E5%8D%95\" aria-label=\"其实沟通不简单 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>书中是有很多好的方法可以提升沟通的效果，但是需要一个比较根本的东西，就是对所做事情的认可。找到比较合适的人最关键。沟通不畅，项目受阻很多时候都是一些乌七八糟说不清楚的原因，彼此有隔阂神马的都不好摆到台面上。尤其是在中国，一个人一条龙，一群人一条虫，精明不用在正路上，人多嘴杂，人多事儿多，乌烟瘴气神马的就来了。</p>\n<p>当忽悠一个人加入你的团队的时候，需要告诉他你做的东西是什么，以后什么前景，最终可以有什么回报等等等等。如果一切顺利的话，太好了，这很有可能是个好队友。但是如果他满怀质疑的听完之后，看似波澜不惊的背后有一万只羊驼在奔腾，那以后的分歧（或者说根源在分歧的问题）就会以各种形式接踵踏来。当然，由一个人变成两个人其实出现这种事情的概率比较小，因为他如果不喜欢你的东西，完全可以拒绝，处于最初阶段的东西大家都是因为喜欢做才在一起的，不喜欢完全可以不加入呀。但是如果你是一家公司，邀请一位新的同事加盟，那么他可能考虑种种因素最后决定即便是不喜欢你（们）做的东西，但是也希望在这里干一段时间。那么，坑爹的事情可能就开始了。干活的人不赞同操蛋的指挥，指挥的人容忍着操蛋的执行，进度变慢，环境变差，梦想破灭神马的都不好说。那种齐心协力的感觉是一种势，如果大势已去，那很有可能就无力回天了。</p>\n<p>我一直都比较反对目前很多公司的那种面试形式：彼此素未平生，凭很短时间的了解，然后就决定他是否要来这家公司。这实在是太不靠谱了，而且有些面试的内容也确实无聊，须知路遥知马力日久见人心。虽然话是这么说的，但是人家确实不能说花个一年半载的去面试一个人。我比较喜欢的形式是先不要太高的要求可以让你去一家公司实习，然后根据他几个月来的表现来判定这个人的水平。（但是，悲剧的是一些公司把实习生变成了廉价劳动力，不论表现如何从来就没有正式的打算让人家转正的意愿。）我觉得好的团队未必是说要找非常厉害的人，应该是找志同道合的人。大家彼此说的来，项目的问题容易沟通，才是关键。对于技术的把握，并不是关键因素。</p>\n<p>不过，我还有更极端的想法。目前的基础设施越发的发达，依靠很多人才能做一件事情的时代慢慢会过去，看看 <a href=\"https://www.kickstarter.com/\">kickstarter </a>上面的项目，很多独立的团队已经在做过去庞大的公司才能做的事情。依赖更清晰的分工以及社会化生产，设计芯片的人只需要做设计，而把生产交给别人。构建应用的人依赖 GAE 这样的平台较少设备维护以及基础设施维护的成本，更专注于自己的产品（<a href=\"https://www.csdn.net/article/2013-03-06/2814372-paas-appengine-user-case\">PaaS正能量：6人团队，仅1人全职后端 支撑6000万用户</a>，刚刚看到一篇应景的文章）。人越多，沟通成本越大，酱油出现的概率越多，项目的发展越发难以估计。控制团队的规模并让自己保持团队的成长，没准儿是未来的趋势。</p>\n<blockquote>\n<p>得出的结论很简单：如果一个 200人的项目中，有 25 个最能干和最有开发经验的项目经理，那么开除剩下的 175 名程序员，让项目经理来编程开发。 --人月神话</p>\n</blockquote>\n<p>要的就是这种效果。</p>","fields":{"slug_without_date":"/1_plus_1_gt_2"}},{"id":"5ceefb80-d0e6-581f-af92-75967a3f0dac","frontmatter":{"title":"hash 以及 bloom filter","date":"2013 February-19"},"html":"<p>一直实用 hash 这种结构，原理是知道的，具体的算法也了解，可是学完数据结构之后就差不多再也没有实现过这个数据结构了。借前一阵子接触 bloom filter 的机会在整理一下有关 hash 的内容。</p>\n<p>hash 是将内容编码然后存储在 array 结构中，以便于在 O(1) 复杂度内获取的数据结构。其关键部分在于如何生成一个足够随机的编码以及如何解决冲突。解决冲突虽然有很多方法，但是我觉得链接法应该是最为广泛是实用的方法吧，概念简单，便于接受。至于如何生成 hash 的 哈希函数就是五花八门了。这个应该根据对于冲突的敏感程度以及算法的复杂度综合考虑比较好吧。不过 MD5 应该算是个很不错的算法了，而且是比较通用的。这里我介绍下一个字符串生成哈希的函数，EFLHash。<!-- more --></p>\n<p>google 一下，会发现相关内容还挺多的，在很多的技术博客中都出现了。不过仔细一看会发现大家差不多都是抄来抄去的状态，厚道的会说是转的，不厚道的一字不提。code 直接粘贴估计自己都不知道贴的是什么，一些 code 有错误就都错的一样。这样的技术博客内容即便再多也意义不大，纯粹费电，博客的第一读者是自己，直接 copy 是自欺欺人。</p>\n<p>看了一些哈希函数的写法，大概的意思差不多就是尽量把所有信息都考虑在内以尽量减小相似内容的冲突。比如 'abc' 与 'abd'，如果仅仅考虑前两个字母而不考虑第三个，那么冲突的可能性会大很多。在算法导论中提到对于字符串这样的内容，可以把它看作是一个超大的数字，然后以对数字的方式根据 hash 桶的个数计算其所在的桶。那么 EFLHash 的思想也是类似的。在下面的代码中，我会给予注释表述其思想。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 这就相当于在构造一个 16 进制的大整数，每次加新的数字前进位 */</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 但是一个整型最多就 32 位，如果再往左进位，高位就会丢失。那么，\n           就要考虑把高位的数字与低位的做异或运算保存下来 */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf0000000L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hash <span class=\"token operator\">^=</span> x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* 既然高位数字以及放在低位异或了，那么就可以把高位制空 */</span>\n            hash <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* 最后为了返回给有符号整数，把最高位制零，如果你返回的是无符号数，\n       那就忽略这行 */</span>\n    hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7fffffffL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我觉得只要这种思想掌握了，那就不会觉得这种代码很诡异了，可以自己做一些修改，以适应各种场景。</p>\n<p>然后，核心的算法有了，那么基于链接法解决冲突的 hash 数据结构就可以有了。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LEN</span> <span class=\"token expression\"><span class=\"token number\">39</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf0000000L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hash <span class=\"token operator\">^=</span> x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            hash <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7fffffffL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 这是我们的核心数据结构，其实就是链表的节点 */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> node<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 初始化一个节点，设置字符串为空，next 指针指向 NULL */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    point<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n    point<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 创建一个新的节点并初始化 */</span>\nnode <span class=\"token operator\">*</span><span class=\"token function\">node_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    node <span class=\"token operator\">*</span>point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token function\">hash_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash_delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建一个新的 hash 数据结构，桶的个数为 LEN */</span>\nnode<span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token function\">hash_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>LEN <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 添加一个新的元素 */</span>\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>current<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>base<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 首先检查这个元素是否已经存在了，如果存在就不必再次添加 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> LEN<span class=\"token punctuation\">;</span>\n    prev <span class=\"token operator\">=</span> current <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 冲突总会有的，要把冲突的情况考虑在内 */</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        prev <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n        current <span class=\"token operator\">=</span> current<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    tmp <span class=\"token operator\">=</span> <span class=\"token function\">node_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tmp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>prev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 在 hash 结构中找一个元素是否存在 */</span>\nnode<span class=\"token operator\">*</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>current_node<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> LEN<span class=\"token punctuation\">;</span>\n    current_node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>current_node<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> current_node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 删除已有的元素 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">hash_delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>current_node<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tmp<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    index <span class=\"token operator\">=</span> hash <span class=\"token operator\">%</span> LEN<span class=\"token punctuation\">;</span>\n    current_node <span class=\"token operator\">=</span> prev <span class=\"token operator\">=</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>current_node<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current_node <span class=\"token operator\">==</span> root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> current_node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>current_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        prev <span class=\"token operator\">=</span> current_node<span class=\"token punctuation\">;</span>\n        current_node <span class=\"token operator\">=</span> current_node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 一点点测试 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>test1 <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>test2 <span class=\"token operator\">=</span> <span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">;</span>\n    node <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n    node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token function\">hash_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">hash_find</span><span class=\"token punctuation\">(</span>test2<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">hash_add</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    r <span class=\"token operator\">=</span> <span class=\"token function\">hash_delete</span><span class=\"token punctuation\">(</span>test1<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>hash 结构的操作就是那么结构，添加，查找，删除，如果考虑的再多一点，应该有一个销毁整个结构的函数，这里就不写了。</p>\n<p>在你需要频繁查找某个元素是否在一个集合的时候，hash 是一个比较理想的结构。因为它的理想查找复杂度是 O(1)。但是它有一个问题，就是 hash 内部实际上还是存储了整个数据内容（比如上面的代码里面，依然把字符串保存了下来），那么这就会导致比较大的内存开销。想想一下，如果你的这个集合很大，比如有 1 百万，每个字符串占20个字节，那么你就需要 2O M 空间了，而且，其实 hash 为了避免冲突，不希望桶的个数太接近实际数据的个数。其空间可能会开到 30M 甚至 40M。其实这已经是很大的开销了（我不想举例子说有什么一个亿，来说明这个开销不能承受，我只是觉得应该实际一点，一百万我觉得还是可能有的，比如你做个爬取数据的程序，而你的VPS只有512M内存，你又有其它的程序在跑，你不想因为一个爬虫就把你VPS的内存都吃了）。</p>\n<p>那么，这里 bloom filter 来了。这个数据结构的思想也非常的简单。它想用hash值来代表一个数据，然后只保存这个hash值。我通过hash值就可以判断这个元素到底是有还是没有，那不就省空间了么？ 但是这里问题也很明显：一个hash值很容易出现冲突啊，如果冲突了，那我岂不是很容易误伤其他没有在这个集合的元素？那我可以弄多个哈希函数啊，我弄一个哈希函数冲突的概率比较大，那我弄八个呢？冲突的概率是不是小的几乎可以忽略了呢。这就是 bloom filter 的核心想法：用多个哈希结果代表这个元素存储下来。每次通过检查这些哈希函数的结果判断该元素是否属于这个集合。</p>\n<p>下面大概的描述一下 bloom filter 的具体结构。bloom filter 是一个比较大的，连续的内存空间。假设我的集合有 1000000 个元素，我建立一个 1000000 字节(1M)的空间。把它作为一个一百万位的 0 1 bit 空间，并在初始化的时候全部制零。同时，我准备 8 个可以把元素映射到 0 - 999999 的哈希函数。每来一个新的元素，我用这 8 个哈希函数计算出 8 个哈希值，并把这 8 个哈希值对应的 bit 位制为 1。那么，当判断一个元素是否存在的时候，需要保证这 8 个比特位全部为 1。</p>\n<p>如此一来，我们就不需要保存原始数据了，存储空间由 20M 变成了 1M，还是很划算的。</p>\n<p>我看别人的技术博客也差不多是先看别人的代码，如果代码看懂了就不看大段大段的文字了，下面我依然把自己写的代码贴出来，希望可以避免看到的人再看我写的拙急的文字...</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CHAR_BIT</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WORD_SIZE</span> <span class=\"token expression\"><span class=\"token number\">32</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TRUE</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FALSE</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SETBIT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span>CHAR_BIT<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>CHAR_BIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">GETBIT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span>CHAR_BIT<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>CHAR_BIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hashfunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">bloom</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> char_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>container<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> nearest_bit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> func_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>seeds<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 注意，我这里给的不是一堆hash函数，而已hash函数里面的一个参数 */</span>\n<span class=\"token punctuation\">}</span> Bloom<span class=\"token punctuation\">;</span>\n\nBloom <span class=\"token operator\">*</span><span class=\"token function\">bloom_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> char_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> func_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">bloom_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 生成多个hash值的关键在于传递给这个函数的 k 值的区别。这个方法是算法导论里面的乘法\n   生成 hash 的部分提到的，去那里看比较靠谱，我说不清楚啊 o_o */</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token function\">multi_hash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bit_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>WORD_SIZE <span class=\"token operator\">-</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bit_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">nearest_bitsize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span>    x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf0000000L</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hash <span class=\"token operator\">^=</span> x <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n            hash <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    hash <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7fffffffL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* >min &lt; max */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">randint_in_range</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">generate_hash_seed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> seed <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>seeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">randint_in_range</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       seed <span class=\"token operator\">=</span> seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> seeds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Bloom <span class=\"token operator\">*</span>bloom <span class=\"token operator\">=</span> <span class=\"token function\">bloom_create</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bloom_add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">,</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">,</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy1\"</span><span class=\"token punctuation\">,</span> bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nBloom <span class=\"token operator\">*</span><span class=\"token function\">bloom_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> char_size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> func_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">;</span>\n\n    Bloom <span class=\"token operator\">*</span>bloom <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bloom<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Bloom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>char_size <span class=\"token operator\">=</span> char_size<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> char_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* set all char to 0 */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> char_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bloom<span class=\"token operator\">-></span>container<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    bit_size <span class=\"token operator\">=</span> char_size <span class=\"token operator\">*</span> CHAR_BIT<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>nearest_bit <span class=\"token operator\">=</span> <span class=\"token function\">nearest_bitsize</span><span class=\"token punctuation\">(</span>bit_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* 这里的最大值与最小值也是与生成 hash 函数有关，建议去看算法导论 */</span>\n    max <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>WORD_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    min <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>WORD_SIZE <span class=\"token operator\">-</span> bloom<span class=\"token operator\">-></span>nearest_bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    bloom<span class=\"token operator\">-></span>func_size <span class=\"token operator\">=</span> func_size<span class=\"token punctuation\">;</span>\n    bloom<span class=\"token operator\">-></span>seeds <span class=\"token operator\">=</span> <span class=\"token function\">generate_hash_seed</span><span class=\"token punctuation\">(</span>func_size<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> bloom<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">bloom_add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bit_size <span class=\"token operator\">=</span> bloom<span class=\"token operator\">-></span>char_size <span class=\"token operator\">*</span> CHAR_BIT<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 用这 N 个哈希函数生成哈希值 */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bloom<span class=\"token operator\">-></span>func_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        position <span class=\"token operator\">=</span> <span class=\"token function\">multi_hash</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> bloom<span class=\"token operator\">-></span>nearest_bit<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position: %d\\n\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SETBIT</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>container<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position end\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">bloom_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> Bloom<span class=\"token operator\">*</span> bloom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">;</span>\n\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">ELFHash</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bit_size <span class=\"token operator\">=</span> bloom<span class=\"token operator\">-></span>char_size <span class=\"token operator\">*</span> CHAR_BIT<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 通过检查这 N 个哈希值来判断元素是否存在 */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bloom<span class=\"token operator\">-></span>func_size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        position <span class=\"token operator\">=</span> <span class=\"token function\">multi_hash</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>seeds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> bloom<span class=\"token operator\">-></span>nearest_bit<span class=\"token punctuation\">,</span> bit_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position: %d\\n\"</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GETBIT</span><span class=\"token punctuation\">(</span>bloom<span class=\"token operator\">-></span>container<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position end\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这种算法类的东西，我描述起来很是拙急啊。感觉说的不够明白 o_o。这里给点参考吧。</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/jcwkyl/article/details/4088436\">10个经典的字符串hash函数的C代码实现</a> 这个 EFLHash 应该是有点问题，仔细看～</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Bloom_filter\">Bloom Filter</a></li>\n<li>数学之美，布隆过滤器</li>\n</ul>","fields":{"slug_without_date":"/hash-e4bba5e58f8a-bloom-filter"}},{"id":"62e5e3b0-1f57-51f4-abae-76a80d9a7906","frontmatter":{"title":"CSS 实现的小三角","date":"2013 February-13"},"html":"<p>在家待了快两周了，又进入了半死的状态。来写篇 blog 振奋下精神吧。</p>\n<p>昨天在做一个类似与 weibo 上评论的东西，在点击评论按钮后会显示评论框。而这个评论框在它的右上角会有一个小三角与评论按钮相呼应。</p>\n<p>之前在一本书里面见过，（这本书似乎是台湾人写的，当时觉得它讲的特别相近，不过有些年头了，都忘记它叫什么了，刚才在豆瓣上用 CSS 的关键词找了下，也没找到。），是采用 0 宽度， 0 高度用厚边框挤压出来的三角形。就是说，当对一个 0 空间的元素给予一个很厚的边框的时候，那么四个方向(top left right bottom)的边框会相互挤压，变成三角形！那么，对三个方向的边框给予透明 transparent，而给予另一个方向的边框一个可见色，那三角形就大功告成了！<!-- more --></p>\n<p>代码：<a href=\"https://jsbin.com/opahum/5/edit\">JS Bin</a></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>utf-8</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>JS Bin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arrow-up<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n[/code]\n[code lang=\"css\"]\n.arrow-up {\n  position: relative;\n  left: 95%;\n\n  height: 0;\n  width: 0;\n  border-width: 7px;\n  border-color: transparent;\n  border-style: solid;\n  border-bottom-color: #f1f1f1;\n}\n\n.content {\n  height: 100px;\n  background-color: #f1f1f1;\n}</code></pre></div>\n<p>不过这里有个问题，可以看的出来，在微博里面，人家的那个小三角是有边框的！</p>\n<p>加上边框，就瞎了吧。这里，在 bootstrap popover 的代码来看到了它的神方法：用两个小三角叠加出边框的效果！一个三角为边框颜色，另一个三角为背景颜色覆盖在上面。且第二个三角的位置稍微向下，一方面可以显示出三角形的边框，另一方面可以覆盖三角下面矩形的边框部分。</p>\n<p>代码：<a href=\"https://jsbin.com/opahum/4/edit\">JS Bin</a></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.arrow-up, .arrow-up:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 7px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.arrow-up</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 93%<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">border-bottom-color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* border-color */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.arrow-up:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* overlay */</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -7px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -6px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* and show 1px */</span>\n  <span class=\"token property\">border-bottom-color</span><span class=\"token punctuation\">:</span> #f1f1f1<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* background-color */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.content</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f1f1f1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid gray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后附上一个用 CSS 做小三角的网站 <a href=\"https://apps.eky.hk/css-triangle-generator/\">https://apps.eky.hk/css-triangle-generator/</a></p>","fields":{"slug_without_date":"/css-e5ae9ee78eb0e79a84e5b08fe4b889e8a792"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":37,"pageCount":47}}},"pageContext":{"limit":3,"skip":108}},"staticQueryHashes":["26522286"],"slicesMap":{}}