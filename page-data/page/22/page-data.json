{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/22",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"620e7339-0b0f-566b-b87e-2dad80c4705f","frontmatter":{"title":"在 Spring Boot 1.5.3 中进行 Spring MVC 测试","date":"2017 May-04"},"html":"<p><a href=\"/spring-boot-get-started\">上一篇文章</a> 介绍了我从 Jersey 切换到 Spring Boot 的一些原因，虽然伴随着一些无奈，但是还是对 Spring Boot 充满了信心。但是在学习的过程中我也发现了一些问题。</p>\n<p>首先，我发现 Spring Boot 的版本更迭非常的快，而不同的版本的很多语法和支持都有一定的区别，当遇到一个问题去 stackoverflow 搜索的时候经常会发现不同版本的解决方案，弄得我很是苦恼。（真是找到了用 npm 的感觉，每次升级包都会出问题。每到这个时候就念到了 rails 的好，一个成熟的、稳定、合理的生态体系是多么的重要！）。在这里我明确的在标题里提到了我所使用的版本 <code>1.5.3</code> 也希望 Spring Boot 在之后能够尽量的保持各个版本的一致性。</p>\n<p>其次，Spring 官网提供了太多的 Getting Started 比如<a href=\"https://spring.io/guides/gs/rest-service/\">这个</a>或者是 Hello World 的示例。这些示例真的是太太太简单了，完全没办法作为学习的材料（再次强调，能不能看看人家 Rails 官方的 Guide 呀），而去其他地方搜索的内容又大多是过时（因为版本更迭快呀）的内容。所以我这里也希望尽量覆盖更全的场景，使得这里的内容可以作为实际开发中的参考。</p>\n<blockquote>\n<p><strong>注意</strong> 这里所展示的测试的例子是对 RESTful API 的测试，在前后端分离，构建微服务的今天，我们在 Spring MVC 中做模板渲染的情况越来越少了了，我们主要处理的是 JSON 数据：我们的输入不是传统的表单数据而是 JSON，我们的输出不再是 HTML 而是 JSON。</p>\n</blockquote>\n<p>测试的重要性在 ThoughtWorks 是老生常谈了，但实际上并不是所有的团队都会在写代码的同时写测试，在看到大量的 Spring Boot 的文章和代码的时候居然很难找到一个完整的、包含着测试的项目，真是恐怖。不过做了一些 search 之后我发现 Spring Boot 目前的测试真的是非常的简单，和 Jersey 比的话那真是好的太多了。一个基本的、纯粹的 Spring MVC 的测试长如下的样子，这里涉及多个例子，我会一点点做介绍。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersApiTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        userRepository <span class=\"token operator\">=</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MockMvc</span> mockMvc <span class=\"token operator\">=</span> <span class=\"token class-name\">MockMvcBuilders</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">standaloneSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UsersApi</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">setControllerAdvice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomizeExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2]</span>\n        <span class=\"token class-name\">RestAssuredMockMvc</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockMvc</span><span class=\"token punctuation\">(</span>mockMvc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_empty_user_lists_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// [4]</span>\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n        <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n            <span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_create_user_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> createUserParameter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>createUserParameter<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_400_error_message_with_wrong_parameter_when_create_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> wrongParameter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>wrongParameter<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fieldErrors[0].field\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [5]</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fieldErrors.size()\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_one_user_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">standaloneSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserApi</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/{userId}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [6]</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"links.self\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/\"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上的代码包含了四个测试用例，测试内容如下：</p>\n<ol>\n<li><code>GET /users</code> 获取用户列表</li>\n<li><code>POST /users</code> 用合法的参数创建一个用户，返回创建成功</li>\n<li><code>POST /users</code> 用非法的参数创建一个用户，返回参数错误信息</li>\n<li><code>GET /users/{userId}</code> 获取单个用户的信息</li>\n</ol>\n<p>下面我按照对代码中标注的点一个个做解释：</p>\n<ol>\n<li>老版本的 <code>SpringJUnit4ClassRunner</code> 被替换为更容易阅读的 <code>SpringRunner</code>，在 stackoverflow 中会找到大量的 <code>SpringJUnit4ClassRunner</code> 对我这种刚接触的人来说真是带来了很多的困惑。另外，我们在这里并没有使用一个 <code>SpringBootTest</code> 的注解，SpringBootTest 是只有需要一个比较完整的 Spring Boot 环境的时候（比如需要做集成测试，启动 <code>EmbeddedWebApplicationContext</code> 的时候）需要。而我们这里仅仅通过单元测试就可以完成任务了，这样的好处是可以大大提升测试的速度。</li>\n<li><code>MockMvcBuilders</code> 是 Spring MVC 提供的一个 mock 环境，使我们可以不启动 HTTP server 就能进行测试。这里我们通过 <code>standaloneSetup</code> 的方法创建我们要测试的 <code>UsersApi</code> 并且通过 <code>setControllerAdvice</code> 添加错误处理的机制。有关 <code>ControllerAdvice</code> 做异常处理的内容我们会在后面的文章中介绍。</li>\n<li>我们在 <code>build.gradle</code> 引入了 <a href=\"https://rest-assured.io/\">rest assured</a> 的两个包用于 json 的测试，我们通过这个语句将所创建的 mock mvc 提供给 rest assured。</li>\n<li>使用了 rest assured 的测试可读性大大的增强了，这里就是检查了请求所获取的 <code>status code</code>，实际的项目中可能需要做更详细的 json 内容的测试</li>\n<li><code>body(\"fieldErrors[0].field\", equalTo(\"username\"))</code> 这种直接读取 json path 的测试方式相对将 json 转化成 map 再一点点的读取字段来说真是方便的太多，有关这种测试的其他内容详见 <a href=\"https://github.com/rest-assured/rest-assured/wiki/Usage\">rest assured 官方文档</a></li>\n<li>这里是一个包含动态 url 的例子，其使用方式和在 Spring MVC 中使用 <code>PathVariable</code> 类似</li>\n</ol>\n<p>大多数情况下，通过 <code>standaloneSetup</code> 的方式就可以对 <code>Controller</code> 进行有效的单元测试了，当然 <code>MockMvcBuilders</code> 也可以引入外部的 <code>ControllerAdvice</code> 对错误处理进行测试。加上 <em>rest assured</em> 测试 json api 真是简单了太多了。不过这里并没有覆盖 filter 的测试，后面的有关安全的文章会补上。</p>\n<p>最后附上项目所使用的 <code>build.gradle</code>，完整的项目内容可以在 <a href=\"https://github.com/aisensiy/demo-for-springmvc-and-mybatis\">Github</a> 找到。</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\">// build.gradle</span>\nbuildscript <span class=\"token punctuation\">{</span>\n    ext <span class=\"token punctuation\">{</span>\n        springBootVersion <span class=\"token operator\">=</span> <span class=\"token string\">'1.5.3.RELEASE'</span>\n    <span class=\"token punctuation\">}</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    dependencies <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">classpath</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"org.springframework.boot:spring-boot-gradle-plugin:<span class=\"token expression\"><span class=\"token punctuation\">$</span><span class=\"token punctuation\">{</span>springBootVersion<span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'java'</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'eclipse'</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'org.springframework.boot'</span>\n\nversion <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.1-SNAPSHOT'</span>\nsourceCompatibility <span class=\"token operator\">=</span> <span class=\"token number\">1.8</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.flywaydb:flyway-core'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"org.springframework.boot:spring-boot-starter-hateoas\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.h2database:h2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:1.3.0'</span><span class=\"token punctuation\">)</span>\n    testCompile <span class=\"token string\">'io.rest-assured:rest-assured:3.0.2'</span>\n    testCompile <span class=\"token string\">'io.rest-assured:spring-mock-mvc:3.0.2'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug_without_date":"/spring-mvc-and-test"}},{"id":"331bcb58-4a71-5386-9b28-4404788a9b4b","frontmatter":{"title":"Spring Boot Getting Started","date":"2017 May-03"},"html":"<p>前一阵子去了联想的项目去做性能调优，顺便也正儿八经的接触了一下 spring boot 的体系（当然也使用了很多 spring cloud 的内容，这个以后再讲）。这里简单的对比一下它和我之前主要使用的 jersey 体系，讲一下我看到的它们两者之间的差异以及 spring boot 相比 jersey 的一些优势和个别的不足。</p>\n<p>再次回到 <code>spring</code> 的主题也是感慨万千，这让我想起来本科时候刚开始接触 web 开发的情况。那时候 <code>spring + hibernate + structs</code> 是 web 开发的主流框架。不过鉴于当时我自己水平有限，<code>spring</code> 的水平基本上提留在了 <code>Spring in Action</code> 前三章的水平。在经历了 PHP Python（Django），ruby（Rails），Jersey 之后又能回到 Spring 不得不说 Pivotal 旗下的 Spring 团队功不可没。Spring boot 自己的 Reference 所说的，Spring boot 给了开发者一个很好的 getting started 的体验并且并且了大量 xml 配置的实现方式，本来我以为之前我所看到的如此简洁的 <code>main</code> 只是因为是 demo 但是当我看到联想这边的生产代码也依然优雅的时候敬畏之心油然而生。</p>\n<h2 id=\"spring-拥有完备的生态体系\" style=\"position:relative;\">spring 拥有完备的生态体系<a href=\"#spring-%E6%8B%A5%E6%9C%89%E5%AE%8C%E5%A4%87%E7%9A%84%E7%94%9F%E6%80%81%E4%BD%93%E7%B3%BB\" aria-label=\"spring 拥有完备的生态体系 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>目前来看 Spring 的体系非常的完备，一方面其核心 DI 和 AOP 组件本来就是 java 语言的标配，再加上与各种持久化框架、模板引擎的完美整合已经称得上包罗万象。另一方面，微服务架构逐渐成为主流的今天，spring cloud 体系的构建也非常的及时，大量的组件解决了云环境、微服务的诸多问题。与 spring  强大的生态相比，jersey 作为一个纯粹的 web framework 来说实在是太无力了，并且其与其他模块的组合也显得捉襟见肘。jersey 自己采用一个叫做 <code>hk2</code> 的依赖注入框架，它用起来并不那么方便，在之前的多个项目中，我们甚至需要把 hk2 和 guava 的容器建立一个 bridge 才能让它们一起工作，需要大量的模板代码，我曾经试图把之前遗留的模板代码进行重构但由于担心影响到生产环境的稳定性最终还是放弃了。</p>\n<h2 id=\"jersey-的-sub-resource\" style=\"position:relative;\">Jersey 的 sub resource<a href=\"#jersey-%E7%9A%84-sub-resource\" aria-label=\"jersey 的 sub resource permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>当时和 Jersey 相比，Spring MVC 绝对是 spring 体系中的一个弱势。Jersey 实现了 <code>JAX-RS</code> 的标准，很明显这套标注的实现比 Spring MVC 的要好用，并且 jersey 中有一个非常重要的概念：sub resource，它允许一个 <code>url</code> 进行链式解析。比如下面的 url:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/users/1234/posts/123</code></pre></div>\n<p>可以理解为用户 <code>1234</code> 的 id 为 <code>123</code> 的文章。在 jersey 中，我们可以用一下的方式实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">//UsersApi.java</span>\n<span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersApi</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GET</span>\n    <span class=\"token annotation punctuation\">@Produces</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Context</span> <span class=\"token class-name\">UserRepository</span> users<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@GET</span>\n    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{userId}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getOneUserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span> \n                                 <span class=\"token annotation punctuation\">@Context</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserApi</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [2] </span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//UserApi.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserApi</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserApi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GET</span>\n    <span class=\"token annotation punctuation\">@Produces</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"posts\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserEvaluationsApi</span> <span class=\"token function\">userEvaluationsApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserPostsApi</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//UserPostsApi.java</span>\n<span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"projects\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPostsApi</span><span class=\"token punctuation\">.</span>java <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{postId}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProjectApi</span> <span class=\"token function\">getPostApi</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> postId<span class=\"token punctuation\">,</span>\n                                 <span class=\"token annotation punctuation\">@Context</span> <span class=\"token class-name\">PostRepository</span> postRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> postRepository\n                <span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserPostApi</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//UserPostApi.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPostApi</span><span class=\"token punctuation\">.</span>java <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Post</span> post<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserPostApi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Post</span> post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> post<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     \n    <span class=\"token annotation punctuation\">@GET</span>\n    <span class=\"token annotation punctuation\">@Produces</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> post<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上所示，四个类 <code>UsersApi</code> <code>UserApi</code> <code>UserPostsApi</code> <code>UserPostApi</code> 将整个流程切分成了四块，每个流程按照 url 逐步解析，其中：</p>\n<ol>\n<li><code>UsersApi</code> 为入口（EntryPoint），只有它拥有类级别的 <code>@Path</code></li>\n<li>当需要进行下一步的 url 处理时，可以主动创建 sub resource</li>\n<li>如果当前层次报错，则可以终止 url 的处理</li>\n</ol>\n<p>而 Spring MVC 则完全不支持这样的方式，和大多数 mvc 框架一样，它只能老老实实的按照 pattern 对整个 url 解析，不论是在处理 <code>/users/123</code> 还是处理 <code>/users/123/posts/1234</code> 都需要捕捉 <code>UserNotFoundException</code> 的异常。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">// UsersApi.java</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersApi</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UsersApi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userRepository <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> GET<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// UserApi.java</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/{userId}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserApi</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> GET<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">-></span> user<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// UserPostsApi.java</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/{userId}/posts\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserPostsApi</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PostRepository</span> postRepository<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{postId}\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> GET<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Post</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span>\n                        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"postId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> postId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> postRepository\n                <span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>postId<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>post <span class=\"token operator\">-></span> post<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PostNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"将-jersey-和-spring-boot-整合的尝试\" style=\"position:relative;\">将 jersey 和 spring boot 整合的尝试<a href=\"#%E5%B0%86-jersey-%E5%92%8C-spring-boot-%E6%95%B4%E5%90%88%E7%9A%84%E5%B0%9D%E8%AF%95\" aria-label=\"将 jersey 和 spring boot 整合的尝试 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前面已经提到了 spring 可以和很多其他的框架完美的结合，那么能不能让 jersey 和 spring boot 完美的结合在一起呢？这样的话既拥有了 spring boot 又能拥有 jersey 的 sub resource 的构建方式，一举两得呀。但现实给我泼了桶冷水。</p>\n<p>首先，Jersey 自成体系，想要和其他框架结合会产生一定的工程摩擦。Spring mvc 和 spring core 自然是很好的集成了的，但是 jersey 中自己的那个 hk2 依赖注入框架和 spring 就不能那么好的相处了。使用的时候只能将其全部换成 spring 的依赖注入方式。同时 spring mvc 有一个 mock mvc 测试体系，它大大加速的测试的速度，然而它仅仅支持 spring mvc。并且到目前为止，我都没有找到任何一个很好的测试 jersey 的方式，其自身的测试框架在 spring 体系下的结合实例我就没见到过，而其他 mock 的支持也没走通过。</p>\n<p>另一方面，spring 体系中 spring mvc 虽然在我看起来还是有很多的缺点，但是它遵循的是大量 web 框架的模式，比如 django 的 <a href=\"https://docs.djangoproject.com/en/1.11/topics/http/urls/\">url dispatcher</a> 比如 rails 的 <a href=\"https://guides.rubyonrails.org/routing.html\">routes</a> 都是类似的 url 映射模式。Spring MVC 同样是沿着 web 的发展趋势一路走来，作为一个历史悠久的框架自然也继承了大多数 web MVC 的特点，也应该会被更多的人所接受，实在是无可厚非。所以，我不知道我自己坚持使用 jersey 是不是会给项目中其他成员带来伤害。</p>\n<p>如下所示，jersey 的测试需要将整个 server 启动，采用 <code>RANDOM_PORT</code> 的方式进行测试。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span>RANDOM_PORT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersApiTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${local.server.port}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@MockBean</span>\n    <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RestAssured</span><span class=\"token punctuation\">.</span>port <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_empty_user_lists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aisensiy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>restassured<span class=\"token punctuation\">.</span></span>RestAssured</span><span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>而 spring mvc 的测试则可以使用 mock mvc 测试速度快，并且支持 <code>standaloneSetup</code> 模式，对单个 controller 进行测试。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersApiTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Before</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        userRepository <span class=\"token operator\">=</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRepository</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 只对 UsersApi 进行测试</span>\n        <span class=\"token class-name\">MockMvc</span> mockMvc <span class=\"token operator\">=</span> <span class=\"token class-name\">MockMvcBuilders</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">standaloneSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UsersApi</span><span class=\"token punctuation\">(</span>userRepository<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">setControllerAdvice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomizeExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token class-name\">RestAssuredMockMvc</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockMvc</span><span class=\"token punctuation\">(</span>mockMvc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_empty_user_lists_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n        <span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n        <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n            <span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，优雅的测试是重头戏，后面的文章中会介绍一些我自己发觉的测试的模式。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html\">Spring Web MVC framework</a></li>\n<li><a href=\"https://www.thoughtworks.com/radar\">工程摩擦力 engineering friction</a></li>\n<li><a href=\"https://jersey.java.net/documentation/latest/test-framework.html\">Jersey Test Framework</a></li>\n<li><a href=\"https://jersey.java.net/documentation/latest/jaxrs-resources.html\">Jersey Resources and Sub-Resources</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/1.11/topics/http/urls/\">Django url dispatcher</a></li>\n<li><a href=\"https://guides.rubyonrails.org/routing.html\">Rails routes</a></li>\n<li><a href=\"https://hk2.java.net/\">HK2</a></li>\n</ul>","fields":{"slug_without_date":"/spring-boot-get-started"}},{"id":"d4f8f5c3-ee33-5cd3-bb99-ae2b6dd0229c","frontmatter":{"title":"Python Data Science, NumPy 2","date":"2017 March-31"},"html":"<p>这篇文章延续<a href=\"/python-data-science-1\">Python Data Science, NumPy 1</a>，介绍广播、高级索引以及数组排序。</p>\n<h2 id=\"广播\" style=\"position:relative;\">广播<a href=\"#%E5%B9%BF%E6%92%AD\" aria-label=\"广播 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>广播是在长度不同的数组上执行 ufunc（例如，加法，减法，乘法等）的一组规则。</p>\n<p>对于大小相同的 NumPy 数组是逐个元素执行计算的：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">+</span> b\n<span class=\"token comment\"># array([5, 6, 7])</span></code></pre></div>\n<p>广播允许对不同大小的数组执行这些操作 - 例如，我们可以将一个标量（想象它是一个 0 维数组）和一个数组相加：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">+</span> <span class=\"token number\">5</span>\n<span class=\"token comment\"># array([5, 6, 7])</span></code></pre></div>\n<p>我们可以认为是这个操作首先把 5 转换为了数组 [5, 5, 5] 然后进行运算。NumPy 广播在实际运算中并没有这么做，但是我们可以借用这个思路来理解广播。</p>\n<p>当然，对于更高维的数组也是可以的：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nM <span class=\"token operator\">+</span> a\n<span class=\"token comment\"># array([[ 1.,  2.,  3.],</span>\n<span class=\"token comment\">#        [ 1.,  2.,  3.],</span>\n<span class=\"token comment\">#        [ 1.,  2.,  3.]])</span></code></pre></div>\n<p>一维数组 a 在第二维被拉伸（或者说是在第二维被广播）以便匹配 M 的维度。</p>\n<p>还有更复杂的情况：即两个数组各自广播后计算：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\na <span class=\"token operator\">+</span> b\n<span class=\"token comment\"># array([[0, 1, 2],</span>\n<span class=\"token comment\">#        [1, 2, 3],</span>\n<span class=\"token comment\">#        [2, 3, 4]])</span></code></pre></div>\n<p>事实上，NumPy 是严格按照一些规则进行广播运算的：</p>\n<ul>\n<li>规则1：如果连个数组的维度不同，那么维度较少的数组在自己当前维度的前面填充长度为 1 的维度。</li>\n<li>规则2：如果两个数组任意一个维度的长度不符，那么在这个维度上长度为 1 的那个数组在该维度上进行拉伸，即填充同样的数据以适应另一个数组。</li>\n<li>规则3：如果任意维度上长度不等，但两个数组在该维度的长度都不是 1，则报错</li>\n</ul>\n<p>下面用几个例子进行说明。</p>\n<h3 id=\"示例-1\" style=\"position:relative;\">示例 1<a href=\"#%E7%A4%BA%E4%BE%8B-1\" aria-label=\"示例 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nM <span class=\"token operator\">+</span> a</code></pre></div>\n<p>其中</p>\n<ul>\n<li>M.shape = (2, 3)</li>\n<li>a.shape = (3)</li>\n</ul>\n<p>按照规则 1 a 的维度少，在其前面补充维度：</p>\n<ul>\n<li>a.shape -> (1, 3)</li>\n</ul>\n<p>按照规则 2 第一维两者不同，所以对 a 进行拉伸：</p>\n<ul>\n<li>a.shape -> (2, 3)</li>\n</ul>\n<p>然后再进行相加。</p>\n<h3 id=\"示例-2\" style=\"position:relative;\">示例 2<a href=\"#%E7%A4%BA%E4%BE%8B-2\" aria-label=\"示例 2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>a.shape = (3, 1)</li>\n<li>b.shape = (3)</li>\n</ul>\n<p>按照规则 1 b 扩充维度</p>\n<ul>\n<li>b.shape = (1, 3)</li>\n</ul>\n<p>按照规则 2 长度为 1 的维度扩充：</p>\n<ul>\n<li>a.shape = (3, 3)</li>\n<li>b.shape = (3, 3)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">+</span> b\n<span class=\"token comment\"># array([[0, 1, 2],</span>\n<span class=\"token comment\">#        [1, 2, 3],</span>\n<span class=\"token comment\">#        [2, 3, 4]])</span></code></pre></div>\n<h3 id=\"示例-3\" style=\"position:relative;\">示例 3<a href=\"#%E7%A4%BA%E4%BE%8B-3\" aria-label=\"示例 3 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>M.shape = (3, 2)</li>\n<li>a.shape = (3)</li>\n</ul>\n<p>按照规则 1 扩充 a 的维度</p>\n<ul>\n<li>a.shape = (1, 3)</li>\n</ul>\n<p>按照规则 2 a 被拉伸</p>\n<ul>\n<li>M.shape = (3, 2)</li>\n<li>a.shape = (3, 3)</li>\n</ul>\n<p>然而此时两者的第二维没有一个为 1 但又不相当，按照规则 3 报错。</p>\n<h2 id=\"比较掩码布尔运算\" style=\"position:relative;\">比较、掩码、布尔运算<a href=\"#%E6%AF%94%E8%BE%83%E6%8E%A9%E7%A0%81%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97\" aria-label=\"比较掩码布尔运算 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>上一部分介绍了 NumPy 有很多向量化快速运算的 universal functions，但是只介绍了算术运算的那些 ufuncs 实际上还有很多布尔运算的 ufuncs。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>\n<span class=\"token comment\"># array([ True,  True, False, False, False], dtype=bool)</span>\nx <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n<span class=\"token comment\"># array([False, False,  True, False, False], dtype=bool)</span></code></pre></div>\n<p>可以看到这些运算的结果是一个布尔类型的长度相同的数组。布尔数组可以用于很多便捷的运算。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nnp<span class=\"token punctuation\">.</span>count_nonzero<span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 8</span>\nnp<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 8</span></code></pre></div>\n<p>其中 <code>np.count_nonzero</code> 可以用来计算 <code>True</code> 元素的个数，当然还可以用 <code>np.sum</code> 达到同样的目的，因为 <code>False</code> 会被认为是 0 而 <code>True</code> 会被转换为 1。</p>\n<p>还有一些其他类似的操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span>\nnp<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span></code></pre></div>\n<p>当然，这些运算都可以添加 <code>axis</code> 参数按照不同的轴进行运算。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([ True, False,  True], dtype=bool)</span></code></pre></div>\n<p><strong>注意</strong> Python 有内置的 <code>sum()</code> <code>any()</code> 和 <code>all()</code> 函数，它们和 NumPy 中的运算略有区别，尤其是在用于多维数组的情况。一定要确保自己用的是 <code>np.sum()</code> <code>np.any()</code> 以及 <code>np.all()</code>。</p>\n<p>处理基本的 <code>></code> <code>&#x3C;</code> <code>!=</code> <code>==</code> <code>>=</code> <code>&#x3C;=</code> 之外，还可以用 <code>&#x26;</code>（与） <code>|</code>（或） <code>^</code>（异或） <code>~</code>（否） 进行复合布尔运算。比如</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>inches <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>inches <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>就是 <code>inches > 0.5</code> 与 <code>inches &#x3C; 1</code> 的 <code>与</code> 操作。注意考虑到运算符的优先级，这里的两个括号是必须的。</p>\n<p>在前面的部分我们看到可以直接对布尔数组进行聚合。一个更强大的方式是使用布尔数组作为掩码来获取数据本身的特定子集。回到之前的 x 数组，假设我们想要一个数组中所有小于 5 的数据，我们可以这么做：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x<span class=\"token punctuation\">[</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>结果返回一个一维数组，其元素为满足条件式的所有数据；换言之获取的是所谓索引为 True 的元素。这些运算可以让我们轻易的获取想要的结果。</p>\n<h2 id=\"fancy-indexing\" style=\"position:relative;\">Fancy Indexing<a href=\"#fancy-indexing\" aria-label=\"fancy indexing permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Fancing indexing 的概念非常简单：用索引数组访问多个数组元素。举一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nrand <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>RandomState<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\nx <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [51 92 14 71 60 20 82 86 74 74]</span></code></pre></div>\n<p>如果我们想要访问其中三个元素，我们可以这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ind <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([71, 86, 60])</span></code></pre></div>\n<p>使用 fancy indexing 的时候，结果的形状与索引数组的形状（而不是原数组的形状）保持一致：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ind <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[71, 86],</span>\n<span class=\"token comment\">#        [60, 20]])</span></code></pre></div>\n<p>Fancy indexing 也支持多维数组，看下面这个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([[ 0,  1,  2,  3],</span>\n<span class=\"token comment\">#        [ 4,  5,  6,  7],</span>\n<span class=\"token comment\">#        [ 8,  9, 10, 11]])</span></code></pre></div>\n<p>和一般的索引类似，第一个索引对应行，第二个索引对应列：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">row <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncol <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nX<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([ 2,  5, 11])</span></code></pre></div>\n<p>我们可以把普通索引与 fancy indexing 一起使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">X<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([10,  8,  9])</span>\n\nX<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[ 6,  4,  5],</span>\n<span class=\"token comment\">#        [10,  8,  9]])</span></code></pre></div>\n<p>我们还可以把掩码和 fancy indexing 一起使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\nX<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[ 0,  2],</span>\n<span class=\"token comment\">#        [ 4,  6],</span>\n<span class=\"token comment\">#        [ 8, 10]])</span></code></pre></div>\n<h2 id=\"排序\" style=\"position:relative;\">排序<a href=\"#%E6%8E%92%E5%BA%8F\" aria-label=\"排序 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>np.sort</code> <code>np.argsort</code> 基本就是数组排序的全部内容了，NumPy 中的 np.sort 比 Python 的 sort sorted 要快的多。如果需要进行局部排序参见 <code>np.partition</code> 的内容，这里不在赘述了。</p>","fields":{"slug_without_date":"/python-data-science-2"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":22,"pageCount":44}}},"pageContext":{"limit":3,"skip":63}},
    "staticQueryHashes": []}