{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/22",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"3c9a865f-86b6-5001-a21a-7563d4443a3f","frontmatter":{"title":"最近 web 开发的一些想法","date":"2016 October-01"},"html":"<p>乱七八糟的 web 项目又做了有一阵子了，通过去探索和尝试各种好玩的框架和比较新的技术对目前很多东西有了更深的了解，这里写下一些最近的体会。</p>\n<p>在评价各种技术的好坏之前，是想要说清楚自己从什么方面去衡量一个技术的好与坏。个人认为从技术与商业的关系上，如果非要分开的话，那么技术是必要服务于商业。商业的决策的执行受制于诸多因素，当然技术也是其中的一个方面。技术的灵活和高效支持了商业的灵活与高效。假如让商业和技术彻底的分开各自作为一个黑盒，那系统的运作应该是每次商业的变化都需要技术随之变化并且尽量快的完成这个变化，也就是说，我们需要的是一种能力，这个能力就是让商业决策付诸实施的速度尽量快的能力。这就要求技术去 <strong>拥抱变化</strong>，能够快速的响应需求，响应变化。那么，在技术的选型上就会有一个非常重要的标准就是开发效率了：如何完成同一个功能所用的时间尽量的少，当然这不是建立的偷工减料的基础上。当然对于形形色色的指标还有很多，比如稳定性，比如可扩展性，比如可靠性，比如安全性。但这些指标在现在的技术体系中已经逐渐在变成类似于基础设施的东西了，暂不考虑。</p>\n<p>对比了一些主流的技术之后，如果从 get-started 的水平来讲，django ror 这样的框架非常的快。尤其是 rails 里面默认包含了当时 migration coffeescript scss 等等 web 开发的最佳实践，并有一个非常易于扩展的 plugin 体系，可以通过安装额外的 gem 就完成了一个个完善的功能。例如 <code>devise</code> 可以独当一面提供完整的用户系统，<code>active-admin</code> 则可以为软件提供一个完整的后台管理页面。如果是要做一个简单的项目的话，rails 绝对是最佳选择。最近的一个内部项目就需要快速的给财务的同学们搭建一个小的内部资产管理系统。通过 rails + active-admin +wice_grid 一周就搭建起来了这个体系，换用别的技术栈从头做起那简直是噩梦。</p>\n<p>但是，rails 这种后端渲染的应用没办法兼顾目前诸多 client 的问题。并且在目前的发展过程中，我当年所期望的 html 统一天下的情况果真在逐渐成为现实。Mobile 端的 React Native，桌面端的 Electron，虽然这并不代表一次编写到处执行。它仅仅代表我可以采用 html 这种更简单的技术栈去替代复杂的技术栈进行开发了。那么，为了更好的支持多平台，将前后端分离后让一个后端可以支持所有的前端的方式胜过了同时提供 html render 以及 api 的模式。并且，它带来另外一个非常大的好处：separation of concern。这看似是将原来的逻辑分类转变成了仓库的物理分离，但这确实提供了并行开发的可行性，也让后端 API 的测试方便了许多。通过项目构建时将 RESTful API 作为前后端开发的契约可以保证双方开发不会出现太大的问题。</p>\n<p>还有，<code>简单</code> 这个状态是带有时间戳的。现在的系统都很少有一锤子买卖，都可能有一个持续发展的过程。那么，一个一开始认为的 <code>简单</code> 的东西到底会变成什么样子真不好说。从维护的角度去讲，能够轻易的重构的强类型语言远胜过了弱类型的语言。那么，ruby python js 这种当年被认为是脚本语言的弊端就出现了。对我来讲 <code>java</code> 里面的 <code>interface</code> 和完善的 <code>class</code> 体系对于构建复杂的 oo 设计模式以及复杂的领域模型实在是太方便了，加上一些好的编辑器对 <code>java</code> 的增益效果，我更希望在业务逻辑可以无限复杂的后端采用这样的静态语言来屏蔽未来产品扩张时所带来的问题。甚至对于复杂的前端应用来说，大家也受不了弱语言 + 单线程的 js 了，<code>typescript</code> 在很大程度上填补了 js 的弊端，再加上快速的为 js 中添加 <code>es6</code> 甚至是 <code>es7</code> 的特性去屏蔽无结构、回调地狱这样一系列的问题。即便是 <code>promise</code> 也一直存在一个吞食内部报错的情况，实在是不好用。</p>\n<p>而前端则倾向于采用 <code>react</code> <code>angular</code> 这样的框架去处理前端应用模块化、路由、异步、渲染等一系列的问题。但是这也减缓了页面第一次加载的速度：在第一个页面打开的时候需要加载大量的基础代码，这虽然可以通过分块加载以及初始页面的 <code>server side render</code> 在一定程度上有所缓解，但我总觉得这一定只是临时的解决方案。并且 <code>server side render</code> 也大大的增加了应用的复杂度，在我看来利大于弊。</p>\n<p><strong>UPDATE</strong> 目前像 <code>next.js</code> 采用的 <code>server side render</code> 和我在这里所说有所不同。<code>next.js</code> 希望实现 <code>react component</code> 直接在后端渲染，而我这里讲的是在 <code>redux</code> 中提及的首次 render \t采用的技术。</p>\n<p>总结一下呢，<strong>为了支持多平台以及更方便的对后端做 scale，前后端分离是一个不错的选择</strong>。并且在构建复杂的、或者说是需要持续维护的 web 产品的时候，如果可以尽量多的重用已有的东西，方便大家快速的认识很了解项目的内容，那么支持重构的强类型语言相对于动态语言有更多的优势。但是 rails 等动态语言确实很好用，我始终没有在 <code>java</code> 下看到像是 <code>active-admin</code> 这样的后台管理界面可以几个命令拔地而起。有的时候就在想是 java 这样的强类型语言这么多年为什么就没有做出来像 rails 那样的非常多的可重用模块呢？是自身的语法限制么？我深表怀疑。事实上，最近我也看到了 spring 下一些很有一些的东西包含了像是 <code>active-record</code> 的一些功能，但是又拥抱了 ddd 的思想，让持久化作为一个依赖出现在项目中。之后的日子里一方面会多多关注大型的 webapp 构建的问题以及在不同平台下前端的开发效率的问题，另一方面会看看 java 体系下的一些新进展，如果真的可以兼顾 get-started 的开发效率又能保证以后的维护问题，那么该体系会逐渐成为未来开发的主流。</p>\n<p>当然，还有一些问题没有解决，比如部署，比如前后端的契约如何实施，比如 scale 等等。这个我理清了写吧.</p>","fields":{"slug_without_date":"/review-for-recently-development"}},{"id":"0d93902e-31ee-532d-901e-fff9200d80da","frontmatter":{"title":"Nodejs with babel es2015","date":"2016 September-21"},"html":"<p>最近开始尝试用 nodejs 去写后端 api，和前端类似，为了采用 es6 的语法同样需要做一些 boilerplate 的工作。这里记录下来，加深一下记忆。</p>\n<p>不过首先要先跑个题。其实 babel 不是第一个支持 js 变种的东西，最早出现过 coffeescript 目前比较流行的还有 typescript。typescript 支持强类型，支持 interface，尤其是 interface 这种 oo 的利器，真是让我跃跃欲试。但是有静静地想了想，其实目前 es6 作为一个未来的标准可能还是更有前途一些，并且目前的 es6 对于 oo 的支持已经相对来说好了一些了。应该还算凑合。</p>\n<h1 id=\"install-dependencies\" style=\"position:relative;\">Install Dependencies<a href=\"#install-dependencies\" aria-label=\"install dependencies permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>首先当然是创建项目，安装依赖了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init -y\n<span class=\"token function\">npm</span> i -D babel-cli babel-preset-es2015 nodemon</code></pre></div>\n<p>其中 <code>nodemon</code> 是用来检测项目下的文件自动重启 nodejs server 的。</p>\n<h1 id=\"create-babelrc\" style=\"position:relative;\">Create babelrc<a href=\"#create-babelrc\" aria-label=\"create babelrc permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>然后创建一个 <code>.babelrc</code> 文件表明所支持的 <code>babel</code> 内容。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> .babelrc</code></pre></div>\n<p>.babelrc:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"presets\": [\"es2015\"]\n}</code></pre></div>\n<p>如果想要支持 <code>Object Spread Operator</code> 这样的功能（就是 <code>...</code> 这个语法）则需要额外安装一个 babel 的插件 <code>babel-plugin-transform-object-rest-spread</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> babel-plugin-transform-object-rest-spread -D</code></pre></div>\n<p>然后在 <code>.babelrc</code> 添加如下内容</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"plugins\": [\"transform-object-rest-spread\"]\n}</code></pre></div>\n<h1 id=\"dev-command-to-run-es6-node-js\" style=\"position:relative;\">Dev command to run es6 node js<a href=\"#dev-command-to-run-es6-node-js\" aria-label=\"dev command to run es6 node js permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>在完成了 babel 的配置之后，我们就可以采用 es6 的语法去写 js 了。比如这里是一个样例。</p>\n<p><code>index.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里用到了 es6 的 <code>import</code> 以及 <code>=></code> 方法。如果直接执行 <code>node index.js</code> 是会报错的。这里我们可以在 <code>package.json</code> 中的 <code>scripts</code> 下添加一个方法 <code>dev</code> 用 <code>babel-node</code> 命令执行我们的 es6 语法的文件。</p>\n<p><code>package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"babel-node index.js\"\n  }\n}</code></pre></div>\n<p>然后通过用 <code>nodemon</code> 包裹 <code>dev</code> 命令可以做到自动重启 nodejs 的 server。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\"\n  }\n}</code></pre></div>\n<h1 id=\"build-command-to-create-code-for-production\" style=\"position:relative;\">Build command to create code for production<a href=\"#build-command-to-create-code-for-production\" aria-label=\"build command to create code for production permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><code>babel-node</code> 仅仅是用于开发环境，每次修改代码后可以自动的编译文件。但是如果我们想要在生产环境部署代码的时候就需要一个专门的命令一次性将所有的代码编译成 <code>node</code> 支持的 es5 语法的文件了。</p>\n<p>这里我们在 <code>package.json</code> 中再增加一个 <code>build</code> 命令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\",\n    \"build\": \"babel src --out-dir dist\"\n  }\n}</code></pre></div>\n<p>通过执行 <code>npm run build</code> 可以将 <code>src</code> 下的 <code>es6</code> 语法的文件编译成 <code>dist</code> 下支持 <code>es5</code> 语法的文件。</p>\n<p>最后在添加一个 <code>start</code> 方法去启动 <code>nodejs</code> server。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\",\n    \"build\": \"babel src --out-dir dist\",\n    \"start\" \"node dist/index.js\"\n  }\n}</code></pre></div>\n<p>为了保证每次执行 <code>npm run start</code> 命令前都会执行 <code>build</code> 命令，我们可以将 <code>build</code> 重命名为 <code>prestart</code>，<code>nodejs</code> 会自动的帮助我们在执行 <code>start</code> 之前执行它。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"script\": {\n    \"dev\": \"nodemon --exec babel-node index.js\",\n    \"prestart\": \"babel src --out-dir dist\",\n    \"start\" \"node dist/index.js\"\n  }\n}</code></pre></div>\n<h1 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"https://babeljs.io/docs/plugins/transform-object-rest-spread/\">Object Spread Operator</a></li>\n<li><a href=\"https://github.com/remy/nodemon\">nodemon</a></li>\n<li><a href=\"https://egghead.io/lessons/node-js-using-es6-and-beyond-with-node-js\">Using ES6 and beyond with Node.js - node Video Tutorial</a></li>\n</ol>","fields":{"slug_without_date":"/nodejs-with-babel-es2015"}},{"id":"9958f3dc-af13-5b1d-a620-73104b500de0","frontmatter":{"title":"Redux with react router update","date":"2016 August-17"},"html":"<p>之前有写过一篇 <a href=\"/redux-with-react-router\">Redux With React Router</a>，介绍 <code>redux</code> 与 <code>react-router</code> 结合实现多个视图的 WebApp，但是最近才发现有很多地方已经和之前使用的方式不一样了，这里做一个更新。</p>\n<h2 id=\"use-react-router-without-redux\" style=\"position:relative;\">use react-router without redux<a href=\"#use-react-router-without-redux\" aria-label=\"use react router without redux permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>react-router</code> 提供了 <code>react</code> 的路由机制，在之前的文章中讲到了它可以和 <code>react-router-redux</code> 一起使用。当时的目的是为了将路由的信息传递到 <code>redux store</code> 中，在做 <code>container component</code> 的 <code>connect</code> 时可以通过 <code>mapStateToProps</code> 的方式将路由中的信息提供给组件使用。但是随着 <code>react-router</code> 的不断更新以及 <code>react-router-redux</code> 的定位的不断明确，现在可以不适用 <code>react-router-redux</code> 而仅仅用 <code>redux-router</code> 完成将路由绑定到 <code>container component</code>。而 <code>react-router-redux</code> 成为了追朔包含了路由的用户行为的一个工具，而这个功能对于很多应用来说不是很有必要，其官方文档也强调:</p>\n<blockquote>\n<p>This library is not necessary for using Redux together with React Router. You can use the two together just fine without any additional libraries. It is useful if you care about recording, persisting, and replaying user actions, using time travel. If you don't care about these features, just use Redux and React Router directly.</p>\n</blockquote>\n<h2 id=\"采用-withrouter-的高阶组件实现路由的绑定\" style=\"position:relative;\">采用 withRouter 的高阶组件实现路由的绑定<a href=\"#%E9%87%87%E7%94%A8-withrouter-%E7%9A%84%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E7%9A%84%E7%BB%91%E5%AE%9A\" aria-label=\"采用 withrouter 的高阶组件实现路由的绑定 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，对于直接在 <code>Router</code> 中出现的组件，<code>react-router</code> 通过 <code>context</code> 的方式为该组件提供了当前路由的信息（如 <code>params</code> <code>location</code> 等）。但是如果是嵌套在路由创建的组件下的其他容器需要使用路由的信息呢？这个时候就需要用到 <code>withRouter</code> 这个由 <code>react-router</code> 提供的高阶组件了。在<a href=\"https://egghead.io/lessons/javascript-redux-using-withrouter-to-inject-the-params-into-connected-components\">这里</a> 由 <code>redux</code> 的作者提供了一个视频教程介绍了这个方法。可是如果你直接 <code>npm install react-router --save</code> 之后就按着作者的来使用的话会发现根本没有 <code>params</code> 的参数...原因在于 <code>withRouter</code> 这个高阶参数在当前默认的最新版 <code>react-router</code> 中根本没有提供这个东西，它仅仅注入了 <code>router</code> 方便组件做导航而已...只有明确的指定 <code>\"react-router\": \"^3.0.0-alpha.1\"</code> 的版本之后才能这么做...坑爹呀。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://egghead.io/lessons/javascript-redux-using-withrouter-to-inject-the-params-into-connected-components\">How to use withRouter</a></li>\n<li><a href=\"https://github.com/reactjs/react-router\">react-router</a></li>\n<li><a href=\"https://github.com/reactjs/react-router-tutorial\">react-router-tutorial</a></li>\n</ol>","fields":{"slug_without_date":"/redux-with-react-router-update"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":22,"pageCount":41}}},"pageContext":{"limit":3,"skip":63}},
    "staticQueryHashes": []}