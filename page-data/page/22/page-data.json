{
    "componentChunkName": "component---src-templates-blogs-js",
    "path": "/page/22",
    "result": {"data":{"site":{"siteMetadata":{"title":"eisen-s-blog"}},"blogs":{"nodes":[{"id":"31954821-49db-5590-a36d-d92c4768164a","frontmatter":{"title":"Webpack and Redux, minify the output bundle","date":"2016 May-29"},"html":"<p>webpack + redux + react 开发前端最终会将所有的 js 依赖打包成为一个（或者几个，因配置不同而不同）js 文件。虽然 <code>webpack</code> 很好的帮助我们解决了依赖的问题，避免了一大堆分散的 js 文件出现在页面里，但是最终打包出来的 js 文件依然会变成所有依赖的 js 的 size 的总和，成为前端页面响应速度的巨大负担。不过通过一些调优可以最大化的减少最终的打包文件的大小并提升运行性能。</p>\n<h2 id=\"dev--production-env\" style=\"position:relative;\"><code>dev</code> &#x26; <code>production</code> env<a href=\"#dev--production-env\" aria-label=\"dev  production env permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，我们可以通过设定不同的 <code>NODE_ENV</code> 环境变量去控制在不同的环境下引入的配置。通过在 <code>webpack.config.js</code> 中读取 <code>process.env.NODE_ENV</code> 可以为 <code>webpack</code> 提供不同的 <code>plugin</code> 用于控制 <code>webpack</code> 的打包机制。下面是一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> plugins <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">API_PREFIX</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_PREFIX</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'\"{{API_PREFIX}}\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>DedupePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>OccurenceOrderPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      warnings<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">API_PREFIX</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">API_PREFIX</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'\"{{API_PREFIX}}\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code>DefinePlugin</code> 可以为 <code>webpack</code> 提供全局变量，这里我们利用它将 <code>node</code> 中的 <code>process.env.NODE_ENV</code> 转换为 <code>webpack</code> 构建最终的 <code>js</code> 时用到的全局变量。如果直接在 <code>webpack</code> 构建时处理的 <code>js</code> 文件中直接引用 <code>nodejs</code> 才能读取的 <code>process.env</code> 是不会有任何效果的。</p>\n<p>然后，我们通过这个 <code>process.env.NODE_ENV</code> 的不同加载不同的 <code>configureStore.js</code>，将在 <code>production</code> 环境下用不到的 <code>redux</code> 中间件清理掉。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./configureStore.prod'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./configureStore.dev'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>configureStore.prod.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'../reducers/index'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>configureStore.dev.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span>\n<span class=\"token keyword\">import</span> createLogger <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-logger'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> rootReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'../reducers/index'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">,</span> <span class=\"token function\">createLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> store<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"利用-webpack-插件压缩输出文件\" style=\"position:relative;\">利用 <code>webpack</code> 插件压缩输出文件<a href=\"#%E5%88%A9%E7%94%A8-webpack-%E6%8F%92%E4%BB%B6%E5%8E%8B%E7%BC%A9%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6\" aria-label=\"利用 webpack 插件压缩输出文件 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在各种前端构建工具中都受不了 <code>uglify</code> 的过程，<code>webpack</code> 也不例外。在上文 <code>webpack.config.js</code> 的例子中对 <code>production</code> 环境下的 <code>webpack</code> 就提供了各种插件用于压缩文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>optimize<span class=\"token punctuation\">.</span>UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  compress<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    warnings<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"采用-webpack-bundle-size-analyzer-分析依赖大小\" style=\"position:relative;\">采用 <code>webpack-bundle-size-analyzer</code> 分析依赖大小<a href=\"#%E9%87%87%E7%94%A8-webpack-bundle-size-analyzer-%E5%88%86%E6%9E%90%E4%BE%9D%E8%B5%96%E5%A4%A7%E5%B0%8F\" aria-label=\"采用 webpack bundle size analyzer 分析依赖大小 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果以上两种优化都做了（尤其是 uglify）那么恭喜你，你的 js 输出文件已经是处理前的三分之一了。我在自己的一个项目中最终的 <code>bundle.js</code> 文件从 <code>2.2MB</code> 降到了 <code>800KB</code> 效果还是非常好的。</p>\n<p>但是 <code>800KB</code> 还是好大的一个文件，如果还想继续优化呢？那就需要有针对性的进行优化了。我们在开发的过场中依赖了乱七八糟的 <code>package</code> 那么是不是能通过减少依赖或者是更换依赖的方式来进一步的减少最终输出文件的大小呢？那么，首先需要知道每个依赖占据的比例了。这里我们采用一个工具 <code>webpack-bundle-size-analyzer</code> 分析所有依赖的大小。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g webpack-bundle-size-analyzer</code></pre></div>\n<p>然后</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">webpack --json <span class=\"token operator\">|</span> webpack-bundle-size-analyzer</code></pre></div>\n<p>就可以看到所有依赖的大小占比了：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">react: 667.34 KB (28.9%)\n  fbjs: 33.59 KB (5.03%)\n  &lt;self>: 633.74 KB (95.0%)\nmoment: 454.54 KB (19.7%)\nbootstrap: 273.93 KB (11.9%)\njquery: 251.51 KB (10.9%)\nreact-router: 159.31 KB (6.91%)\n  history: 52.69 KB (33.1%)\n    deep-equal: 3.8 KB (7.22%)\n    query-string: 1.62 KB (3.08%)\n      strict-uri-encode: 182 B (10.9%)\n      &lt;self>: 1.45 KB (89.1%)\n    &lt;self>: 47.26 KB (89.7%)\n  warning: 1.76 KB (1.11%)\n  invariant: 1.48 KB (0.929%)\n  hoist-non-react-statics: 1.35 KB (0.850%)\n  &lt;self>: 102.03 KB (64.0%)\nformsy-react-components: 36.24 KB (1.57%)\n  classnames: 2.58 KB (7.11%)\n  &lt;self>: 33.66 KB (92.9%)\nsuperagent: 30.57 KB (1.32%)\n  component-emitter: 3.11 KB (10.2%)\n  reduce-component: 405 B (1.29%)\n  &lt;self>: 27.06 KB (88.5%)\nformsy-react: 30.55 KB (1.32%)\n  form-data-to-object: 1.19 KB (3.91%)\n  &lt;self>: 29.36 KB (96.1%)\naxios: 29.18 KB (1.26%)\nredux: 25.8 KB (1.12%)\n  lodash: 3.34 KB (12.9%)\n  symbol-observable: 451 B (1.71%)\n  &lt;self>: 22.02 KB (85.4%)\nreact-redux: 25.54 KB (1.11%)\n  lodash: 3.34 KB (13.1%)\n  invariant: 1.48 KB (5.80%)\n  hoist-non-react-statics: 1.35 KB (5.30%)\n  &lt;self>: 19.37 KB (75.8%)\nredux-logger: 8.29 KB (0.359%)\nstyle-loader: 6.99 KB (0.303%)\nwebpack: 3 KB (0.130%)\n  node-libs-browser: 2.76 KB (91.8%)\n    process: 2.76 KB (100%)\n    &lt;self>: 0 B (0.00%)\n  &lt;self>: 251 B (8.17%)\nobject-assign: 1.95 KB (0.0844%)\ncss-loader: 1.47 KB (0.0638%)\nredux-thunk: 306 B (0.0130%)\nsuperagent-prefix: 198 B (0.00838%)\nreact-dom: 63 B (0.00267%)\n&lt;self>: 300.1 KB (13.0%)</code></pre></div>\n<p>这里在优化前的输出情况，其中 <code>react</code> 最大，占整个输出的 <code>28.9%</code>，未压缩前 <code>bundle.js</code> 为 <code>2.24MB</code>。<code>react</code> 是我们的核心依赖，是没什么办法做优化了，但是占比第二高的 <code>moment</code> 仅仅是一个用于日期格式化的工具，占比如此之高实在是可疑。通过搜索其他的可选方案，我将 <code>moment</code> 替换为 <code>date-fns</code>，bundle 文件减小为 <code>1.7MB</code> 压缩后文件减小为 <code>558KB</code>。</p>\n<h2 id=\"最后的最后\" style=\"position:relative;\">最后的最后<a href=\"#%E6%9C%80%E5%90%8E%E7%9A%84%E6%9C%80%E5%90%8E\" aria-label=\"最后的最后 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如果你真的还觉得太大了...那，就只有靠 nginx 那边做 <code>gzip</code> 优化了...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gzip  on;\ngzip_types      text/plain application/xml text/css text/html application/javascript;</code></pre></div>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://webpack.github.io/docs/optimization.html\">webpack optimization</a></li>\n<li><a href=\"https://moduscreate.com/optimizing-react-es6-webpack-production-build/\">Optimizing React + ES6 + Webpack Production Build</a></li>\n<li><a href=\"https://stackoverflow.com/questions/17093796/date-formatting-with-without-moment-js\">date-format-without-moment</a></li>\n<li><a href=\"https://stackoverflow.com/questions/30030031/passing-environment-dependent-variables-in-webpack\">passing-environment-dependent-variables-in-webpack</a></li>\n<li><a href=\"https://nginx.org/en/docs/http/ngx_http_gzip_module.html\">nginx gzip</a></li>\n</ol>","fields":{"slug_without_date":"/webpack-redux-minify"}},{"id":"f5a38157-397b-51cc-afce-eeba70f2f278","frontmatter":{"title":"Webpack with Bootstrap","date":"2016 May-20"},"html":"<p>最近开始利用业余时间采用 <code>react + redux</code> 的前端架构山寨一个金数据（或者说是 WuFoo，毕竟两个东西看起来真的很像）以增加自己对这些框架的熟练度。在这个过程中记录下一些自己遇到的坑。今天就是一个 <code>webpack</code> 如何和 <code>bootstrap</code> 结合的坑。</p>\n<p>为了在项目之初就一个不是那么丑的界面，都会选择一些比较成熟的前端 css 框架。<code>bootstrap</code> 是比较流行的一个。<code>bootstrap</code> 一方面是基本的 <code>css</code> 另一方面还有一些 <code>jQuery</code> 的插件形式的类库支持其中的一些组件，当然还有一些它所需要的字体文件。那么这里问题就来了：</p>\n<ol>\n<li>如何在 <code>webpack</code> 中引入 <code>jQuery</code> 以及它的插件</li>\n<li>如何在 <code>webpack</code> 引入一些其他类型的文件，例如字体</li>\n</ol>\n<h2 id=\"引入-bootstrap\" style=\"position:relative;\">引入 bootstrap<a href=\"#%E5%BC%95%E5%85%A5-bootstrap\" aria-label=\"引入 bootstrap permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，我们还是要安装 <code>bootstrap</code> 以及它所依赖的 <code>jquery</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save bootstrap-sass jquery</code></pre></div>\n<p>这里顺便说一句，虽然 <code>jquery</code> 看似过时了，但是它所构建的生态是非常庞大的，尤其是像 <code>jquery-ui</code> 这样的东西可以说是一些富交互应用所必须的。那么如何将 <code>react</code> 的 <code>component</code> 和 <code>jquery</code> 的一些组件很好的结合是在选择 <code>react</code> 这样的框架之初就考虑进去的。后面在涉及到一些复杂的交互的时候会出现 <code>jquery-ui</code> 与 <code>react</code> 一起使用的例子。</p>\n<p>然后，我们可以在 <code>webpack.config.js</code> 中以 entry 的形式引入 <code>bootstrap-loader</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  devtool: 'cheap-module-source-map',\n  entry: [\n    'bootstrap-loader',\n    './index.js'\n  ],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: \"babel-loader\"\n      },\n      {\n        test: /\\.scss$/,\n        exclude: /node_modules/,\n        loader: \"style!css!sass\"\n      }\n    ]\n  }\n};</code></pre></div>\n<p>注意看 <code>entry</code> 本来就是一个数组，我们可以在这里引入多个入口。</p>\n<h2 id=\"use-bootstrap-loader\" style=\"position:relative;\">Use bootstrap-loader<a href=\"#use-bootstrap-loader\" aria-label=\"use bootstrap loader permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>做了一番调研之后发现其实没必要自己把所有的事情都做了，有这么一个 <code>bootstrap-loader</code> 可以帮助在 <code>webpack</code> 的项目中引入 <code>bootstrap</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev bootstrap-loader</code></pre></div>\n<p>不过单单是安装它是不过的，其实 <code>bootstrap-loader</code> 所做的事情就是帮助我们把各种样子的文件引入到我们的项目中，那么为了处理不同类型的文件需要一些其他的 <code>loader</code> 的支持（前面的博客有提及 <code>webpack</code> 只能处理 <code>js</code> 如果需要处理其他类型的东西就需要 <code>loader</code> 的帮助）。这里，我们还要引入一大堆的 <code>loader</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install --save-dev resolve-url-loader url-loader file-loader imports-loader</code></pre></div>\n<p>其中 <code>file-loader</code> 用于加载其他类型的文件，<code>url-loader</code> 和 <code>file-loader</code> 类似，只是在文件比较小的时候返回 Data Url 的形式。<code>resolve-url-loader</code> 和之前提到的 <code>sass-loader</code> 一起使用，用于处理 <code>sass</code> 中 <code>url()</code> 的路径。这些 <code>loader</code> 都要和 <code>webpack.config.js</code> 中的 <code>loaders</code> 配置项配合使用:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var path = require(\"path\");\n\nmodule.exports = {\n  ...\n  module: {\n    loaders: [\n      ...\n      {\n        test: /\\.woff2?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n        loader: \"url?limit=10000\"\n      },\n      {\n        test: /\\.(ttf|eot|svg)(\\?[\\s\\S]+)?$/,\n        loader: 'file'\n      }\n    ]\n  }\n};</code></pre></div>\n<h2 id=\"use-imports-loader-to-support-jquery\" style=\"position:relative;\">Use imports-loader to support jQuery<a href=\"#use-imports-loader-to-support-jquery\" aria-label=\"use imports loader to support jquery permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>imports-loader</code> 是个很有意思的 <code>loader</code> 它定义了一个简单的格式用于引入使用它的类库所需要的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  ...\n  module: {\n    loaders: [\n      ...\n      {\n        test: /bootstrap-sass\\/assets\\/javascripts\\//,\n        loader: 'imports?jQuery=jquery'\n      }\n    ]\n  }\n};</code></pre></div>\n<p>如上所示，在 <code>webpack.config.js</code> 中加入这样一个 <code>loader</code>。其中说明在引入 <code>bootstrap</code> 下的 <code>javascripts</code> 时，为他们提供 <code>jQuery</code> 这样的变量。那么 <code>imports-loader</code> 会在引入 <code>bootstrap</code> 的 <code>js</code> 之前为他们提供如下的代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var jQuery = require('jquery');</code></pre></div>\n<p>估计在后续使用 <code>jquery</code> 的其他东西的时候还会用到它的。</p>\n<h2 id=\"参考\" style=\"position:relative;\">参考<a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://github.com/shakacode/bootstrap-loader\">bootstrap-loader</a></li>\n<li><a href=\"https://github.com/webpack/imports-loader\">imports-loader</a></li>\n<li><a href=\"https://github.com/webpack/file-loader\">file-loader</a></li>\n<li><a href=\"https://github.com/webpack/url-loader\">url-loader</a></li>\n<li><a href=\"https://github.com/bholloway/resolve-url-loader\">resolve-url-loader</a></li>\n</ol>","fields":{"slug_without_date":"/webpack-with-bootstrap"}},{"id":"0cf6c832-1782-57c5-8c8f-c10fea01564e","frontmatter":{"title":"DDD Repository","date":"2016 May-17"},"html":"<p>标题是 <code>Repository</code>，但是内容是我如何从错用的 <code>Repository</code> 变成了感觉还算对的 <code>Repository</code> 的过程。</p>\n<h2 id=\"之前的做法\" style=\"position:relative;\">之前的做法<a href=\"#%E4%B9%8B%E5%89%8D%E7%9A%84%E5%81%9A%E6%B3%95\" aria-label=\"之前的做法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>DDD 里面的 <code>Repository</code> 是一个处理数据存储或者说是数据持久化的单元。通常一个 <code>Aggregate</code> 对应一个 <code>Repository</code>。对于通常的 web 服务，很多时候我们都是在与数据存储打交道，以至于很多时候存储就成为了真个应用最关键的逻辑了。那么刚刚接触 DDD 的时候，我就觉得 Repository 就是以前经常使用的类似 DAO 的东西。下面这样的代码经常出现在我们的应用里面。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code>applicationRepository</code> 管理了对于应用的创建。为了创建我们的对象 <code>app</code> 我们将一堆需要的参数扔进一个 <code>applicationRepository</code> 这样子的不知道背后是什么鬼实现的黑盒子，出来就是我们想要的东西了。再看另外一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationRecord</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Record</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> envName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mapper<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里例子里面，<code>application</code> 可以有环境变量，在 <code>application</code> 中提供了一个 <code>removeEnv</code> 的方法，<code>mapper</code> 是一个具体的持久层工具 <code>Mybatis</code> 需要的东西，可以忽略。当我需要删除环境变量的时候，我只需要做如下的事情。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">ofId</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这里事实上我根本没有显性的调用任何持久化方法，在 <code>app</code> 里面持久化就偷偷的帮我把事情做了。然后需要注意的是我的 <code>Application</code> 仅仅是一个接口，实现它的是一个 <code>ApplicationRecord</code> 它内部通过注入的方式塞进去了 <code>Mybatis DataMapper</code> 的东西从而实现了持久化的工作。然后在 <code>Mybatis</code> 可以放一个叫做 <code>ObjectFactory</code> 的东西使得 <code>Mybatis</code> 和 java injector 关联子一起，当从 <code>Mybatis</code> 获取对象时 <code>Mybatis</code> 会自动的讲所有的依赖注入到这个对象里。</p>\n<p>说白了就是<strong>将数据层和模型绑定在一起，持久层做了业务层的事情</strong>。</p>\n<h2 id=\"希望的样子\" style=\"position:relative;\">希望的样子<a href=\"#%E5%B8%8C%E6%9C%9B%E7%9A%84%E6%A0%B7%E5%AD%90\" aria-label=\"希望的样子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>然而我希望的是可以将业务层做成这个样子：</p>\n<ol>\n<li>没有对什么持久层的依赖，甚至完全不知晓持久层。</li>\n<li>领域模型不应该是接口而已，接口不能描述具体的业务行为，我同意接口和实现分离的方式，但是分离的实现也应该是领域模型重要的一部分而不是和持久层放在一起</li>\n<li><code>Repository</code> 作为和存储打交道的组件应该仅仅是做<strong>持久化</strong>，它就是拿来一个对象，然后存到数据库里，没有任何业务逻辑，没有任何花哨的方法。</li>\n</ol>\n<h2 id=\"改进后的样子\" style=\"position:relative;\">改进后的样子<a href=\"#%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90\" aria-label=\"改进后的样子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface ApplicationRepository {\n    void save(Application application);\n    Application ofId(String appId);\n}</code></pre></div>\n<p>没有什么 <code>addEnv</code> <code>removeEnv</code> 等等，这些都是 <code>Application</code> 自己要做的。<code>Mybatis</code> 版本的 <code>Repository</code> 具体的 <code>mapper</code> 仅仅出现在 <code>MybatisApplicationRepository</code> 里面，其他地方都不会出现。按照这个思路把上边的代码修改之后是下面这个样子。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">.</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">.</span><span class=\"token function\">application</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>新创建的 <code>app</code> 本身就是一个 <code>POJO</code> 里面全部都是纯粹的业务代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Envs</span> envs<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> envName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        envs<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code>Application</code> 有一个 <code>envs</code> 的属性，在调用 <code>removeEnv</code> 之后，<code>application</code> 的环境变量就更新了。如果需要持久化，就单独调用 <code>applicationRepository</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> applicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">ofId</span><span class=\"token punctuation\">(</span>appId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">removeEnv</span><span class=\"token punctuation\">(</span>envName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napplicationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样的话持久化就和业务逻辑完全的分离开了，所有的 <code>POJO</code> 保证即使没有持久化也都可以正常的运转。领域对象是 <code>class</code> 而不是 <code>interface</code> 保证了内部的逻辑都是包含在业务层的。</p>","fields":{"slug_without_date":"/ddd-repository"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":22,"pageCount":40}}},"pageContext":{"limit":3,"skip":63}},
    "staticQueryHashes": []}