{"componentChunkName":"component---src-templates-blogs-js","path":"/page/6","result":{"data":{"blogs":{"nodes":[{"id":"1208683e-3dca-5b95-937f-9f06b5dc0d28","frontmatter":{"title":"用 husky 和 prettier 保证团队代码格式一致性","date":"2018 February-28"},"html":"<p>好久没有写博客，久到在刚想到写一篇博客的时候要打开哪个编辑器都楞了一下。今天介绍一下两个小工具 <code class=\"language-text\">husky</code>（对，哈士奇，2哈）和 <code class=\"language-text\">prettier</code>。我认为他们的出现减轻了软件开发流程中一些痛点。</p>\n<h2 id=\"husky-为-git-commit-增加钩子\" style=\"position:relative;\">husky 为 git commit 增加钩子<a href=\"#husky-%E4%B8%BA-git-commit-%E5%A2%9E%E5%8A%A0%E9%92%A9%E5%AD%90\" aria-label=\"husky 为 git commit 增加钩子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在之前的工作中，我们尝试通过在 git 的 <code class=\"language-text\">pre-receive</code> 阶段嵌入一系列的 ci 流程处理代码以提供给开发者们 \"just push\" 的开发流程（当然这个想法是完完全全源自  heroku 的）。这个流程将原先的 \"push -> wait for verify -> new correct commit -> repush\" 的流程转变为 \"push -> fail -> correct -> repush\"：如果没有在 \"pre-receive\" 阶段设置门禁的话，坏的提交会被同步到中心仓库后在进行检测；而设置门禁之后坏的 commit 会被拒绝在本地，本地只能将 ci 可以通过的代码提交到中心仓库。但是将所有东西都通过 push 验证很显然是慢了一些：这就像表单的前端验证和后端验证一样，虽然后端验证永远必不可少但是它增加了服务器的负担并且延长了反馈周期。</p>\n<p>这时候 <code class=\"language-text\">husky</code> 就要派上用场了。<code class=\"language-text\">husky</code> 其实就是一个为 <code class=\"language-text\">git</code> 客户端增加 hook 的工具。将其安装到所在仓库的过程中它会自动在 <code class=\"language-text\">.git/</code> 目录下增加相应的钩子实现在 <code class=\"language-text\">pre-commit</code> 阶段就执行一系列流程保证每一个 commit 的正确性。部分在 cd <code class=\"language-text\">commit stage</code> 执行的命令可以挪动到本地执行，比如 lint 检查、比如单元测试。当然，<code class=\"language-text\">pre-commit</code> 阶段执行的命令当然要保证其速度不要太慢，每次 commit 都等很久也不是什么好的体验。</p>\n<h2 id=\"prettier-保证每个团队代码格式一致性\" style=\"position:relative;\">prettier 保证每个团队代码格式一致性<a href=\"#prettier-%E4%BF%9D%E8%AF%81%E6%AF%8F%E4%B8%AA%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7\" aria-label=\"prettier 保证每个团队代码格式一致性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>多少年来开发者在使用 tab 还是 space 的问题上真是花费了不少的时间，美剧硅谷里主角还因为 tab 和别人闹了一集，可见大家对代码格式化的重视程度-_-。记得我在上一个项目里看到有小哥把我的代码强行刷成他满意的格式的 commit 也非常不满。仅仅修改格式的 commit 是毫无必要的，它没有对软件本身的行为做任何的修改，而夹带了修改格式的 commit 更是令人抓狂的，给 review 的同学也带来了不小的负担（在一坨提交里仔仔细细看了半天发现神马也没变！！尼玛！！）。</p>\n<p><code class=\"language-text\">golang</code> 取了个巧，语言自带官方格式，你们终于不吵了吧。虽然会有时候看 <code class=\"language-text\">golang</code> 的格式化结果略微有点麻烦（就是 struct 对 json type 的制表符对齐的要求），但是也没有哪里是让人无法忍受的丑。如果其他的语言也以类似的方式制定一个官方格式是不是就会将此事平息下去呢。当然，我们可以在制定这个官方格式的时候吵架，只要官方格式不会三天两头的更新那在实际项目中为这种不必要的分歧导致浪费大把时间了。</p>\n<p>在我看来 <code class=\"language-text\">prettier</code> 就是这么一个 \"类官方格式\" 了。不过目前它还只是支持 <code class=\"language-text\">js</code> 体系下的格式化，其他语言由于这样那样的问题还要再等等。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15197990961653.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>大家对有个公认的格式这件事还是非常认可的，项目出现一年，Github star 破 2.1w，并且像 facebook 这样的大公司已经在内部逐渐铺开使用了。</p>\n<h2 id=\"集成\" style=\"position:relative;\">集成<a href=\"#%E9%9B%86%E6%88%90\" aria-label=\"集成 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>最后，通过 husky 为 <code class=\"language-text\">prettier</code> 在 <code class=\"language-text\">pre-commit</code> 加个钩子，这体验就更完美了：不论你家的格式是什么样子，只要你想提交，就必须格式化成 <code class=\"language-text\">prettier</code> 要求的样子，这样就没有那种因为格式变动出现的无聊的 <code class=\"language-text\">diff</code> 了。集成的流程基本是以下这个样子：</p>\n<ol>\n<li>\n<p>添加 prettier 依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> prettier --dev --exact</code></pre></div>\n</li>\n<li>\n<p>测试格式化是否工作</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> prettier -- --write src/index.js</code></pre></div>\n</li>\n<li>\n<p>在 commit 时执行 prettier</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> pretty-quick husky --dev</code></pre></div>\n<p>修改  <code class=\"language-text\">package.json</code> 添加 pre-commit 钩子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pretty-quick --staged\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>其实官方文档也有，但是官方文档可耻的写错了...第二步命令少了 <code class=\"language-text\">--</code> 的命令。</p>\n<p>最后的最后，放一段 <code class=\"language-text\">prettier</code> 格式化的 <code class=\"language-text\">react</code> 代码，我还是对其默认的格式非常满意的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Badges</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> loadBadges <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loadBadges</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> badges <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>已经获得的成就<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>Row\n          gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">16</span><span class=\"token punctuation\">}</span>\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"flex\"</span>\n          justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span>\n          align<span class=\"token operator\">=</span><span class=\"token string\">\"top\"</span>\n          style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"20px\"</span><span class=\"token punctuation\">,</span> paddingBottom<span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>badges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">badge</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Col\n              lg<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n              md<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n              sm<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span>\n              xs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span>\n              style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">\"1em\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>badge<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>ProjectBadge badge<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>badge<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://github.com/typicode/husky\">Husky</a></li>\n<li><a href=\"https://medium.com/@bartwijnants/using-prettier-and-husky-to-make-your-commits-save-2960f55cd351\">Using Prettier and husky to make your commits safe.</a></li>\n<li><a href=\"https://git-scm.com/docs/githooks\">git-hooks</a></li>\n<li><a href=\"http://www.informit.com/articles/article.aspx?p=1621865&#x26;seqNum=4\">The Commit Stage</a></li>\n<li><a href=\"https://golang.org/cmd/gofmt/\">Formats Go programs</a></li>\n</ol>","fields":{"slug_without_date":"/husky-and-prettier"}},{"id":"65f85c5f-e038-5089-8ff3-8c80aa012145","frontmatter":{"title":" 在 react 项目中引入全局变量","date":"2017 December-21"},"html":"<p>虽然全局变量是一个不好的实践，但是很多时候处于方便性的考虑，还是在某些场景需要使用。这里就讲解一下在 react + webpack 场景下如何不提前引入就可以到处使用的全局变量的一个好的方案。</p>\n<h2 id=\"方法一：浏览器全局变量\" style=\"position:relative;\">方法一：浏览器全局变量<a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\" aria-label=\"方法一：浏览器全局变量 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，其实对于前端应用原本是跑在浏览器里的，我们自然会想到用 <code class=\"language-text\">window.global_var</code> 的方式去定义全局变量。但是这种方式有一个问题：如果我们有自己的一些组件展示视图（比如 storybook）以及一些组件测试的话，仅仅在 <code class=\"language-text\">index.js</code> 定义的这种全局变量需要在每一个展示体系下都去定义，而这些体系可未必有 <code class=\"language-text\">window</code>。</p>\n<h2 id=\"方法二：webpack-ProvidePlugin\" style=\"position:relative;\">方法二：webpack ProvidePlugin<a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9Awebpack-ProvidePlugin\" aria-label=\"方法二：webpack ProvidePlugin permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>第二种方法是采用 webpack 的 <code class=\"language-text\">ProvidePlugin</code> 让 webpack 打包时自动发现关键的全局变量并自动的引入。它是一种隐性的全局变量。代码如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      Config<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../src/utils/Config'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExtractTextPlugin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>ProvidePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      Config<span class=\"token operator\">:</span> <span class=\"token string\">\"Config\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>首先通过 <code class=\"language-text\">resolve.alias</code> 为一个引入定义一个 shortcut。</li>\n<li>然后在 <code class=\"language-text\">plugins</code> 中通过 <code class=\"language-text\">webpack.ProvidePlugin</code> 定义相应的变量即可</li>\n</ol>\n<p><em>注意</em>，这里 <code class=\"language-text\">resolve.alias</code> 引入不支持 <code class=\"language-text\">export default</code> 的语法，只支持 <code class=\"language-text\">export</code>  以及 <code class=\"language-text\">module.exports</code> 的写法。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://doc.webpack-china.org/configuration/resolve/#resolve\">解析(Resolve)</a></li>\n<li><a href=\"https://doc.webpack-china.org/plugins/provide-plugin/#src/components/Sidebar/Sidebar.jsx\">ProvidePlugin</a></li>\n</ol>","fields":{"slug_without_date":"/global-var-in-react"}},{"id":"00a888e6-7365-560a-8f93-b972e077663d","frontmatter":{"title":"CORS with Spring Boot and Spring Security","date":"2017 November-08"},"html":"<h2 id=\"Spring-对-CORS-的支持\" style=\"position:relative;\">Spring 对 CORS 的支持<a href=\"#Spring-%E5%AF%B9-CORS-%E7%9A%84%E6%94%AF%E6%8C%81\" aria-label=\"Spring 对 CORS 的支持 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在这篇<a href=\"https://spring.io/blog/2015/06/08/cors-support-in-spring-framework\">文章</a> spring 说明了自己在 Spring MVC 中所提供的 CORS 的支持。文中提到了三种 Spring 支持 CORS 的方式：</p>\n<ol>\n<li>\n<p>对于单个方法的跨域支持，可以使用 <code class=\"language-text\">@CrossOrigin</code> 的注解实现，这种情况我基本没有用到过，也从来没有使用过</p>\n</li>\n<li>\n<p>采用 JavaConfig，尤其是在使用 Spring Boot 的时候，可以采用如下方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token function\">corsConfigurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebMvcConfigurerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CorsRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>采用 Filter</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConfiguration</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">FilterRegistrationBean</span> <span class=\"token function\">corsFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">CorsConfiguration</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfig<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfig<span class=\"token punctuation\">.</span><span class=\"token function\">addAllowedOrigin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://domain1.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfig<span class=\"token punctuation\">.</span><span class=\"token function\">addAllowedHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfig<span class=\"token punctuation\">.</span><span class=\"token function\">addAllowedMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsource<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">FilterRegistrationBean</span> bean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FilterRegistrationBean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsFilter</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>看起来还是挺简单的？但是这里有个坑，在第二种方法后面的叙述中会强调：</p>\n<blockquote>\n<p>If you are using Spring Security, make sure to enable CORS at Spring Security level as well to allow it to leverage the configuration defined at Spring MVC level.</p>\n</blockquote>\n<h2 id=\"CORS-with-Spring-Security\" style=\"position:relative;\">CORS with Spring Security<a href=\"#CORS-with-Spring-Security\" aria-label=\"CORS with Spring Security permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Spring Security 本身是通过 Filter 实现的，如果没有对其单独做 CORS 的处理，在 Web Security 报错 401 的时候是不会返回相应的 CORS 的字段的。这会导致命名应该出现的 401 错误成为了一个无法进行跨域的错误，导致前端程序无法正常的处理 401 相应：</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15101476021097.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>为了解决这个问题，自然是需要添加 <a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/cors.html\">Spring Security 支持的 CORS 代码</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebSecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\thttp\n\t\t\t<span class=\"token comment\">// by default uses a Bean by the name of corsConfigurationSource</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token class-name\">CorsConfigurationSource</span> <span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">CorsConfiguration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsource<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然这种边角旮旯的东西确实引起了不少的问题，甚至在 spring boot 上还有人报了 <a href=\"https://github.com/spring-projects/spring-boot/issues/5834\">issue</a>，并且很多人还讨论了半天...可见隐藏之深。</p>\n<p>这里提供一个处理 CORS 的 <a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app\">GitHub 项目</a>，这也是我发现这个问题的出处。</p>\n<h2 id=\"Expose-Header-vs-Allow-Header\" style=\"position:relative;\">Expose Header vs Allow Header<a href=\"#Expose-Header-vs-Allow-Header\" aria-label=\"Expose Header vs Allow Header permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>很多 POST 请求会返回 status code 201，并且包含一个 Response Header <code class=\"language-text\">Location</code> 指向新创建的资源的地址。在 CORS 请求时，如果没有设置 Access-Control-Expose-Headers 会导致 Ajax 请求无法获取 <code class=\"language-text\">Location</code> 这样的 Response Header，详细信息可以在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers\">developer.mozilla.org</a> 看到：</p>\n<blockquote>\n<p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。Access-Control-Expose-Headers 头让服务器把允许浏览器访问的头放入白名单。</p>\n</blockquote>\n<p>因此，为了使得 <code class=\"language-text\">Location</code> 字段可以被访问，需要进行额外的设置：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token class-name\">CorsConfigurationSource</span> <span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">CorsConfiguration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">addExposedHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Location\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 暴露 Location header</span>\n\t<span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsource<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug_without_date":"/spring-cors-and-security"}},{"id":"a5bf62e7-f62a-51ec-9861-d533e58e48f4","frontmatter":{"title":"一道简单的图算法题 El Nino !","date":"2017 October-25"},"html":"<p><a href=\"https://www.hackerearth.com/\">HackerEarch</a> 是我最近发觉的一个不错的算法练习的平台。这里首先对这个平台做一些介绍，包括它与其他平台相比的优缺点。然后介绍一个简单的图算法题的解法。</p>\n<h1 id=\"HackerEarth-又一个编程练习网站\" style=\"position:relative;\">HackerEarth 又一个编程练习网站<a href=\"#HackerEarth-%E5%8F%88%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E7%BD%91%E7%AB%99\" aria-label=\"HackerEarth 又一个编程练习网站 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>虽然自己的工作和复杂的算法关系不是很大，但是始终觉得这种对基础的熟练掌握和了解是做各种计算机行业相关工作的基础，然后自己也是总觉得自己在这方面有着一些兴趣，所有会经常找一些练习算法的平台刷刷题。之前有使用过 TopCoder、HackerRank、LeetCode 等。和 HackerRank 类似，HackerEarth 也是出自印度小哥之手。</p>\n<p>虽然它本身有很多的问题，比如测试的执行不够稳定，比如很多题目的测试用例很少，比如 web page 存在各种展示的 bug等。但是 HackerEarth 有一个功能让我眼前一亮：它对各种题目进行了清晰的分门别类，让我这种练习者可以更针对性的进行训练。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090095520933.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>另外一个对练习者友好的功能是它可以随意的查看一个 test cases 的输入和输出：</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090097425516.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>如上所示，如果我的一个提交出错了可以直接点击链接就能看到具体的输入和输出，虽然 HackerRank 也可以查看具体某一个 TestCase 但是需要自己通过在其网站上获取的点券购买，相比这里直接点击还是稍稍麻烦了一点。下面则是介绍一个我在这里写的一道图算法练习题。</p>\n<h1 id=\"El-Nino--一个-DFS-算法题目\" style=\"position:relative;\">El Nino ! 一个 DFS 算法题目<a href=\"#El-Nino--%E4%B8%80%E4%B8%AA-DFS-%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE\" aria-label=\"El Nino  一个 DFS 算法题目 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>题目在<a href=\"https://www.hackerearth.com/zh/practice/algorithms/graphs/depth-first-search/practice-problems/algorithm/el-nino/\">这里</a> 题目大概翻译一下如下：</p>\n<blockquote>\n<p>你有一个包含 N 个节点的树 T，其中根为节点 1，还有一个长度为 M 的无重复整数的数组 A。</p>\n<p>需要你去找到所有符合这样条件的三元组 (U, V, K)，其中 V 属于 U 节点的子树，然后他们之间的距离恰好是 A[K]。而两个节点之间的距离就是他们之间的最短路径，即边的个数。</p>\n<p>输入：第一行包含空格分割的两个整数 N 和 M\n第二行包含 M 个空格分离的整数\n第三行包含 N - 1 个空格分隔的整数，其中第 i 个整数是 i + 1 节点的父节点（注意，前者是<strong>第 i 个整数</strong>，而后者是指 <strong>节点 i + 1</strong>）</p>\n<p>输出：T 中产生的符合上述描述的三元组的个数</p>\n</blockquote>\n<h2 id=\"尝试-1\" style=\"position:relative;\">尝试 1<a href=\"#%E5%B0%9D%E8%AF%95-1\" aria-label=\"尝试 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先可是知道这是一个以 DFS （深度遍历）为中心的算法：每次深度遍历增加一个节点之后将其所有的祖先节点记录下来，并且检查数组 A 是否存在对应的距离。如果存在则计数 +1。于是有了第一个版本的提交：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 用 HashSet 存储数组 A</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lens<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 用邻接表建立图</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> node <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ancestors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g<span class=\"token punctuation\">,</span> \n                           <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> \n                           <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist<span class=\"token punctuation\">,</span> \n                           <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ancestors<span class=\"token punctuation\">,</span> \n                           <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// 每遍历到一个新的节点就去检查其与所有祖先的距离</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">:</span> ancestors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 计算与祖先的距离</span>\n                <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> dist<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 如果这个距离在 A 中存在就计数 +1</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\">// 在下一次遍历之前添加已经处理完的节点</span>\n            ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 在处理兄弟节点之前将当前节点从祖先列表前删除</span>\n            ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后只有三分之一左右的用例过了...其中一大部分超时，还有一部分报错。虽然我觉得这个算法的效率可能有点问题，但是我没想到居然有些是报错了。点开其中的一个报错的 Case 一看，发现自己没有处理 A 中包含 0 的情况。</p>\n<h2 id=\"尝试-2，考虑包含长度-0-的情况\" style=\"position:relative;\">尝试 2，考虑包含长度 0 的情况<a href=\"#%E5%B0%9D%E8%AF%95-2%EF%BC%8C%E8%80%83%E8%99%91%E5%8C%85%E5%90%AB%E9%95%BF%E5%BA%A6-0-%E7%9A%84%E6%83%85%E5%86%B5\" aria-label=\"尝试 2，考虑包含长度 0 的情况 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>知道错在哪里就好修改了。距离为零意味着三元组 [U, V, K] 中 U 和 V 应该一样。那么就是 N 的个数。所以我就做一个特殊检查：如果 <code class=\"language-text\">A.contains(0)</code> 那么 <code class=\"language-text\">cnt += n</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 用 HashSet 存储数组 A</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> lens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lens<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 如果 A 中包含 0 计数 +n</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cnt <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 用邻接表建立图</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> node <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ancestors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ancestors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">,</span> ancestors<span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 和尝试 1 一样，就省略了</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这次所有通过的就是真的通过了，但是还是有大量的超时和系统错误。大概分析一下，超时肯定是说算法的复杂度太高了，可以看到默认的 DFS 的复杂度是 <code class=\"language-text\">O(V + E)</code> 对于树来说，就是 <code class=\"language-text\">O(V + V - 1)</code> 而已。但是每次处理新的节点时都有一个过程：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 每遍历到一个新的节点就去检查其与所有祖先的距离</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">:</span> ancestors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 计算与祖先的距离</span>\n    <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> dist<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果这个距离在 A 中存在就计数 +1</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是一个 <code class=\"language-text\">O(V)</code> 的复杂度，所以整体的复杂度有 <code class=\"language-text\">O(V^2)</code>。</p>\n<p>而报错则很有可能是栈溢出了，那么需要将目前的递归变成遍历。</p>\n<h2 id=\"尝试-3，将-Ov-提升到-OlogV\" style=\"position:relative;\">尝试 3，将 <code class=\"language-text\">O(v)</code> 提升到 <code class=\"language-text\">O(log(V))</code><a href=\"#%E5%B0%9D%E8%AF%95-3%EF%BC%8C%E5%B0%86-Ov-%E6%8F%90%E5%8D%87%E5%88%B0-OlogV\" aria-label=\"尝试 3，将 Ov 提升到 OlogV permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>计算所有祖先中存在的距离与 A 数组中的距离耗费的时间是 <code class=\"language-text\">O(v)</code>，但是仔细想想，对于一个没有权重的树来说，其实每一个路径中，如果当前节点 v 有 k 个祖先，那么出现的距离一定是 0 到 k 了。我们不用每次都去检查有哪些祖先，其祖先的个数就是 <code class=\"language-text\">d[v]</code> 而已，那么上面的那部分可以改成如下的样子：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncnt <span class=\"token operator\">+=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 range 为：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是很遗憾，这样的复杂度并没有减少，<code class=\"language-text\">retainAll</code> 和 <code class=\"language-text\">range</code> 依然需要 <code class=\"language-text\">O(V)</code> 的复杂度。不过我觉得重点就是如何将目前这个 <code class=\"language-text\">O(V)</code> 做提升了。这个时候我想到了 binary search...我们当前的问题是在 <code class=\"language-text\">range(dist[v])</code> 和数组 <code class=\"language-text\">A</code> 之间找并集，那么如果将 A 排序，我们找的就是在 <code class=\"language-text\">A</code> 中最大的那个 <strong>小于等于 <code class=\"language-text\">dist[v]</code></strong> 的索引，这就是可以用 binary search 解决的问题了。于是，最终的提交如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestClass</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> scan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> node <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            g<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">long</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 同时用遍历替代递归，引入一个 stack 处理 DFS</span>\n        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cnt <span class=\"token operator\">+=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">:</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                idx <span class=\"token operator\">=</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 索引 + 1 就是并集的个数，如果没找到 -1 + 1 就是 0</span>\n                cnt <span class=\"token operator\">+=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                stack<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 找到最大的那个小于等 value 的索引</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bsearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> lens<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                low <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lens<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样修改之后就有了 <code class=\"language-text\">O(Vlog(V))</code> 的复杂度，成功的 AC 了。</p>\n<p>当然，其实中间还是有很多的坑，比如之前采用的计数是 <code class=\"language-text\">int</code> 现在改成了 <code class=\"language-text\">long</code>，再比如搜索索引之后就不再需要考虑有没有 0 距离的特殊情况了。</p>\n<p>虽然看起来是一个不算难的 DFS 算法题，HackerEarth 也把它标记成简单，但是依然花了一番心思才优化成这个最终的版本。</p>\n<h1 id=\"参考资料\" style=\"position:relative;\">参考资料<a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\" aria-label=\"参考资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"https://www.topcoder.com/community/data-science/data-science-tutorials/binary-search/\">binary search 以及其变种</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=AfSk24UTFS8&#x26;t=1s\">图算法，深度优先遍历 MIT 在线课程</a></li>\n<li><a href=\"https://www.hackerearth.com/zh/practice/algorithms/graphs/depth-first-search/practice-problems/algorithm/el-nino/\">HackerEarth EL NINO!</a></li>\n</ol>","fields":{"slug_without_date":"/el-nino"}},{"id":"635d72b6-016b-5162-b787-d855ada60b7a","frontmatter":{"title":"用 Feign Hystrix 进行服务集成","date":"2017 October-16"},"html":"<p>不论是否采用微服务的架构，我们都有将自己的服务与其他的服务集成的需求。比如我这里有一个需求就是在系统中创建一个项目的时候通过其所提供的 GitHub 项目的地址获取其默认的 <code class=\"language-text\">README.md</code> 文件内容作为项目的描述。再比如现在很多的项目都将其<strong>用户管理系统</strong>作为一个独立的系统，当我自己的系统需要用户认证的时候需要从<strong>用户系统</strong>特定的接口获取用户信息。这篇文章就介绍如何使用 Feign，Hystrix 这些 spring cloud 所使用的依赖与其他服务做集成，当然，为了更好的保证服务的可靠性，我这里还展示了通过 wiremock 建立了一系列测试保证我们可以覆盖各种特殊的情况。</p>\n<p>项目代码在 <a href=\"https://github.com/aisensiy/demo-for-feign-and-hystrix\">GitHub</a>。</p>\n<h1 id=\"声明式-http-客户端-Feign\" style=\"position:relative;\">声明式 http 客户端 Feign<a href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F-http-%E5%AE%A2%E6%88%B7%E7%AB%AF-Feign\" aria-label=\"声明式 http 客户端 Feign permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>Feign 是一个声明式的 Http 客户端。其优势自然是它的\"声明式\"：可以更清晰更简单的对其他服务进行请求。虽然目前 Feign 类库已经放在了 OpenFeign 这个 Github 账号之下，但是鉴于更多的人是将其作为 spring cloud 的一环一起使用的，所以这里我所使用的代码也都是引入的 spring cloud 的 <code class=\"language-text\">org.springframework.cloud:spring-cloud-starter-feign</code> 而不是其 <code class=\"language-text\">io.github.openfeign:feign-core</code> 的独立依赖。</p>\n<p><code class=\"language-text\">build.gradle</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>然后，创建我们的 GitHubService:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"${github.url}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GitHubService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{git}/master/{filename}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在 <code class=\"language-text\">@SpringBootApplication</code> 注解的类添加注解 <code class=\"language-text\">@EnableFeignClients</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoForFeignAndHystrixApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoForFeignAndHystrixApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Feign 本身是可以支持很多套语法的，在 spring cloud 下默认使用的 SpringMVC 的方式。</p>\n<h1 id=\"用-wiremock-测试-Feign-Client\" style=\"position:relative;\">用 wiremock 测试 Feign Client<a href=\"#%E7%94%A8-wiremock-%E6%B5%8B%E8%AF%95-Feign-Client\" aria-label=\"用 wiremock 测试 Feign Client permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>在有了 <code class=\"language-text\">GitHubService</code> 之后，如果想要对其进行测试就需要一种 mock 服务端请求的方式。这里我们采用 <a href=\"http://wiremock.org/\">WireMock</a> 来实现。</p>\n<p>首先在 <code class=\"language-text\">build.gradle</code> 引入依赖：</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token punctuation\">...</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.github.tomakehurst:wiremock-standalone:2.7.1'</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">...</span></code></pre></div>\n<p>然后在 resources 目录下定义 application-test.yml 文件，定义 <code class=\"language-text\">github.url</code> 在测试环境下的地址：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github:\n  url: http://localhost:10087</code></pre></div>\n<p>最后我们编写相应的测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Rule</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WireMockRule</span> wireMockRule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WireMockRule</span><span class=\"token punctuation\">(</span><span class=\"token function\">wireMockConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">10087</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GitHubService</span> gitHubService<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_fetch_meta_file_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n        <span class=\"token class-name\">String</span> metaFile <span class=\"token operator\">=</span> gitHubService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>metaFile<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>我们需要引入 SpringBoot 的环境帮助我们自动注入 [2] 的 <code class=\"language-text\">GitHubService</code>，因此添加了 <code class=\"language-text\">@SpringBootTest</code> 的注解，并指定 profile 为 <code class=\"language-text\">test</code> 以便加载 <code class=\"language-text\">application-test.yml</code> 的配置</li>\n<li>自动注入 GitHubService 并按照 test profile 做相应的配置</li>\n<li>创建 WireMockRule 并指定其端口与 <code class=\"language-text\">application-test.yml</code> 相同</li>\n<li>采用 WireMock 的语法指定在请求 \"/aisensiy/hello-project/master/meta.yml\" 时返回所需要的结果</li>\n<li>执行 FeighClient</li>\n<li>比较其结果是否与我们的预期符合</li>\n</ol>\n<h1 id=\"用-Hystrix-进行请求容错\" style=\"position:relative;\">用 Hystrix 进行请求容错<a href=\"#%E7%94%A8-Hystrix-%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E5%AE%B9%E9%94%99\" aria-label=\"用 Hystrix 进行请求容错 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>可以看到 Feign 定义客户端是非常简单的，但是只做到上面的那些是不够的。对于这种网络请求为了保证系统的鲁棒性，还需要处理超时，请求错误等问题。正如 Hystrix 的文档中所提到的，如果你所访问的服务直接挂了，那没什么可怕的，你就直接报错就好了；最怕的是它没有挂但是它的访问速度比预期的要慢很多，这会导致你自身的服务也出现相应的延时，最终可能会导致你自身的一些异步调用的线程池被用尽。</p>\n<p>为了增加 Feign 的鲁棒性，我们可以引入 hystrix 的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-hystrix'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.github.tomakehurst:wiremock-standalone:2.7.1'</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>在添加 hystrix 依赖之后，如果在 <code class=\"language-text\">@FeignClient</code> 中不添加 Hystrix 的 fallback Hystrix 是默认不使用的，可以在 <code class=\"language-text\">application.yml</code> 添加配置启动：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>这样 feign 会默认使用 <code class=\"language-text\">HystrixFeign</code> 的 builder 构建 FeignClient，并为其添加默认的超时处理。其默认的超时时间为 1000 毫秒。我们可以通过为 WireMock 增加默认的延迟返回来测试这个超时处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span><span class=\"token punctuation\">(</span>expected <span class=\"token operator\">=</span> <span class=\"token class-name\">HystrixRuntimeException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_fail_for_fetching_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n        gitHubService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>我们通过 wiremock 所提供的 API 为其返回添加一个 5 秒的固定延时，其已经远远大于 Hystrix 默认 1 秒的超时了</li>\n<li>添加 expected，捕获超时产生的 <code class=\"language-text\">HystrixRuntimeException</code></li>\n</ol>\n<h2 id=\"hystrix-fallback\" style=\"position:relative;\">hystrix fallback<a href=\"#hystrix-fallback\" aria-label=\"hystrix fallback permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>对于一些应用，有了超时处理并在超时或请求失败的时候抛出异常就可以了。但是有的时候我们需要为请求添加一个默认的 fallback：也就是说如果请求失败了，我们需要给客户端返回点默认的结果，这个时候就可以使用 Hystrix 的 fallback 机制：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceFallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AnotherGitHubService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"NONE\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们声明一个和 <code class=\"language-text\">GitHubService</code> 一模一样的接口 <code class=\"language-text\">AnotherGitHubService</code> 用于测试 fallback 机制，然后创建一个 <code class=\"language-text\">GitHubServiceFallback</code> 类并实现相应的接口。</p>\n<p>然后，我们在 <code class=\"language-text\">AnotherGitHubService</code> 中声明需要的 fallback 类：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span> \n    url <span class=\"token operator\">=</span> <span class=\"token string\">\"${github.url}\"</span><span class=\"token punctuation\">,</span> \n    fallback <span class=\"token operator\">=</span> <span class=\"token class-name\">GitHubServiceFallback</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AnotherGitHubService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{git}/master/{filename}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后我们在添加一个测试验证这个 fallback 是否工作：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_fallback_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> serviceWithFallback<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GitHubServiceFallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这次虽然添加了 5000 毫秒的延迟，但是一旦超过默认的 1 秒延时后就会使用默认的结果返回而不会抛出任何异常了。</p>\n<h2 id=\"hystrix-断路器\" style=\"position:relative;\">hystrix 断路器<a href=\"#hystrix-%E6%96%AD%E8%B7%AF%E5%99%A8\" aria-label=\"hystrix 断路器 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>讲到这里才了解到了 hystrix 的一些基本用法，Hystrix 自己实现了断路器的机制：通过请求窗口周期性判定调用服务的可靠性并按照一定的策略屏蔽不健康的系统，从而保证了自身系统的可靠性。</p>\n<p>这里我们还是用过一些接口来展示其断路器的效果：</p>\n<p>首先我们定义一个假的第三方服务：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OtherService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后定义两个 API 对其进行调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Api</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Api</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherService <span class=\"token operator\">=</span> otherService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/safe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span>HystrixCommand</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                otherService<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/unsafe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">unsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> otherService<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span>HystrixCommand<span class=\"token punctuation\">.</span>Setter</span> <span class=\"token function\">setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">HystrixCommand<span class=\"token punctuation\">.</span>Setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">withGroupKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixCommandGroupKey<span class=\"token punctuation\">.</span>Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">asKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"External\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">andCommandKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixCommandKey<span class=\"token punctuation\">.</span>Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">asKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/safe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code class=\"language-text\">/unsafe</code> 接口直接请求 OtherService 而 <code class=\"language-text\">/safe</code> 通过 Hystrix 包装后请求 OtherService。我们启动这个 Spring Boot 项目，并用 <a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">apachebench</a> 分别对两个接口进行压测看看效果。</p>\n<p>首先访问 /unsafe 接口</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab -n <span class=\"token number\">200</span> -c <span class=\"token number\">5</span> http://localhost:8080/unsafe\n\nConnection Times <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n              min  mean<span class=\"token punctuation\">[</span>+/-sd<span class=\"token punctuation\">]</span> median   max\nConnect:        <span class=\"token number\">0</span>    <span class=\"token number\">0</span>   <span class=\"token number\">0.1</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>\nProcessing:  <span class=\"token number\">2002</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.7</span>   <span class=\"token number\">2006</span>    <span class=\"token number\">2196</span>\nWaiting:     <span class=\"token number\">2001</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.1</span>   <span class=\"token number\">2006</span>    <span class=\"token number\">2192</span>\nTotal:       <span class=\"token number\">2002</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.7</span>   <span class=\"token number\">2007</span>    <span class=\"token number\">2197</span>\n\nPercentage of the requests served within a certain <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">50</span>%   <span class=\"token number\">2007</span>\n  <span class=\"token number\">66</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">75</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">80</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">90</span>%   <span class=\"token number\">2010</span>\n  <span class=\"token number\">95</span>%   <span class=\"token number\">2012</span>\n  <span class=\"token number\">98</span>%   <span class=\"token number\">2195</span>\n  <span class=\"token number\">99</span>%   <span class=\"token number\">2196</span>\n <span class=\"token number\">100</span>%   <span class=\"token number\">2197</span> <span class=\"token punctuation\">(</span>longest request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到所有的请求都保持了 2 秒以上的请求时间。</p>\n<p>然后我们再请求一下 /safe 接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab -n <span class=\"token number\">200</span> -c <span class=\"token number\">5</span> http://localhost:8080/safe\n\nConnection Times <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n              min  mean<span class=\"token punctuation\">[</span>+/-sd<span class=\"token punctuation\">]</span> median   max\nConnect:        <span class=\"token number\">0</span>    <span class=\"token number\">0</span>   <span class=\"token number\">0.4</span>      <span class=\"token number\">0</span>       <span class=\"token number\">2</span>\nProcessing:     <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.8</span>      <span class=\"token number\">5</span>    <span class=\"token number\">1248</span>\nWaiting:        <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.7</span>      <span class=\"token number\">4</span>    <span class=\"token number\">1248</span>\nTotal:          <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.8</span>      <span class=\"token number\">5</span>    <span class=\"token number\">1248</span>\n\nPercentage of the requests served within a certain <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">50</span>%      <span class=\"token number\">5</span>\n  <span class=\"token number\">66</span>%      <span class=\"token number\">6</span>\n  <span class=\"token number\">75</span>%      <span class=\"token number\">7</span>\n  <span class=\"token number\">80</span>%      <span class=\"token number\">8</span>\n  <span class=\"token number\">90</span>%   <span class=\"token number\">1014</span>\n  <span class=\"token number\">95</span>%   <span class=\"token number\">1016</span>\n  <span class=\"token number\">98</span>%   <span class=\"token number\">1248</span>\n  <span class=\"token number\">99</span>%   <span class=\"token number\">1248</span>\n <span class=\"token number\">100</span>%   <span class=\"token number\">1248</span> <span class=\"token punctuation\">(</span>longest request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>你会发现并不是所有的请求都会是在超过 1 秒后进行超时处理并返回，这就是断路器的效果：当 Hystrix 发现所访问的请求不能达到预期的时候其依据自己周期内请求的成功比例定义是否开启断路器功能。一旦开启断路功能，外部服务将被默认是失败的，在此期间 Hystrix 不再尝试请求服务而是直接返回 fallback 结果（或者抛出异常）。在 <a href=\"https://www.youtube.com/watch?v=-gL-nO2cqwU\">Hystrix – managing failures in distributed systems</a> 中，演讲者给出了一个很详细的示例展示了这个功能，如果想要更进一步了解断路器可以看看这个演讲。</p>\n<h1 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"https://github.com/OpenFeign/feign\">Open Feign</a></li>\n<li><a href=\"https://github.com/Netflix/Hystrix/wiki\">Hystrix</a></li>\n<li><a href=\"http://wiremock.org/docs/stubbing/\">WireMock Stub</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-gL-nO2cqwU\">Talk: Hystrix – managing failures in distributed systems</a></li>\n</ol>","fields":{"slug_without_date":"/feign-hystrix"}}],"pageInfo":{"hasPreviousPage":true,"currentPage":6,"pageCount":22}}},"pageContext":{"limit":5,"skip":25}},"staticQueryHashes":[]}