{"componentChunkName":"component---src-templates-blog-js","path":"/spring-boot-test/","result":{"data":{"blog":{"id":"eac27307-a5b7-54b4-9ea3-26d65f7cd1e7","html":"<p>早在 2017 年有写过一些 spring boot 测试相关的内容，比如 <a href=\"/spring-mvc-and-test\">在 Spring Boot 1.5.3 中进行 Spring MVC 测试</a>，再比如 <a href=\"/spring-mvc-and-mybatis\">把 Spring Boot 1.5.3 与 MyBatis 集成</a>。现在都 2021 年马上 2022 年了，spring boot 的最新版本已经来到了 2.6，其所依赖的一系列东西也发生了不少变化。同时随着我们项目变得越来越大，测试用例越来越多，对测试的性能、标准化的要求也越来越迫切。从这篇开始记录一些自己最近翻看 spring test 以及 spring boot test 了解到的有关 spring 测试体系的内容。</p>\n<p>spring 以及 spring boot 测试相关的内容简单 google 一下就能看到很多，但我个人感觉非常不成体系，这个应该也和 spring 不断的更迭关系很大，很多新旧知识掺杂在一起，有点摸不清楚。这里我参考的核心资料是如下两个：</p>\n<ol>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/testing.html\">Spring Testing</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing\">Spring Boot Testing</a></li>\n</ol>\n<p>翻看了这两部分内容后感觉 Spring 的文档写的还是比较全面的，不过很遗憾 Spring Testing 的内容写的还是不够细致，可能需要自己去结合源码和其他资料才能更好的消化吸收。但我觉得确实比直接在其他地方要系统一些。</p>\n<p>今天先介绍最近消化的第一个 Tips 什么不应该放进 <code>@SpringBootApplication</code>。</p>\n<h2 id=\"springbootapplication-简单介绍\" style=\"position:relative;\">@SpringBootApplication 简单介绍<a href=\"#springbootapplication-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D\" aria-label=\"springbootapplication 简单介绍 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>@SpringBootApplication</code> 是一个集成注解，翻看源码可以看到它包含了额外三个注解：</p>\n<ul>\n<li><code>@SpringBootConfiguration</code>: 作为 SpringBoot 默认的 Configuration Class</li>\n<li><code>@EnableAutoConfiguration</code>: 允许 Auto Configuration</li>\n<li><code>@ComponentScan</code>: 支持 Component Scan 的方式提供各种 <code>Bean</code></li>\n</ul>\n<p>添加这个注解的 Class 也通常就是整个应用的入口了。在这里可能会放一些全局初始化的东西，不过根据 Spring Boot Testing 的 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.user-configuration-and-slicing\">User Configuration and Slicing</a> 介绍，这里反而不是那种什么都可以放的地方，随便放各种东西会影响你的测试依赖。</p>\n<h2 id=\"为什么-springbootapplication-不能添加各种依赖\" style=\"position:relative;\">为什么 SpringBootApplication 不能添加各种依赖<a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-springbootapplication-%E4%B8%8D%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96\" aria-label=\"为什么 springbootapplication 不能添加各种依赖 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>这样从 Spring Boot 写测试通常使用的 <code>@SpringBootTest</code> 和 <code>@WebMvcTest</code> 注解的行为做解释了。</p>\n<p>通常来说，如果我们的依赖链条都是靠我们自己去切断，不依赖 Spring 的 ApplicationContext 那么这种测试就算是 Unit Test 。反之任何需要依赖 ApplicationContext 的都可以称为 Integration Test。面向 WebMvc 或者需要和数据库接触的测试都需要 ApplicationContext 而这个 ApplicationContext 如何建立就是靠的 <code>@SpringBootTest</code> 或者 <code>@WebMvcTest</code> 这样的注解了。</p>\n<p>标记 <code>@SpringBootTest</code> 或者其他 Spring Boot 提供的 <code>@*Test</code> 注解的测试会尝试寻找从根目录开始寻找标记了 <code>@SpringBootApplication</code> 或者 <code>@SpringBootConfiguration</code> 的类，并以它为起点加载完整的 ApplicationContext 。在 Spring Boot 的 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.detecting-configuration\">Detecting Test Configuration</a> 文档里也做了说明：</p>\n<blockquote>\n<p>When testing Spring Boot applications, this is often not required. Spring Boot’s @Test annotations search for your primary configuration automatically whenever you do not explicitly define one.</p>\n<p>The search algorithm works up from the package that contains the test until it finds a class annotated with @SpringBootApplication or @SpringBootConfiguration. As long as you structured your code in a sensible way, your main configuration is usually found.</p>\n</blockquote>\n<p>当然也可以通过增加 <code>classes</code> 参数 explicitly define 一个 Configuration 修改其默认搜索的行为：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">GraphQLTestConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DgsAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomDataFetchingExceptionHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GraphQLTestBase</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestBase</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"应该如何修改\" style=\"position:relative;\">应该如何修改<a href=\"#%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9\" aria-label=\"应该如何修改 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在文档的 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.user-configuration-and-slicing\">User Configuration and Slicing</a> 部分有做介绍：</p>\n<blockquote>\n<p>Test slices exclude @Configuration classes from scanning.</p>\n</blockquote>\n<p>但是 <code>@SpringBootApplication</code> 默认的 <code>@ComponentScan</code> 可不会跳过任何 <code>@Configuration</code> 因此，为了让全局的依赖注入不要污染不必要的 <code>Test Slices</code> 可以把额外的依赖注入放在单独的 <code>@Configuration</code> 下，这里我直接超文档的内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableBatchProcessing</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改为</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span><span class=\"token punctuation\">(</span>proxyBeanMethods <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@EnableBatchProcessing</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBatchConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"总结\" style=\"position:relative;\">总结<a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><code>@SpringBootApplication</code> 自带 <code>ComponentScan</code> 会收集自己 package 下所有的 Beans 和 Configurations</li>\n<li>Spring Boot 提供的 <code>@*Test</code> 会自己搜索 <code>@SpringBootApplication</code> 或者 <code>@SpringBootConfiguration</code> 作为默认的 <code>Configuration</code>，除非你主动做覆盖</li>\n<li>为了让 2 的行为不要导致过量的 <code>ApplicationContext</code> 在测试阶段被创建，可以把一些只有在生成环境才需要的额外的 Bean 放在独立的 <code>@Configuration</code> 类下，因为 Spring Boot 的 Testing slices 不会扫其他的 <code>@Configuration</code></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#springbootapplication-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D\">@SpringBootApplication 简单介绍</a></li>\n<li><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-springbootapplication-%E4%B8%8D%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96\">为什么 SpringBootApplication 不能添加各种依赖</a></li>\n<li><a href=\"#%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9\">应该如何修改</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>","frontmatter":{"title":"spring boot 整理 SpringBootApplication","date":"December 23, 2021","tags":["springboot","spring","test"]},"excerpt":"早在 2017 年有写过一些 spring boot 测试相关的内容，比如 在 Spring Bo…"}},"pageContext":{"id":"eac27307-a5b7-54b4-9ea3-26d65f7cd1e7"}},"staticQueryHashes":["26522286"],"slicesMap":{}}