{"componentChunkName":"component---src-templates-blog-js","path":"/feign-hystrix","result":{"data":{"blog":{"id":"635d72b6-016b-5162-b787-d855ada60b7a","html":"<p>不论是否采用微服务的架构，我们都有将自己的服务与其他的服务集成的需求。比如我这里有一个需求就是在系统中创建一个项目的时候通过其所提供的 GitHub 项目的地址获取其默认的 <code class=\"language-text\">README.md</code> 文件内容作为项目的描述。再比如现在很多的项目都将其<strong>用户管理系统</strong>作为一个独立的系统，当我自己的系统需要用户认证的时候需要从<strong>用户系统</strong>特定的接口获取用户信息。这篇文章就介绍如何使用 Feign，Hystrix 这些 spring cloud 所使用的依赖与其他服务做集成，当然，为了更好的保证服务的可靠性，我这里还展示了通过 wiremock 建立了一系列测试保证我们可以覆盖各种特殊的情况。</p>\n<p>项目代码在 <a href=\"https://github.com/aisensiy/demo-for-feign-and-hystrix\">GitHub</a>。</p>\n<h1 id=\"声明式-http-客户端-Feign\" style=\"position:relative;\">声明式 http 客户端 Feign<a href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F-http-%E5%AE%A2%E6%88%B7%E7%AB%AF-Feign\" aria-label=\"声明式 http 客户端 Feign permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>Feign 是一个声明式的 Http 客户端。其优势自然是它的\"声明式\"：可以更清晰更简单的对其他服务进行请求。虽然目前 Feign 类库已经放在了 OpenFeign 这个 Github 账号之下，但是鉴于更多的人是将其作为 spring cloud 的一环一起使用的，所以这里我所使用的代码也都是引入的 spring cloud 的 <code class=\"language-text\">org.springframework.cloud:spring-cloud-starter-feign</code> 而不是其 <code class=\"language-text\">io.github.openfeign:feign-core</code> 的独立依赖。</p>\n<p><code class=\"language-text\">build.gradle</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>然后，创建我们的 GitHubService:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"${github.url}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GitHubService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{git}/master/{filename}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在 <code class=\"language-text\">@SpringBootApplication</code> 注解的类添加注解 <code class=\"language-text\">@EnableFeignClients</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoForFeignAndHystrixApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoForFeignAndHystrixApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Feign 本身是可以支持很多套语法的，在 spring cloud 下默认使用的 SpringMVC 的方式。</p>\n<h1 id=\"用-wiremock-测试-Feign-Client\" style=\"position:relative;\">用 wiremock 测试 Feign Client<a href=\"#%E7%94%A8-wiremock-%E6%B5%8B%E8%AF%95-Feign-Client\" aria-label=\"用 wiremock 测试 Feign Client permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>在有了 <code class=\"language-text\">GitHubService</code> 之后，如果想要对其进行测试就需要一种 mock 服务端请求的方式。这里我们采用 <a href=\"http://wiremock.org/\">WireMock</a> 来实现。</p>\n<p>首先在 <code class=\"language-text\">build.gradle</code> 引入依赖：</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token punctuation\">...</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.github.tomakehurst:wiremock-standalone:2.7.1'</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">...</span></code></pre></div>\n<p>然后在 resources 目录下定义 application-test.yml 文件，定义 <code class=\"language-text\">github.url</code> 在测试环境下的地址：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github:\n  url: http://localhost:10087</code></pre></div>\n<p>最后我们编写相应的测试：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Rule</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">WireMockRule</span> wireMockRule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WireMockRule</span><span class=\"token punctuation\">(</span><span class=\"token function\">wireMockConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token number\">10087</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GitHubService</span> gitHubService<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_fetch_meta_file_success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n\n        <span class=\"token class-name\">String</span> metaFile <span class=\"token operator\">=</span> gitHubService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>metaFile<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>我们需要引入 SpringBoot 的环境帮助我们自动注入 [2] 的 <code class=\"language-text\">GitHubService</code>，因此添加了 <code class=\"language-text\">@SpringBootTest</code> 的注解，并指定 profile 为 <code class=\"language-text\">test</code> 以便加载 <code class=\"language-text\">application-test.yml</code> 的配置</li>\n<li>自动注入 GitHubService 并按照 test profile 做相应的配置</li>\n<li>创建 WireMockRule 并指定其端口与 <code class=\"language-text\">application-test.yml</code> 相同</li>\n<li>采用 WireMock 的语法指定在请求 \"/aisensiy/hello-project/master/meta.yml\" 时返回所需要的结果</li>\n<li>执行 FeighClient</li>\n<li>比较其结果是否与我们的预期符合</li>\n</ol>\n<h1 id=\"用-Hystrix-进行请求容错\" style=\"position:relative;\">用 Hystrix 进行请求容错<a href=\"#%E7%94%A8-Hystrix-%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E5%AE%B9%E9%94%99\" aria-label=\"用 Hystrix 进行请求容错 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>可以看到 Feign 定义客户端是非常简单的，但是只做到上面的那些是不够的。对于这种网络请求为了保证系统的鲁棒性，还需要处理超时，请求错误等问题。正如 Hystrix 的文档中所提到的，如果你所访问的服务直接挂了，那没什么可怕的，你就直接报错就好了；最怕的是它没有挂但是它的访问速度比预期的要慢很多，这会导致你自身的服务也出现相应的延时，最终可能会导致你自身的一些异步调用的线程池被用尽。</p>\n<p>为了增加 Feign 的鲁棒性，我们可以引入 hystrix 的依赖。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-feign'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.cloud:spring-cloud-starter-hystrix'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">compileOnly</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.projectlombok:lombok'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">testCompile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'com.github.tomakehurst:wiremock-standalone:2.7.1'</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>在添加 hystrix 依赖之后，如果在 <code class=\"language-text\">@FeignClient</code> 中不添加 Hystrix 的 fallback Hystrix 是默认不使用的，可以在 <code class=\"language-text\">application.yml</code> 添加配置启动：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>这样 feign 会默认使用 <code class=\"language-text\">HystrixFeign</code> 的 builder 构建 FeignClient，并为其添加默认的超时处理。其默认的超时时间为 1000 毫秒。我们可以通过为 WireMock 增加默认的延迟返回来测试这个超时处理：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\n    <span class=\"token annotation punctuation\">@Test</span><span class=\"token punctuation\">(</span>expected <span class=\"token operator\">=</span> <span class=\"token class-name\">HystrixRuntimeException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_fail_for_fetching_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n        gitHubService<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>我们通过 wiremock 所提供的 API 为其返回添加一个 5 秒的固定延时，其已经远远大于 Hystrix 默认 1 秒的超时了</li>\n<li>添加 expected，捕获超时产生的 <code class=\"language-text\">HystrixRuntimeException</code></li>\n</ol>\n<h2 id=\"hystrix-fallback\" style=\"position:relative;\">hystrix fallback<a href=\"#hystrix-fallback\" aria-label=\"hystrix fallback permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>对于一些应用，有了超时处理并在超时或请求失败的时候抛出异常就可以了。但是有的时候我们需要为请求添加一个默认的 fallback：也就是说如果请求失败了，我们需要给客户端返回点默认的结果，这个时候就可以使用 Hystrix 的 fallback 机制：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubServiceFallback</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AnotherGitHubService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"NONE\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们声明一个和 <code class=\"language-text\">GitHubService</code> 一模一样的接口 <code class=\"language-text\">AnotherGitHubService</code> 用于测试 fallback 机制，然后创建一个 <code class=\"language-text\">GitHubServiceFallback</code> 类并实现相应的接口。</p>\n<p>然后，我们在 <code class=\"language-text\">AnotherGitHubService</code> 中声明需要的 fallback 类：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>\n    value <span class=\"token operator\">=</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span> \n    url <span class=\"token operator\">=</span> <span class=\"token string\">\"${github.url}\"</span><span class=\"token punctuation\">,</span> \n    fallback <span class=\"token operator\">=</span> <span class=\"token class-name\">GitHubServiceFallback</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AnotherGitHubService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{git}/master/{filename}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"git\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> git<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filename\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后我们在添加一个测试验证这个 fallback 是否工作：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">should_get_fallback_result</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">String</span> rawMetaFileContent <span class=\"token operator\">=</span> <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/aisensiy/hello-project/master/meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>rawMetaFileContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> serviceWithFallback<span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GitHubServiceFallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchRawFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aisensiy/hello-project\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"meta.yml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这次虽然添加了 5000 毫秒的延迟，但是一旦超过默认的 1 秒延时后就会使用默认的结果返回而不会抛出任何异常了。</p>\n<h2 id=\"hystrix-断路器\" style=\"position:relative;\">hystrix 断路器<a href=\"#hystrix-%E6%96%AD%E8%B7%AF%E5%99%A8\" aria-label=\"hystrix 断路器 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>讲到这里才了解到了 hystrix 的一些基本用法，Hystrix 自己实现了断路器的机制：通过请求窗口周期性判定调用服务的可靠性并按照一定的策略屏蔽不健康的系统，从而保证了自身系统的可靠性。</p>\n<p>这里我们还是用过一些接口来展示其断路器的效果：</p>\n<p>首先我们定义一个假的第三方服务：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OtherService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后定义两个 API 对其进行调用：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Api</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Api</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherService <span class=\"token operator\">=</span> otherService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/safe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span>HystrixCommand</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token function\">setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                otherService<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/unsafe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">unsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> otherService<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>netflix<span class=\"token punctuation\">.</span>hystrix<span class=\"token punctuation\">.</span></span>HystrixCommand<span class=\"token punctuation\">.</span>Setter</span> <span class=\"token function\">setter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">HystrixCommand<span class=\"token punctuation\">.</span>Setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">withGroupKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixCommandGroupKey<span class=\"token punctuation\">.</span>Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">asKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"External\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">andCommandKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HystrixCommandKey<span class=\"token punctuation\">.</span>Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">asKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/safe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中 <code class=\"language-text\">/unsafe</code> 接口直接请求 OtherService 而 <code class=\"language-text\">/safe</code> 通过 Hystrix 包装后请求 OtherService。我们启动这个 Spring Boot 项目，并用 <a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">apachebench</a> 分别对两个接口进行压测看看效果。</p>\n<p>首先访问 /unsafe 接口</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab -n <span class=\"token number\">200</span> -c <span class=\"token number\">5</span> http://localhost:8080/unsafe\n\nConnection Times <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n              min  mean<span class=\"token punctuation\">[</span>+/-sd<span class=\"token punctuation\">]</span> median   max\nConnect:        <span class=\"token number\">0</span>    <span class=\"token number\">0</span>   <span class=\"token number\">0.1</span>      <span class=\"token number\">0</span>       <span class=\"token number\">1</span>\nProcessing:  <span class=\"token number\">2002</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.7</span>   <span class=\"token number\">2006</span>    <span class=\"token number\">2196</span>\nWaiting:     <span class=\"token number\">2001</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.1</span>   <span class=\"token number\">2006</span>    <span class=\"token number\">2192</span>\nTotal:       <span class=\"token number\">2002</span> <span class=\"token number\">2011</span>  <span class=\"token number\">29.7</span>   <span class=\"token number\">2007</span>    <span class=\"token number\">2197</span>\n\nPercentage of the requests served within a certain <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">50</span>%   <span class=\"token number\">2007</span>\n  <span class=\"token number\">66</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">75</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">80</span>%   <span class=\"token number\">2008</span>\n  <span class=\"token number\">90</span>%   <span class=\"token number\">2010</span>\n  <span class=\"token number\">95</span>%   <span class=\"token number\">2012</span>\n  <span class=\"token number\">98</span>%   <span class=\"token number\">2195</span>\n  <span class=\"token number\">99</span>%   <span class=\"token number\">2196</span>\n <span class=\"token number\">100</span>%   <span class=\"token number\">2197</span> <span class=\"token punctuation\">(</span>longest request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到所有的请求都保持了 2 秒以上的请求时间。</p>\n<p>然后我们再请求一下 /safe 接口：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ab -n <span class=\"token number\">200</span> -c <span class=\"token number\">5</span> http://localhost:8080/safe\n\nConnection Times <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n              min  mean<span class=\"token punctuation\">[</span>+/-sd<span class=\"token punctuation\">]</span> median   max\nConnect:        <span class=\"token number\">0</span>    <span class=\"token number\">0</span>   <span class=\"token number\">0.4</span>      <span class=\"token number\">0</span>       <span class=\"token number\">2</span>\nProcessing:     <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.8</span>      <span class=\"token number\">5</span>    <span class=\"token number\">1248</span>\nWaiting:        <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.7</span>      <span class=\"token number\">4</span>    <span class=\"token number\">1248</span>\nTotal:          <span class=\"token number\">3</span>  <span class=\"token number\">137</span> <span class=\"token number\">351.8</span>      <span class=\"token number\">5</span>    <span class=\"token number\">1248</span>\n\nPercentage of the requests served within a certain <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span>\n  <span class=\"token number\">50</span>%      <span class=\"token number\">5</span>\n  <span class=\"token number\">66</span>%      <span class=\"token number\">6</span>\n  <span class=\"token number\">75</span>%      <span class=\"token number\">7</span>\n  <span class=\"token number\">80</span>%      <span class=\"token number\">8</span>\n  <span class=\"token number\">90</span>%   <span class=\"token number\">1014</span>\n  <span class=\"token number\">95</span>%   <span class=\"token number\">1016</span>\n  <span class=\"token number\">98</span>%   <span class=\"token number\">1248</span>\n  <span class=\"token number\">99</span>%   <span class=\"token number\">1248</span>\n <span class=\"token number\">100</span>%   <span class=\"token number\">1248</span> <span class=\"token punctuation\">(</span>longest request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>你会发现并不是所有的请求都会是在超过 1 秒后进行超时处理并返回，这就是断路器的效果：当 Hystrix 发现所访问的请求不能达到预期的时候其依据自己周期内请求的成功比例定义是否开启断路器功能。一旦开启断路功能，外部服务将被默认是失败的，在此期间 Hystrix 不再尝试请求服务而是直接返回 fallback 结果（或者抛出异常）。在 <a href=\"https://www.youtube.com/watch?v=-gL-nO2cqwU\">Hystrix – managing failures in distributed systems</a> 中，演讲者给出了一个很详细的示例展示了这个功能，如果想要更进一步了解断路器可以看看这个演讲。</p>\n<h1 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li><a href=\"https://github.com/OpenFeign/feign\">Open Feign</a></li>\n<li><a href=\"https://github.com/Netflix/Hystrix/wiki\">Hystrix</a></li>\n<li><a href=\"http://wiremock.org/docs/stubbing/\">WireMock Stub</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-gL-nO2cqwU\">Talk: Hystrix – managing failures in distributed systems</a></li>\n</ol>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F-http-%E5%AE%A2%E6%88%B7%E7%AB%AF-feign\">声明式 http 客户端 Feign</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%94%A8-wiremock-%E6%B5%8B%E8%AF%95-feign-client\">用 wiremock 测试 Feign Client</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%94%A8-hystrix-%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E5%AE%B9%E9%94%99\">用 Hystrix 进行请求容错</a></p>\n<ul>\n<li><a href=\"#hystrix-fallback\">hystrix fallback</a></li>\n<li><a href=\"#hystrix-%E6%96%AD%E8%B7%AF%E5%99%A8\">hystrix 断路器</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></p>\n</li>\n</ul>","frontmatter":{"title":"用 Feign Hystrix 进行服务集成","date":"October 16, 2017"}}},"pageContext":{"id":"635d72b6-016b-5162-b787-d855ada60b7a"}},"staticQueryHashes":[]}