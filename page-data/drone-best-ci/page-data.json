{
    "componentChunkName": "component---src-templates-blog-js",
    "path": "/drone-best-ci",
    "result": {"data":{"blog":{"id":"bd928be9-4abb-5c62-aec5-2288f0ecabbb","html":"<p>大概是一年前发现了这样一个叫做 Drone 的开源 ci，在逐渐的尝试过程中发现它的功能非常的强大，其 pipeline as code + docker + backing service 支持的体系基本和我理想中的 ci 一模一样...这里就介绍一下我看到的 drone 的一些非常出彩的地方以及日常使用时一些非常有用的使用方式。</p>\n<h2 id=\"本地安装\" style=\"position:relative;\">本地安装<a href=\"#%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85\" aria-label=\"本地安装 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><img src=\"https://o8p12ybem.bkt.clouddn.com/15096926244457.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>可以看到 drone 的界面非常的简洁，和其他 ci 一样它通过和 github gitlab 或者是 gogs 这样的 git repository 链接并绑定 web hook 在用户提交新的 commit 的时候出发 ci 的执行。drone 作为一个开源的 ci 其支持 docker 方式的安装，非常的简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">drone-server</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> drone/drone<span class=\"token punctuation\">:</span><span class=\"token number\">0.7</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 80<span class=\"token punctuation\">:</span><span class=\"token number\">8000</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /var/lib/drone<span class=\"token punctuation\">:</span>/var/lib/drone/\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DRONE_OPEN=true\n      <span class=\"token punctuation\">-</span> DRONE_HOST=$<span class=\"token punctuation\">{</span>DRONE_HOST<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> DRONE_GITHUB=true\n      <span class=\"token punctuation\">-</span> DRONE_GITHUB_CLIENT=$<span class=\"token punctuation\">{</span>DRONE_GITHUB_CLIENT<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> DRONE_GITHUB_SECRET=$<span class=\"token punctuation\">{</span>DRONE_GITHUB_SECRET<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> DRONE_SECRET=$<span class=\"token punctuation\">{</span>DRONE_SECRET<span class=\"token punctuation\">}</span>\n\n  <span class=\"token key atrule\">drone-agent</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> drone/drone<span class=\"token punctuation\">:</span><span class=\"token number\">0.7</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> agent\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> drone<span class=\"token punctuation\">-</span>server\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /var/run/docker.sock<span class=\"token punctuation\">:</span>/var/run/docker.sock\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> DRONE_SERVER=ws<span class=\"token punctuation\">:</span>//drone<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">:</span>8000/ws/broker\n      <span class=\"token punctuation\">-</span> DRONE_SECRET=$<span class=\"token punctuation\">{</span>DRONE_SECRET<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过这样的 docker-compose 文件就可以在本地启动一个 droner server 和一个 drone-agent（其概念和 gocd 类似）。</p>\n<h2 id=\"drone-的亮点\" style=\"position:relative;\">drone 的亮点<a href=\"#drone-%E7%9A%84%E4%BA%AE%E7%82%B9\" aria-label=\"drone 的亮点 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"pipeline-as-code\" style=\"position:relative;\">pipeline as code<a href=\"#pipeline-as-code\" aria-label=\"pipeline as code permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>首先 drone 支持 pipeline as code 其通过一个简单的 yaml 文件就包含了一个项目 ci 的所有内容了（当然，到底简不简单要看你构建流程的复杂程度以及你对项目的封装程度）。举一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pipeline</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span>6.10.2<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> yarn install\n      <span class=\"token punctuation\">-</span> yarn run build\n  <span class=\"token key atrule\">publish</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> plugins/docker\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> eisenxu/realtopper<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">secrets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> docker_username<span class=\"token punctuation\">,</span> docker_password <span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> latest\n      <span class=\"token punctuation\">-</span> $<span class=\"token punctuation\">{</span>DRONE_COMMIT_SHA<span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是一个采用 <code>create-react-app</code> 创建的一个前端单页应用项目。这里定义了 <code>build</code> 和 <code>publish</code> 两个阶段。第一个阶段 <code>yarn install</code> 和 <code>yarn run build</code> 分别下载依赖和编译但也应用。第二阶段 <code>publish</code> 采用项目中的 <code>Dockerfile</code> 构建一个 docker image 并发布到 <code>hub.docker.com</code>，具体两个步骤如何进行的细节我们在后面会慢慢介绍。</p>\n<h3 id=\"原生支持-docker\" style=\"position:relative;\">原生支持 docker<a href=\"#%E5%8E%9F%E7%94%9F%E6%94%AF%E6%8C%81-docker\" aria-label=\"原生支持 docker permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>上面的 yaml 中每个阶段都有一个 <code>image</code> 的字段，这个 <code>image</code> 就是指一个 docker image 也就是说 drone 下每一个阶段都是在一个你所指定的 docker container 下执行的。这样当然就\b集成了 docker 所引入的一系列的好处：环境隔离、标准化镜像。\b并且，它是后面插件扩展以及 backing service 可以被轻而易举的实现的基础。</p>\n<h3 id=\"简单易用的插件扩展\" style=\"position:relative;\">简单易用的插件扩展<a href=\"#%E7%AE%80%E5%8D%95%E6%98%93%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95\" aria-label=\"简单易用的插件扩展 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>还是在看上面的那个例子，\b第一个阶段我们在 <code>node:6.10.2-alpine</code> 下构建了一个单页应用。然后，我们采用了 <code>plugins/docker</code> 镜像构建并发布了我们的镜像到 <code>hub.docker.com</code>。而这里的 <code>plugins/docker</code> 就是 <code>drone</code> 为我们提供的一个插件了。</p>\n<p>虽说是一个插件，但实际上用起来就和其他的\b <code>image</code> 一样，这个插件的功能就是帮我们利用项目中的 <code>Dockerfile</code> 构建一个新的 docker image 并提交。除此之外还有一些其他的官方插件可供使用，详情在<a href=\"https://plugins.drone.io/\">这里</a>。</p>\n<p>当然，自己做一个插件也是非常简单的，在插件被执行的时候，当前目录就是项目的根目录，然后 drone 会暴露一系列的<a href=\"https://docs.drone.io/environment-reference/\">环境变量</a>给用户使用，我们可以采用之前的步骤所产生的数据或者环境变量中的内容实现一个特定功能的插件。</p>\n<h3 id=\"支持-backing-service\" style=\"position:relative;\">支持 backing service<a href=\"#%E6%94%AF%E6%8C%81-backing-service\" aria-label=\"支持 backing service permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我们跑 ci 的时候难免会有一些外部的依赖，比如跑单元测试的时候可能会用到外部的数据库。比如跑前端界面测试的时候我们会需要 selenium。drone 对这种场景提供了支持。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pipeline</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> golang\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> go get\n      <span class=\"token punctuation\">-</span> go test\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> POSTGRES_USER=postgres\n      <span class=\"token punctuation\">-</span> POSTGRES_DB=test</code></pre></div>\n<p>这是官方所提供的一个数据库的例子。通过定义一个 <code>services</code> 字段，我们可以提供一个或者多个外部服务。</p>\n<h2 id=\"最佳实践\" style=\"position:relative;\">最佳实践<a href=\"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\" aria-label=\"最佳实践 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"对-docker-image-的验收测试\" style=\"position:relative;\">对 docker image 的验收测试<a href=\"#%E5%AF%B9-docker-image-%E7%9A%84%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95\" aria-label=\"对 docker image 的验收测试 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我们采用 docker 容器进行部署的时候通常是在 docker 容器中跑单元测试然后打包镜像并推到 registry。但是这样的流程并不能保证我们打包好的镜像是工作的，可能我们的 Dockerfile 写的有问题导致服务没办法被使用。所以，其实还可以最这种最终构件好的镜像做一个验收测试。</p>\n<p>backing service 的机制可以让我们这么做：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pipeline</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span>6.10.2<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> npm build\n\n  <span class=\"token key atrule\">publish_for_test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> plugins/docker\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> test/bar\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> 1.0.0<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> latest <span class=\"token punctuation\">]</span>\n\n  <span class=\"token key atrule\">run_server</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> test/bar<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">detach</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  \n  <span class=\"token key atrule\">verify</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> blueimp/chromedriver\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> VNC_ENABLED=true\n      <span class=\"token punctuation\">-</span> EXPOSE_X11=true\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> nightwatch\n\n  <span class=\"token key atrule\">publish</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> plugins/docker\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> production/bar\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> 1.0.0<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> latest <span class=\"token punctuation\">]</span></code></pre></div>\n<ol>\n<li>首先，我们在 <code>publish_for_test</code> 中构建一个 <code>test/bar:latest</code> 的镜像。</li>\n<li>然后我们采用 <code>detach</code> 的字段表明我们在这里把我们刚刚创建好的镜像运行起来。</li>\n<li>在 <code>verify</code> 阶段，我们采用 <code>nightwatch</code> 对已经运行起来的 <code>test/bar:latest</code> 服务执行验收测试，也就是说，这时候我们把刚刚创建的应用当做我们的 <code>backing service</code>。</li>\n<li>如果测试通过了，我们再构建一个新的镜像并 push 到生产环境 registry</li>\n</ol>\n<p>当然，这里的 <code>publish_for_test</code> 其实最好的办法是只构建镜像而不提交镜像，然后在本地启动这个镜像。不过这种使用本地镜像的方式并没有使用过，而且也没有那种只构建不提交或者只提交已经存在的镜像的插件，以后可以自己进一步做一些优化。</p>\n<h3 id=\"用-drone-部署多个阶段的环境\" style=\"position:relative;\">用 drone 部署多个阶段的环境<a href=\"#%E7%94%A8-drone-%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E9%98%B6%E6%AE%B5%E7%9A%84%E7%8E%AF%E5%A2%83\" aria-label=\"用 drone 部署多个阶段的环境 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>虽然 drone 没有 GoCD 里的 deployment pipeline 的概念，但是它可以通过指定特殊的 <code>deployment</code> 的事件实现手动激活的多环境部署。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pipeline</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> golang\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> go build\n      <span class=\"token punctuation\">-</span> go test\n\n  <span class=\"token key atrule\">publish</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> plugins/docker\n    <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span> registry.heroku.com\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> registry.heroku.com/my<span class=\"token punctuation\">-</span>staging<span class=\"token punctuation\">-</span>app/web\n    <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">+     event</span><span class=\"token punctuation\">:</span> deployment\n<span class=\"token key atrule\">+     environment</span><span class=\"token punctuation\">:</span> staging\n\n  <span class=\"token key atrule\">publish_to_prod</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> plugins/docker\n    <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span> registry.heroku.com\n    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> registry.heroku.com/my<span class=\"token punctuation\">-</span>production<span class=\"token punctuation\">-</span>app/web\n    <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">+     event</span><span class=\"token punctuation\">:</span> deployment\n<span class=\"token key atrule\">+     environment</span><span class=\"token punctuation\">:</span> production</code></pre></div>\n<p>可以看到通过指定 <code>event</code> 和 <code>environment</code> 可以指定两个不同的环境：staging 和 production。然后，通过 drone 所提供的命令行可以实现手工部署到不同的环境。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">drone deploy octocat/hello-world <span class=\"token number\">24</span> staging</code></pre></div>\n<p>这里是将构建 <code>24</code> 号部署到 staging 环境。</p>\n<h3 id=\"使用插件为构建增加缓存\" style=\"position:relative;\">使用插件为构建增加缓存<a href=\"#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E4%B8%BA%E6%9E%84%E5%BB%BA%E5%A2%9E%E5%8A%A0%E7%BC%93%E5%AD%98\" aria-label=\"使用插件为构建增加缓存 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>每次构建都从远端获取依赖真是非常费流量费时间，最好可以不要重复下载。drone 就以插件的方式支持了这样的功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">pipeline</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">restore-cache</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> drillster/drone<span class=\"token punctuation\">-</span>volume<span class=\"token punctuation\">-</span>cache\n    <span class=\"token key atrule\">restore</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">mount</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./node_modules\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /tmp/cache<span class=\"token punctuation\">:</span>/cache\n\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> npm install\n\n  <span class=\"token key atrule\">rebuild-cache</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> drillster/drone<span class=\"token punctuation\">-</span>volume<span class=\"token punctuation\">-</span>cache\n    <span class=\"token key atrule\">rebuild</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">mount</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./node_modules\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /tmp/cache<span class=\"token punctuation\">:</span>/cache</code></pre></div>\n<p>第一阶段 <code>restore-cache</code> 将 <code>/tmp/cache</code> 下该项目的缓存拷贝到 <code>./node_modules</code>。第三阶段将 <code>./node_modules</code> 的内容拷贝会 <code>/tmp/cache</code> 详细的内容见<a href=\"https://plugins.drone.io/drillster/drone-volume-cache/\">缓存</a>。</p>\n<h2 id=\"当前的状态\" style=\"position:relative;\">当前的状态<a href=\"#%E5%BD%93%E5%89%8D%E7%9A%84%E7%8A%B6%E6%80%81\" aria-label=\"当前的状态 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>目前 drone 刚刚开始了商业化之路，并且在疯狂的更新中，整体社区非常的活跃 star 也已经过万了，非常期待它未来的发展。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://drone.io\">drone 官网</a></li>\n<li><a href=\"https://docs.drone.io/installation/\">drone 安装指南</a></li>\n<li><a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a></li>\n<li><a href=\"https://docs.drone.io/getting-started/\">drone basic usage</a></li>\n<li><a href=\"https://plugins.drone.io/\">drone docker 插件</a></li>\n<li><a href=\"https://plugins.drone.io/drillster/drone-volume-cache/\">drone cache 插件</a></li>\n<li><a href=\"https://docs.drone.io/deployments/\">drone 部署</a></li>\n<li><a href=\"https://plugins.drone.io/drillster/drone-volume-cache/\">缓存</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85\">本地安装</a></p>\n</li>\n<li>\n<p><a href=\"#drone-%E7%9A%84%E4%BA%AE%E7%82%B9\">drone 的亮点</a></p>\n<ul>\n<li><a href=\"#pipeline-as-code\">pipeline as code</a></li>\n<li><a href=\"#%E5%8E%9F%E7%94%9F%E6%94%AF%E6%8C%81-docker\">原生支持 docker</a></li>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E6%98%93%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E6%89%A9%E5%B1%95\">简单易用的插件扩展</a></li>\n<li><a href=\"#%E6%94%AF%E6%8C%81-backing-service\">支持 backing service</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\">最佳实践</a></p>\n<ul>\n<li><a href=\"#%E5%AF%B9-docker-image-%E7%9A%84%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95\">对 docker image 的验收测试</a></li>\n<li><a href=\"#%E7%94%A8-drone-%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E9%98%B6%E6%AE%B5%E7%9A%84%E7%8E%AF%E5%A2%83\">用 drone 部署多个阶段的环境</a></li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E4%B8%BA%E6%9E%84%E5%BB%BA%E5%A2%9E%E5%8A%A0%E7%BC%93%E5%AD%98\">使用插件为构建增加缓存</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%BD%93%E5%89%8D%E7%9A%84%E7%8A%B6%E6%80%81\">当前的状态</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></p>\n</li>\n</ul>","frontmatter":{"title":"Drone 一个原生支持 docker 的 CI","date":"August 04, 2017","tags":["docker","ci/cd"]},"excerpt":"大概是一年前发现了这样一个叫做 Drone 的开源 ci，在逐渐的尝试过程中发现它的功能非常的强大…"}},"pageContext":{"id":"bd928be9-4abb-5c62-aec5-2288f0ecabbb"}},
    "staticQueryHashes": ["4202924991"]}