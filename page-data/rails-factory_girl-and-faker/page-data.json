{"componentChunkName":"component---src-templates-blog-js","path":"/rails-factory_girl-and-faker/","result":{"data":{"blog":{"id":"c6c7ad40-2f5b-5cb9-bf52-41c24d94dbbe","html":"<p>昨晚写 high 了，本来想写写 factory_girl 和 faker 这两个 gem，结果一字未提。这里再写一篇好了。</p>\n<p>factory_girl 与 faker 都是在那本在线的 rails tutorials 里面看到的。factory_girl 用于替换 fixtures 而 faker 用于生成各种随机的内容，这两个东西一个提供生成东西的框架，一个提供具体生产出来的内容，一起使用就显得非常合理了。刚刚纠结的在写相关的内容，反复的打开这两个 gem 的 github 页面翻来翻去，翻的好烦，决定总结一下！这里结合 rails tutorials 写一下自己感觉比较实用的内容。<!-- more --></p>\n<p>刚接触 rails 时看到 fixture 这个东西，感觉还是挺体贴的。不过，尽管是可以配合 erb 方式嵌入代码，但依然不够灵活。于是就有人（thoughtbot）做了个写 code 生成 fixture 的东西，叫做 factory_girl。用处和 fixture 是一样的，只是把 yaml 换成了 ruby code。既然，它的名字里面有 factory，那么我就把它认为是用于为每个类生成很多实例的。这里先给第一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">FactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  factory <span class=\"token symbol\">:user</span> <span class=\"token keyword\">do</span>\n    email <span class=\"token string-literal\"><span class=\"token string\">'test@example.com'</span></span>\n    password <span class=\"token string-literal\"><span class=\"token string\">'00000000'</span></span>\n    password_confirmation <span class=\"token string-literal\"><span class=\"token string\">'000000000'</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>这是一个等价于 fixture 的例子，用于生成一个静态的 user 记录。\n不过 factory_girl 很灵活，不像 fixture 直接放进数据库，还可以有其他的方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Returns a User instance that's not saved</span>\nuser <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns a saved User instance</span>\nuser <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns a hash of attributes that can be used to build a User instance</span>\nattrs <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>attributes_for<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Returns an object with all defined attributes stubbed out</span>\nstub <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>build_stubbed<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>build create attributes_for 都比较容易理解，而最后这个 build_stubbed 就诡异了。我 search 了一下，发现了 thoughtbot 自己写的一篇文章 <a href=\"https://robots.thoughtbot.com/post/22670085288/use-factory-girls-build-stubbed-for-a-faster-test\">Use Factory Girl’s build_stubbed for a Faster Test Suite</a>，文章中提到</p>\n<blockquote>\n<p>build_stubbed is the younger, more hip sibling to build; it instantiates and assigns attributes just like build, but that’s where the similarities end. It makes objects look look like they’ve been persisted, creates associations with the build_stubbed strategy (whereas build still uses create), and stubs out a handful of methods that interact with the database and raises if you call them. This leads to much faster tests and reduces your test dependency on a database.</p>\n</blockquote>\n<p>差不多是说 很多测试的时候，虽然数据保存到了数据库，但是并不会和数据库打交道，你要的内容已经在这个对象里面了。那么，为了加速测试，你其实不用真的把数据写到数据库里面。build_stubbed 假装已经把数据保存到数据库了（伪装的create）。然后你在继续别的测试就行了。当然，既然是假装保存到数据库里面了，那么如果你真的用到保存后的信息，它会报错的。不过到目前为止，我并没有实用过这个方法。</p>\n<p>[update]学到老活到老，写这个的时候居然都不知道 stub 是什么，现在知道了。看了 mocha 就什么都知道了。</p>\n<p>额，刚才我还想写我对于 attributes_for 的实用呢，因为我以为 user model 保存之后，其 password 属性就不复存在了呢，不过刚才我尝试了一下，它依然建在，那么我之前为了得到原有的 password 而实用 attributes_for 就是徒劳的了。这么说来，这个方法就没什么用处了 o_o。因为 factory_girl 支持属性的重写。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">rails g scaffold comment content<span class=\"token symbol\">:text</span> user_id<span class=\"token symbol\">:integer</span> post_id<span class=\"token symbol\">:integer</span>\n\nFactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  factory <span class=\"token symbol\">:comment</span> <span class=\"token keyword\">do</span>\n    content <span class=\"token string-literal\"><span class=\"token string\">'bla bla'</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token variable\">@comment</span> <span class=\"token operator\">=</span> FactoryGirl<span class=\"token punctuation\">.</span>create <span class=\"token symbol\">:comment</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">user_id</span><span class=\"token operator\">:</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token symbol\">post_id</span><span class=\"token operator\">:</span> post_id</code></pre></div>\n<p>我仅仅为 comment 的 content 提供内容，在真正生产 comment 的时候，用重写的方式把 user_id post_id 补全即可。</p>\n<p>到目前为止，factory_girl 差不多只是 fixture 等价功能的加强版，下面就要讲述它作为 工厂 的特性了。同时，有了工厂，就要有材料，Faker 就要登场了。</p>\n<p>在 factory_girl 的 <a href=\"https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md\">readme</a> 中 有一个章节叫做 Lazy Attributes，是说一些属性在对象生成的时候才能定义，而不是用静态的定义。就比如 user，静态的 email 由于需要是唯一的，因此不能用于反复生成。需要我们提供一个方法可以生成不同的 email。那么 sequence 与 generate 就要登场了。</p>\n<p>sequence 与 generate 方法是配合使用的。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># Defines a new sequence</span>\nFactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  sequence <span class=\"token symbol\">:email</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n    <span class=\"token string-literal\"><span class=\"token string\">\"person</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">n</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">@example.com\"</span></span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nFactoryGirl<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># => \"person1@example.com\"</span>\n\nFactoryGirl<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># => \"person2@example.com\"</span></code></pre></div>\n<p>如果用 python 的模式来解释 sequence 像是一个生成器，而 generate 像是一个迭代器，这样配合实用可以生成无限多的 email 了。</p>\n<p>上面的例子是 官方 readme 给出的。而我则把 sequence 与 faker 一起使用，就可每次生成随机的内容了。这部分内容在 rails tutorial 里面也有提及（<a href=\"https://ruby.railstutorial.org/chapters/user-microposts#sec-sample_microposts\">sample microposts</a>）。我的做法比较类似。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">FactoryGirl<span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n  sequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:random_title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">' '</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n  sequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:random_content</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n    Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>paragraphs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>elem<span class=\"token operator\">|</span> <span class=\"token string-literal\"><span class=\"token string\">\"&lt;p></span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">elem</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">&lt;/p>\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  factory <span class=\"token symbol\">:post</span> <span class=\"token keyword\">do</span>\n    title <span class=\"token punctuation\">{</span> generate <span class=\"token symbol\">:random_title</span> <span class=\"token punctuation\">}</span>\n    content <span class=\"token punctuation\">{</span> generate <span class=\"token symbol\">:random_content</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>faker 确实是个很方便的东西，而且没有什么难度，想要看具体的用法，直接来看 <a href=\"https://faker.rubyforge.org/rdoc/\">docs</a> 就好了。</p>\n<p>最后，我结合这些，做了一个类似于 rails tutorials 里面的 populate task 的东西，用于生成初始数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">namespace <span class=\"token symbol\">:db</span> <span class=\"token keyword\">do</span>\n  desc <span class=\"token string-literal\"><span class=\"token string\">\"Fill database with sample data\"</span></span>\n  task populate<span class=\"token operator\">:</span> <span class=\"token symbol\">:environment</span> <span class=\"token keyword\">do</span>\n    email1 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"normal@gmail.com\"</span></span>\n    email2 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"example@example.com\"</span></span>\n    email3 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"root@gmail.com\"</span></span>\n    email4 <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"mod@gmail.com\"</span></span>\n\n    user1 <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email1<span class=\"token punctuation\">)</span>\n    user2 <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email2<span class=\"token punctuation\">)</span>\n    user3 <span class=\"token operator\">=</span> make_admin<span class=\"token punctuation\">(</span>email3<span class=\"token punctuation\">)</span>\n    user4 <span class=\"token operator\">=</span> make_moderator<span class=\"token punctuation\">(</span>email4<span class=\"token punctuation\">)</span>\n\n    <span class=\"token number\">2.</span>times <span class=\"token keyword\">do</span>\n      post <span class=\"token operator\">=</span> make_posts<span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">[</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">,</span> user4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>u<span class=\"token operator\">|</span>\n        FactoryGirl<span class=\"token punctuation\">.</span>create <span class=\"token symbol\">:comment</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">post_id</span><span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token symbol\">user_id</span><span class=\"token operator\">:</span> u<span class=\"token punctuation\">.</span>id\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token number\">2.</span>times <span class=\"token keyword\">do</span>\n      make_posts<span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_user</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    User<span class=\"token punctuation\">.</span>create<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n      <span class=\"token symbol\">email</span><span class=\"token operator\">:</span> email<span class=\"token punctuation\">,</span>\n      <span class=\"token symbol\">password</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"00000000\"</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token symbol\">password_confirmation</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"00000000\"</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_admin</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"admin\"</span></span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n    user\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_moderator</span></span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> make_user<span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"moderator\"</span></span>\n    user<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span>\n    user\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">make_posts</span></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    content <span class=\"token operator\">=</span> Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>paragraphs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>item<span class=\"token operator\">|</span> <span class=\"token string-literal\"><span class=\"token string\">\"&lt;p></span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">item</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">&lt;/p>\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"\\n\"</span></span><span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>posts<span class=\"token punctuation\">.</span>create<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">title</span><span class=\"token operator\">:</span> Faker<span class=\"token double-colon punctuation\">::</span>Lorem<span class=\"token punctuation\">.</span>sentence<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">content</span><span class=\"token operator\">:</span> content<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>每次需要用命令</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:reset &amp;&amp; rake db:populate</code></pre></div>\n<p>而且，前提是 seeds.rb 为空，因为 rake db:reset 重新跑所有的 migration 然后跑 seeds.rb。这让我觉得是不是这些 sample 数据放在 seeds.rb 会更好一些呢？单独的 task 粘和性并不是很好的样子。</p>\n<p>（更新）我已经这么做了，把 populate 这个 task 干掉，把里面的代码稍作修改直接放到 seeds.rb 然后每次\n只需</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rake db:reset</code></pre></div>\n<p>即可。</p>\n<p>最后眼馋 factory_girl 里面 sequence generate 方法，自己写了一个 naive 版本的，挂在这里好了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span>\n  <span class=\"token variable\">@@generators</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">sequence</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>proc<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token symbol\">seq</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token symbol\">proc</span><span class=\"token operator\">:</span> proc\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span></span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:seq</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:proc</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token variable\">@@generators</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:seq</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\nFactory<span class=\"token punctuation\">.</span>sequence <span class=\"token symbol\">:email</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span>\n  <span class=\"token string-literal\"><span class=\"token string\">\"example</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">n</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">@exmple.com\"</span></span>\n<span class=\"token keyword\">end</span>\n\nputs Factory<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># example1@example.com</span>\nputs Factory<span class=\"token punctuation\">.</span>generate <span class=\"token symbol\">:email</span>\n<span class=\"token comment\"># example2@example.com</span></code></pre></div>\n<p>factory_girl 到目前为止，用的还是比较浅的，不过作为 fixture 的替代品，以后应该有很多打交道的时候。</p>","tableOfContents":"","frontmatter":{"title":"rails -- factory_girl and faker","date":"January 29, 2013","tags":["factory_girl","faker","get-started","rails","ruby"]},"excerpt":"昨晚写 high 了，本来想写写 factory_girl 和 faker 这两个 gem，结果一…"}},"pageContext":{"id":"c6c7ad40-2f5b-5cb9-bf52-41c24d94dbbe"}},"staticQueryHashes":["26522286"],"slicesMap":{}}