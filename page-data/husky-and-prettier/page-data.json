{"componentChunkName":"component---src-templates-blog-js","path":"/husky-and-prettier","result":{"data":{"blog":{"id":"1208683e-3dca-5b95-937f-9f06b5dc0d28","html":"<p>好久没有写博客，久到在刚想到写一篇博客的时候要打开哪个编辑器都楞了一下。今天介绍一下两个小工具 <code class=\"language-text\">husky</code>（对，哈士奇，2哈）和 <code class=\"language-text\">prettier</code>。我认为他们的出现减轻了软件开发流程中一些痛点。</p>\n<h2 id=\"husky-为-git-commit-增加钩子\" style=\"position:relative;\">husky 为 git commit 增加钩子<a href=\"#husky-%E4%B8%BA-git-commit-%E5%A2%9E%E5%8A%A0%E9%92%A9%E5%AD%90\" aria-label=\"husky 为 git commit 增加钩子 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在之前的工作中，我们尝试通过在 git 的 <code class=\"language-text\">pre-receive</code> 阶段嵌入一系列的 ci 流程处理代码以提供给开发者们 \"just push\" 的开发流程（当然这个想法是完完全全源自  heroku 的）。这个流程将原先的 \"push -> wait for verify -> new correct commit -> repush\" 的流程转变为 \"push -> fail -> correct -> repush\"：如果没有在 \"pre-receive\" 阶段设置门禁的话，坏的提交会被同步到中心仓库后在进行检测；而设置门禁之后坏的 commit 会被拒绝在本地，本地只能将 ci 可以通过的代码提交到中心仓库。但是将所有东西都通过 push 验证很显然是慢了一些：这就像表单的前端验证和后端验证一样，虽然后端验证永远必不可少但是它增加了服务器的负担并且延长了反馈周期。</p>\n<p>这时候 <code class=\"language-text\">husky</code> 就要派上用场了。<code class=\"language-text\">husky</code> 其实就是一个为 <code class=\"language-text\">git</code> 客户端增加 hook 的工具。将其安装到所在仓库的过程中它会自动在 <code class=\"language-text\">.git/</code> 目录下增加相应的钩子实现在 <code class=\"language-text\">pre-commit</code> 阶段就执行一系列流程保证每一个 commit 的正确性。部分在 cd <code class=\"language-text\">commit stage</code> 执行的命令可以挪动到本地执行，比如 lint 检查、比如单元测试。当然，<code class=\"language-text\">pre-commit</code> 阶段执行的命令当然要保证其速度不要太慢，每次 commit 都等很久也不是什么好的体验。</p>\n<h2 id=\"prettier-保证每个团队代码格式一致性\" style=\"position:relative;\">prettier 保证每个团队代码格式一致性<a href=\"#prettier-%E4%BF%9D%E8%AF%81%E6%AF%8F%E4%B8%AA%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7\" aria-label=\"prettier 保证每个团队代码格式一致性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>多少年来开发者在使用 tab 还是 space 的问题上真是花费了不少的时间，美剧硅谷里主角还因为 tab 和别人闹了一集，可见大家对代码格式化的重视程度-_-。记得我在上一个项目里看到有小哥把我的代码强行刷成他满意的格式的 commit 也非常不满。仅仅修改格式的 commit 是毫无必要的，它没有对软件本身的行为做任何的修改，而夹带了修改格式的 commit 更是令人抓狂的，给 review 的同学也带来了不小的负担（在一坨提交里仔仔细细看了半天发现神马也没变！！尼玛！！）。</p>\n<p><code class=\"language-text\">golang</code> 取了个巧，语言自带官方格式，你们终于不吵了吧。虽然会有时候看 <code class=\"language-text\">golang</code> 的格式化结果略微有点麻烦（就是 struct 对 json type 的制表符对齐的要求），但是也没有哪里是让人无法忍受的丑。如果其他的语言也以类似的方式制定一个官方格式是不是就会将此事平息下去呢。当然，我们可以在制定这个官方格式的时候吵架，只要官方格式不会三天两头的更新那在实际项目中为这种不必要的分歧导致浪费大把时间了。</p>\n<p>在我看来 <code class=\"language-text\">prettier</code> 就是这么一个 \"类官方格式\" 了。不过目前它还只是支持 <code class=\"language-text\">js</code> 体系下的格式化，其他语言由于这样那样的问题还要再等等。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15197990961653.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>大家对有个公认的格式这件事还是非常认可的，项目出现一年，Github star 破 2.1w，并且像 facebook 这样的大公司已经在内部逐渐铺开使用了。</p>\n<h2 id=\"集成\" style=\"position:relative;\">集成<a href=\"#%E9%9B%86%E6%88%90\" aria-label=\"集成 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>最后，通过 husky 为 <code class=\"language-text\">prettier</code> 在 <code class=\"language-text\">pre-commit</code> 加个钩子，这体验就更完美了：不论你家的格式是什么样子，只要你想提交，就必须格式化成 <code class=\"language-text\">prettier</code> 要求的样子，这样就没有那种因为格式变动出现的无聊的 <code class=\"language-text\">diff</code> 了。集成的流程基本是以下这个样子：</p>\n<ol>\n<li>\n<p>添加 prettier 依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> prettier --dev --exact</code></pre></div>\n</li>\n<li>\n<p>测试格式化是否工作</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> prettier -- --write src/index.js</code></pre></div>\n</li>\n<li>\n<p>在 commit 时执行 prettier</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> pretty-quick husky --dev</code></pre></div>\n<p>修改  <code class=\"language-text\">package.json</code> 添加 pre-commit 钩子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pretty-quick --staged\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>其实官方文档也有，但是官方文档可耻的写错了...第二步命令少了 <code class=\"language-text\">--</code> 的命令。</p>\n<p>最后的最后，放一段 <code class=\"language-text\">prettier</code> 格式化的 <code class=\"language-text\">react</code> 代码，我还是对其默认的格式非常满意的。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Badges</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> loadBadges <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">loadBadges</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> badges <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"50px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>已经获得的成就<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>Row\n          gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">16</span><span class=\"token punctuation\">}</span>\n          type<span class=\"token operator\">=</span><span class=\"token string\">\"flex\"</span>\n          justify<span class=\"token operator\">=</span><span class=\"token string\">\"center\"</span>\n          align<span class=\"token operator\">=</span><span class=\"token string\">\"top\"</span>\n          style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">\"20px\"</span><span class=\"token punctuation\">,</span> paddingBottom<span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>badges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">badge</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Col\n              lg<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n              md<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n              sm<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span>\n              xs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span>\n              style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">\"1em\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>badge<span class=\"token punctuation\">.</span>project<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>ProjectBadge badge<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>badge<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://github.com/typicode/husky\">Husky</a></li>\n<li><a href=\"https://medium.com/@bartwijnants/using-prettier-and-husky-to-make-your-commits-save-2960f55cd351\">Using Prettier and husky to make your commits safe.</a></li>\n<li><a href=\"https://git-scm.com/docs/githooks\">git-hooks</a></li>\n<li><a href=\"http://www.informit.com/articles/article.aspx?p=1621865&#x26;seqNum=4\">The Commit Stage</a></li>\n<li><a href=\"https://golang.org/cmd/gofmt/\">Formats Go programs</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#husky-%E4%B8%BA-git-commit-%E5%A2%9E%E5%8A%A0%E9%92%A9%E5%AD%90\">husky 为 git commit 增加钩子</a></li>\n<li><a href=\"#prettier-%E4%BF%9D%E8%AF%81%E6%AF%8F%E4%B8%AA%E5%9B%A2%E9%98%9F%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7\">prettier 保证每个团队代码格式一致性</a></li>\n<li><a href=\"#%E9%9B%86%E6%88%90\">集成</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></li>\n</ul>","frontmatter":{"title":"用 husky 和 prettier 保证团队代码格式一致性","date":"February 28, 2018"}}},"pageContext":{"id":"1208683e-3dca-5b95-937f-9f06b5dc0d28"}},"staticQueryHashes":[]}