{"componentChunkName":"component---src-templates-blog-js","path":"/e69c80e8bf91e58699-chrome-extension-e79a84e4b880e4ba9be5bf83e5be97/","result":{"data":{"blog":{"id":"85ba4504-b8dc-555a-9066-8582d89655a2","html":"<p>有幸找到一个可以专门写 chrome extension 的工作，非常开心，可以专心的写 chrome extension 了。看了一些别人的 chrome extension 自己也有了一些新的体会，写在这里，留个未来的自己。</p>\n<p>最近在做的这个扩展是 <a href=\"https://mei.fm\">mei.fm</a> 的一键收藏扩展。整体来说，这个扩展的功能并不是非常复杂。但是，再简单也是有一定工作量的。而且，程序是为变化而生的，最初的架构体系做的比较顺手对以后的工作也是有好处的。</p>\n<h2 id=\"调研\" style=\"position:relative;\">调研<a href=\"#%E8%B0%83%E7%A0%94\" aria-label=\"调研 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先，我做了一些调研的工作。重点查看了 evernote clipper 以及 pocket 两个类似的产品。看了他们之后才知道做一个这样的插件没有表象那么简单。尤其是读了 pocket extension 的源码确实是给我了不少的启发。</p>\n<p>pocket 里面有一个很不错的结构就是让 background page 作为处理事务的中枢。让 content page 以及 popup 的所有请求利用 chrome extension 所提供的 sendRequest 的 api 发送给 background 去处理，然后 bg 将处理的结果以 callback 的形式发送回去。</p>\n<blockquote>\n</blockquote>\n<p>chrome.extension.sendRequest(string extensionId, any request, function responseCallback)</p>\n<p>chrome.extension.onRequest.addListener(function(any request, MessageSender sender, function sendResponse) {...});</p>\n<p>详见<a href=\"https://code.google.com/chrome/extensions/tabs.html\">https://code.google.com/chrome/extensions/tabs.html</a> 以及 <a href=\"https://code.google.com/chrome/extensions/extension.html\">https://code.google.com/chrome/extensions/extension.html</a></p>\n<p>这样做的好处就是可以更好的组织自己的代码，让 content page 以及 popup 去专注于页面的展示，而把逻辑以及 ajax 的东西集中在 bg 去做。比如，在 pocket 中会用到一个 content script 用来显示保存的状态。它每次动作对 bg 发送请求，让 bg 把链接保存到 pocket，然后它根据 bg 返回的信息，进行相应的信息提示的工作。</p>\n<blockquote>\n<p>图丢了</p>\n</blockquote>\n<h2 id=\"实践\" style=\"position:relative;\">实践<a href=\"#%E5%AE%9E%E8%B7%B5\" aria-label=\"实践 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"代码的组织\" style=\"position:relative;\">代码的组织<a href=\"#%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%84%E7%BB%87\" aria-label=\"代码的组织 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我很仔细的看了 pocket 的代码组织并非常的认同它的组织方式，那么我就直接采取了它的结构。把与 mei.fm 请求相关的方法单独做一个命名空间，api。然后所有其他页面的逻辑请求都通过 sendRequest 的方式发送给 bg.js 来处理。但是，chrome extension 的 onRequest 监听器不监听自己页面的 request 事件，那么我只好对 bg 页面的处理单独做了处理（这个很让人伤心）。</p>\n<h3 id=\"面对频繁改变的-api-接口的办法\" style=\"position:relative;\">面对频繁改变的 api 接口的办法<a href=\"#%E9%9D%A2%E5%AF%B9%E9%A2%91%E7%B9%81%E6%94%B9%E5%8F%98%E7%9A%84-api-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8A%9E%E6%B3%95\" aria-label=\"面对频繁改变的 api 接口的办法 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>其实我觉得既然已经做到了 chrome extension 的地步了，那么其提供的 api 应当是比较稳定的了。但是，很遗憾，不是这样。甚至是在我把插件做完的时候，有些 api 还是处于无法使用的状态。那么，我自己需要一个模拟 api 的机制了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>debug<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"requestId\":\"url68a1-9\",\"providerId\":\"solrs-0.1\",\"object\":\"url\",\"errCode\":0,\"dice\":0,\"items\":[{\"id\":\"5c9ccc75421a2acbffa982f5fd123134\",\"score\":0.92352885,\"provider\":\"solrs-0.1\",\"detail\":{\"best_title\":\"皇马拜仁裁判确定：欧冠奥运决赛主裁 吹拜仁漏 3 点球\",\"url\":\"http://sports.sina.com.cn/g/2012-04-24/09206035821.shtml\"}},{\"id\":\"051e0cd0943d490f51cb7be1a502dbb9\",\"score\":0.24958704,\"provider\":\"solrs-0.1\",\"detail\":{\"best_title\":\"视频-2011 百大进球 TOP20 梅西 C 罗鲁尼内马尔竞风流\",\"url\":\"http://sports.sina.com.cn/g/video/2011Top100goal/index.shtml\"}}]}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          data <span class=\"token operator\">=</span> <span class=\"token function\">_pre_process</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cmd'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>success <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>failed <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> request_url<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">uid</span><span class=\"token operator\">:</span> localStorage<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cnt</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ts</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">'mei.fm'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> url<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            data <span class=\"token operator\">=</span> <span class=\"token function\">_pre_process</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>success <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>failed <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          callback <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span>failed <span class=\"token operator\">&amp;&amp;</span> callback<span class=\"token punctuation\">.</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>用 setTimeout 去模拟一个 ajax 请求真是伤不起唉。然后面对返回的数据结构的不确定，我甚至有做个数据结构验证的东西...</p>\n<h3 id=\"不要忘了断网的情况\" style=\"position:relative;\">不要忘了断网的情况<a href=\"#%E4%B8%8D%E8%A6%81%E5%BF%98%E4%BA%86%E6%96%AD%E7%BD%91%E7%9A%84%E6%83%85%E5%86%B5\" aria-label=\"不要忘了断网的情况 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>虽说这是个特殊的情况，但是我还是通过设置 ajax 的 timeout 去做了这个断网的处理，所以调用 jquery 的 api 差不多全部都是 $.ajax 而不是 $.post 或者 $.get。</p>\n<h2 id=\"感想\" style=\"position:relative;\">感想<a href=\"#%E6%84%9F%E6%83%B3\" aria-label=\"感想 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>不管东西是多大多小，想做的完美其实都是要下功夫的。面对频繁的变化，你的代码是否可以让你很容易的扩展，或者是修改功能呢？我自己是不敢保证的。努力去做到这个才能算是不错的设计。我还是需要在这条路上走的更远。</p>\n<p>然后就是单元测试的问题了。代码的修改是不可避免的，尤其是做所谓的重构。但是，目前来看，我很不想去做这个工作。因为我没有想到好的办法去做这个单元测试的工作。如果修改了代码反而让程序跑不起来了确实就让人更揪心了。如何拆分代码，并用更好的办法去测试代码也是个很重要的事情。</p>\n<p>更好的使用 git 有可能很好的减少自己的心理负担。什么时候应该打 tag 怎么撤销自己的一个 commit 怎么去拉一个分支都是我需要做学习的事情。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E8%B0%83%E7%A0%94\">调研</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9E%E8%B7%B5\">实践</a></p>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%84%E7%BB%87\">代码的组织</a></li>\n<li><a href=\"#%E9%9D%A2%E5%AF%B9%E9%A2%91%E7%B9%81%E6%94%B9%E5%8F%98%E7%9A%84-api-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8A%9E%E6%B3%95\">面对频繁改变的 api 接口的办法</a></li>\n<li><a href=\"#%E4%B8%8D%E8%A6%81%E5%BF%98%E4%BA%86%E6%96%AD%E7%BD%91%E7%9A%84%E6%83%85%E5%86%B5\">不要忘了断网的情况</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%84%9F%E6%83%B3\">感想</a></p>\n</li>\n</ul>","frontmatter":{"title":"最近写 chrome extension 的一些心得","date":"June 10, 2012","tags":["chrome","extension"]},"excerpt":"有幸找到一个可以专门写 chrome extension 的工作，非常开心，可以专心的写 chro…"}},"pageContext":{"id":"85ba4504-b8dc-555a-9066-8582d89655a2"}},"staticQueryHashes":["26522286"],"slicesMap":{}}