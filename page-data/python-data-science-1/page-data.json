{"componentChunkName":"component---src-templates-blog-js","path":"/python-data-science-1","result":{"data":{"blog":{"id":"60e03530-c568-5e21-8297-522259f30fe1","html":"<p>NumPy（Numerical Python 的简称）提供了 Python 中高效计算的数据结构以及丰富的数据处理方法。Numpy 的 array 和 Python 的 list 接口非常相似，但 Numpy 却要比 list 快的多。NumPy 目前几乎是 Python 整个数据科学工具体系的核心，所以无论数据科学的哪个方面对你感兴趣，花费时间来学习使用 NumPy 的是非常值得的。</p>\n<p>我们这里要讲的 NumPy 版本为 <code>1.11.1</code> 可以通过如下的方法在 Python  中查看：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy\nnumpy<span class=\"token punctuation\">.</span>__version__</code></pre></div>\n<p>然后使用 NumPy 的时候基本都是用 <code>np</code> 作为引入的缩写：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</code></pre></div>\n<p>所以后面如果看到 <code>np.xxx</code> 的地方就知道是在用 <code>numpy</code> 了。</p>\n<p>NumPy 这一章节包含两部分内容，一部分讲述其基础数据结构，里面涉及了一些很基础的、大家可能还没有深究的问题，比如为什么它比 Python 的 list 快很多、为什么它用起来和 list 非常相似，这也是这部分重点介绍的部分。另一部分就是介绍 NumPy 中都包含了什么基本的函数，这一部分的很多内容都可以通过文档查询的到，不过这里会讲述一些常用的以及让人迷惑的函数的用法。</p>\n<p>虽然我已经尽量略去了那些额外的示例以及大部分人很少涉及到的犄角旮旯，但是这一部分依然会被分割为两个部分进行讲解，这一部分介绍了 NumPy 的基本数据结构以及其快速运算的原理以及基本的数据操作，下一部分介绍 NumPy 的广播运算、高级索引以及排序。</p>\n<h2 id=\"python-的数据类型\" style=\"position:relative;\">Python 的数据类型<a href=\"#python-%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\" aria-label=\"python 的数据类型 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"python-int-不仅仅是-int\" style=\"position:relative;\">Python Int 不仅仅是 Int<a href=\"#python-int-%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF-int\" aria-label=\"python int 不仅仅是 int permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Python 属于动态类型语言，其变量在声明时是不需要定义其类型的，并且一个变量也可以被赋值为任意类型。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">\"four\"</span></code></pre></div>\n<p>在 Python 中是合法的，而在 C 这样的静态类型语言中这样就会报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>动态类型增加了 Python 的易用性，但在实际运算的过程中 Python 的解释器总是要知道当前的这个变量到底存储的是什么类型以便进行相应的计算的，因此 Python 的变量不仅仅包含了数值，也包含了其类型的信息。</p>\n<p>默认的 Python 语言是由 C 语言编写，并且 Python 的变量就是一个 C 的结构体。例如当我们在 Python 中定义一个整型：x = 100000，x 不是一个纯粹的整数，它是一个指向一个 C 语言结构体的指针。如果我们查看 Python 3.4 的源码就可以看到实现 Python 中的整型（实际上是长整型）的代码如下（其中的一些 C 语言宏已经被展开了）：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_longobject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> ob_refcnt<span class=\"token punctuation\">;</span>\n    PyTypeObject <span class=\"token operator\">*</span>ob_type<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">size_t</span> ob_size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> ob_digit<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到，除了保存了真正的数据的 <code>ob_digit</code> 之外，Python 还保存了引用计数器、类型、数据长度这三个信息。</p>\n<h3 id=\"list-也不仅仅是数组\" style=\"position:relative;\">List 也不仅仅是数组<a href=\"#list-%E4%B9%9F%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E6%95%B0%E7%BB%84\" aria-label=\"list 也不仅仅是数组 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Python 的 list 中的每一个元素可以是不同的类型，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">L3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>是合法的。不过在这里灵活性在需要进行大量的数据操作的时候就成为了一种负担：为了允许动态类型，list 中的每一个元素都需要包含它自己的类型信息、引用计数以及其他信息。在这里所有的变量的类型是一样的，每个元素所包含的类型信息是冗余的，如果可以用固定类型数组来保存则会高效的多。</p>\n<h2 id=\"numpy-数组\" style=\"position:relative;\">NumPy 数组<a href=\"#numpy-%E6%95%B0%E7%BB%84\" aria-label=\"numpy 数组 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>与 Python list 不同，NumPy array 的所有元素类型相同。如果类型不同 NumPy 会进行类型转换（这里，整型被转为浮点类型）：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'float32'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如上，我们可以利用 Python 的 list 来创建 Numpy 的数组，也可以利用 NumPy 提供的函数来创建数组：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 创建一个长度为 10，数据类型为整型，数据全为 0 的数组</span>\nnp<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 创建一个 3x5 的二维数组，数据类型为浮点型，数据全为 1</span>\nnp<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 创建一个 3x5 的数组，数据全为 3.14</span>\n\n<span class=\"token comment\"># 创建一个由线性序列填充的数组</span>\n<span class=\"token comment\"># 从 0 到 20，步长为 2</span>\n<span class=\"token comment\"># 与 Python 内建的 range 方法类似</span>\nnp<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建一个从 0 到 1 均匀分割为 5 个元素的数组</span>\nnp<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 采用均匀分布创建一个 3x3 的数组</span>\n<span class=\"token comment\"># 默认均匀分布范围从 0 到 1</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 采用高斯分布生成的值填充的 3x3 的数组</span>\n<span class=\"token comment\"># 其中高斯分布的均值为 0 标准差为 1</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建一个采用 [0, 10] 分为的随机数填充的 3x3 的数组</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建一个 3x3 的单位矩阵</span>\nnp<span class=\"token punctuation\">.</span>eye<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 创建一个未初始化的数组，其中的值为所分配的内存的值</span>\nnp<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"universal-functions\" style=\"position:relative;\">Universal Functions<a href=\"#universal-functions\" aria-label=\"universal functions permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>NumPy 之所以成为了 Python 数据科学的基础在于其提供了一整套高效计算的方案，前面提到了其固定类型数组所带来的好处，这一部分讲述其通过 universal functions 实现的向量化操作。</p>\n<p>默认的 Python 循环是非常缓慢的，虽然有一些其他的 Python 编译方案想要让 Python 的执行速度变得快起来，但是其普及程度都远不如默认的 CPython。例如下面的一个求倒数操作，Python 的执行速度慢的令人发指：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compute_reciprocals</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    output <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        output<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> output\n\nvalues <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nbig_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">%</span>timeit compute_reciprocals<span class=\"token punctuation\">(</span>big_array<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1 loop, best of 3: 205 ms per loop</span></code></pre></div>\n<p>事实证明，这里的瓶颈不是操作本身，而是 CPython 在循环的每个周期必须进行的类型检查和函数调度。每次计算倒数时，Python 首先检查对象的类型并查找适合该类型的函数来执行计算。如果我们是在编译型的语言中，类型在代码执行之前就已知，那么计算速度就会快得多。</p>\n<p>对于许多类型的操作，NumPy 提供了执行这种针对静态类型的编译型的操作，这被称为<em>向量化</em>运算。这可以通过简单地对整个数组执行操作来实现，这相当于对每个元素应用操作。这种向量化方法旨在将循环推入编译层，这是 NumPy 高效运算的基础。看一看对 big_array 的执行速度，与 Python 循环相比，我们看到了数量级的飞跃：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">%</span>timeit <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> big_array<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 100 loops, best of 3: 4.14 ms per loop</span></code></pre></div>\n<p>NumPy中的向量化操作通过 ufuncs 实现，其主要目的是加速 NumPy 数组中的重复操作。与等价的 Python 循环相比使用 ufuncs 的向量化运算基本上都是要快一些，在数组规模比较庞大的时情况下更是如此。当你在 Python 中看到了循环你就应当考虑它是否应当替换为一个向量化的操作。</p>\n<p>大多数 Python 的基本运算 NumPy 都对其进行了向量化，即都有对应的 ufuncs：</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Equivalent ufunc</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code></td>\n<td><code>np.add</code></td>\n<td>Addition (e.g., <code>1 + 1 = 2</code>)</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><code>np.subtract</code></td>\n<td>Subtraction (e.g., <code>3 - 2 = 1</code>)</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><code>np.negative</code></td>\n<td>Unary negation (e.g., <code>-2</code>)</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td><code>np.multiply</code></td>\n<td>Multiplication (e.g., <code>2 * 3 = 6</code>)</td>\n</tr>\n<tr>\n<td><code>/</code></td>\n<td><code>np.divide</code></td>\n<td>Division (e.g., <code>3 / 2 = 1.5</code>)</td>\n</tr>\n<tr>\n<td><code>//</code></td>\n<td><code>np.floor_divide</code></td>\n<td>Floor division (e.g., <code>3 // 2 = 1</code>)</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td><code>np.power</code></td>\n<td>Exponentiation (e.g., <code>2 ** 3 = 8</code>)</td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td><code>np.mod</code></td>\n<td>Modulus/remainder (e.g., <code>9 % 4 = 1</code>)</td>\n</tr>\n</tbody>\n</table>\n<p>还有一些额外的函数，这里仅仅展示其中的一部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 绝对值</span>\nnp<span class=\"token punctuation\">.</span><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 三角函数</span>\nnp<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 指数函数</span>\nnp<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 聚合操作</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 15</span>\nnp<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">.</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 120</span>\n\n<span class=\"token comment\"># 外积操作</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>multiply<span class=\"token punctuation\">.</span>outer<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([[ 1,  2,  3,  4,  5],</span>\n<span class=\"token comment\">#        [ 2,  4,  6,  8, 10],</span>\n<span class=\"token comment\">#        [ 3,  6,  9, 12, 15],</span>\n<span class=\"token comment\">#        [ 4,  8, 12, 16, 20],</span>\n<span class=\"token comment\">#        [ 5, 10, 15, 20, 25]])</span></code></pre></div>\n<h2 id=\"numpy-数组的基本操作\" style=\"position:relative;\">NumPy 数组的基本操作<a href=\"#numpy-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\" aria-label=\"numpy 数组的基本操作 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>NumPy 的数组操作和 Python 的 list 非常的类似，这里从以下几个方面进行介绍：</p>\n<ul>\n<li><em>数组的属性</em>：长度，维度，内存占用大小，元素的类型</li>\n<li><em>数组的索引</em>：获取或修改数组中的单个元素</li>\n<li><em>数组的切片</em>：获取或修改数组中的子数组内容</li>\n<li><em>数组的重塑（reshape等操作）</em>：更改一个数组的形状</li>\n<li><em>数组的连接与分割</em>：连接多个数组或者将单个数组分割为多个数组</li>\n</ul>\n<h3 id=\"numpy-的基本属性\" style=\"position:relative;\">NumPy 的基本属性<a href=\"#numpy-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7\" aria-label=\"numpy 的基本属性 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code>.ndim</code> 维度</li>\n<li><code>.shape</code> 每个维度的长度</li>\n<li><code>.size</code> 整个数组的长度，等于各个维度长度之积</li>\n<li><code>.dtype</code> 内部数据的类型</li>\n<li><code>.itemsize</code> 每个元素的字节长度</li>\n<li><code>.nbytes</code> 整个数组的字节长度，等于 <code>.itemsize * .size</code></li>\n</ul>\n<p>例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">.</span>ndim\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">.</span>shape\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">.</span>size\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">.</span>dtype\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">.</span>itemsize\n<span class=\"token keyword\">print</span> x<span class=\"token punctuation\">.</span>nbytes</code></pre></div>\n<p>其结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2\n(3, 4)\n12\nint64\n8\n96</code></pre></div>\n<h3 id=\"numpy-的索引\" style=\"position:relative;\">NumPy 的索引<a href=\"#numpy-%E7%9A%84%E7%B4%A2%E5%BC%95\" aria-label=\"numpy 的索引 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>NumPy 数组的索引和 list 基本一致，也是从零开始计数，也支持负数索引，不过在多元数组时采用逗号分隔的 tuple 类型进行索引（list 采用多个方括号的方式，比如 a[1][2]）：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nx1<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\nx1<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\nx2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nx2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span></code></pre></div>\n<p>当然，NumPy 数组中的类型是一致的，因此赋值其他类型会被强制转换：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span> <span class=\"token comment\"># 会被转换为 3</span></code></pre></div>\n<h3 id=\"numpy-的数组切片\" style=\"position:relative;\">NumPy 的数组切片<a href=\"#numpy-%E7%9A%84%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87\" aria-label=\"numpy 的数组切片 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>NumPy 数组也支持用 <code>:</code> 进行切片操作（slicing），切片的参数格式为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[start:stop:step]</code></pre></div>\n<p>其中如果 start 没有提供则为 0，如果 stop 没有提供则为当前维度的长度，如果 step 没有提供则为 1：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n\nx<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [0, 1, 2, 3, 4]</span>\n\nx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [4, 5, 6]</span>\n\nx<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [0, 2, 4, 6, 8]</span>\n\nx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [1, 3, 5, 7, 9]</span></code></pre></div>\n<p>当 step 为负数时 start 和 stop 的默认值互换。这也是一种将数组倒序的方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span>\n\nx<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># [5, 3, 1]</span></code></pre></div>\n<p>在对多维数组进行切片时不同维度通过逗号分隔：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># array([[9, 2, 7, 6],</span>\n<span class=\"token comment\">#       [2, 6, 1, 1],</span>\n<span class=\"token comment\">#       [9, 0, 0, 8]])</span>\n\nx2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># array([[9, 2, 7],</span>\n<span class=\"token comment\">#       [2, 6, 1]])</span>\n\nx2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[9, 7],</span>\n<span class=\"token comment\">#       [2, 1],</span>\n<span class=\"token comment\">#       [9, 0]])</span>\n\nx2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[8, 0, 0, 9],</span>\n<span class=\"token comment\">#       [1, 1, 6, 2],</span>\n<span class=\"token comment\">#       [6, 7, 2, 9]])</span></code></pre></div>\n<p>对二维数组获取其某一行或者某一列可以通过全切片与索引配合使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 第一列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 第一行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 第一行，后面的全切片可以省略</span></code></pre></div>\n<p><strong>注意</strong> NumPy 的切片是一个引用，而不是像 list 里面的是一个拷贝：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x2_sub <span class=\"token operator\">=</span> x2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x2_sub<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[9 2]</span>\n<span class=\"token comment\">#  [2 6]]</span>\nx2_sub<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[99  2  7  6]</span>\n<span class=\"token comment\">#  [ 2  6  1  1]</span>\n<span class=\"token comment\">#  [ 9  0  0  8]]</span></code></pre></div>\n<p>在处理大规模的数组的时候，这种操作不会带来大量额外的内存开销。在需要使用拷贝的时候可以用下面的方式进行：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x2_sub_copy <span class=\"token operator\">=</span> x2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"数组的重塑\" style=\"position:relative;\">数组的重塑<a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A1%91\" aria-label=\"数组的重塑 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>重塑，即修改数组的维度信息。比如把一个长度为 9 的一维数组变为一个 3x3 的二维数组：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>要注意，在 <code>reshape</code> 时其创建的新的数组的 <code>size</code> 必须和之前的数组一致。reshape 会尽量采用非拷贝的方式来处理初始数组，但是在初始数据没有提供连续的内存空间的时候就无法实施。类似的方法会在处理图像数据时很常见。</p>\n<p>重塑方法另一个常用的情况是将一个一维的数组转换为一个二维的行或者列矩阵。可以通过 reshape 或者 newaxis 方法实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 用 reshape 创建一个 shape 为 (1, 3) 的二维数组</span>\nx<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 用 np.newaxis 创建一个 (1, 3) 的二维数组</span>\nx<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 用 reshape 创建一个 (3, 1) 的二维数组</span>\nx<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 用 newaxis 创建一个 (3, 1) 的二维数组</span>\nx<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span></code></pre></div>\n<p>类似的转换比较常见，尤其是在做机器学习算法中需要将数据扩充为多维数组时。</p>\n<h3 id=\"数组的连接与分割\" style=\"position:relative;\">数组的连接与分割<a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%88%86%E5%89%B2\" aria-label=\"数组的连接与分割 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>一维数组的连接：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([1, 2, 3, 3, 2, 1])</span>\n\nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ 1  2  3  3  2  1 99 99 99]</span></code></pre></div>\n<p>二维数组的连接：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">grid <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nnp<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([[1, 2, 3],</span>\n<span class=\"token comment\">#        [4, 5, 6],</span>\n<span class=\"token comment\">#        [1, 2, 3],</span>\n<span class=\"token comment\">#        [4, 5, 6]])</span>\n\n<span class=\"token comment\"># 按照第二维连接</span>\nnp<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([[1, 2, 3, 1, 2, 3],</span>\n<span class=\"token comment\">#       [4, 5, 6, 4, 5, 6]])</span></code></pre></div>\n<p>在数组维度不一致的情况下采用 np.vstack 与 np.hstack 更清晰一些：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ngrid <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 按照行连接（垂直连接）</span>\nnp<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># array([[1, 2, 3],</span>\n<span class=\"token comment\">#        [9, 8, 7],</span>\n<span class=\"token comment\">#        [6, 5, 4]])</span>\n\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 按照列连接（水平连接）</span>\nnp<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>grid<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([[ 9,  8,  7, 99],</span>\n<span class=\"token comment\">#        [ 6,  5,  4, 99]])</span></code></pre></div>\n<p>类似地，np.dstack 会按照数组的第三维连接。</p>\n<p>与连接相反的操作是分割，通过 np.split，np.hsplit，np.vsplit 实现。通过传递一个索引数组说明分割的位置：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = [1, 2, 3, 99, 99, 3, 2, 1]\nx1, x2, x3 = np.split(x, [3, 5])\nprint(x1, x2, x3)\n# [1 2 3] [99 99] [3 2 1]</code></pre></div>\n<p>N 个分割点会生成 N + 1 个子数组。 np.hsplit 与 np.vsplit 类似：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">grid <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nupper<span class=\"token punctuation\">,</span> lower <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>vsplit<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>upper<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lower<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># [[0 1 2 3]</span>\n<span class=\"token comment\">#  [4 5 6 7]]</span>\n<span class=\"token comment\"># [[ 8  9 10 11]</span>\n<span class=\"token comment\">#  [12 13 14 15]]</span>\n\nleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hsplit<span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># [[ 0  1]</span>\n<span class=\"token comment\">#  [ 4  5]</span>\n<span class=\"token comment\">#  [ 8  9]</span>\n<span class=\"token comment\">#  [12 13]]</span>\n<span class=\"token comment\"># [[ 2  3]</span>\n<span class=\"token comment\">#  [ 6  7]</span>\n<span class=\"token comment\">#  [10 11]</span>\n<span class=\"token comment\">#  [14 15]]</span></code></pre></div>\n<p>类似地, np.dsplit 会按照数组的第三维分割。</p>\n<h2 id=\"聚合操作\" style=\"position:relative;\">聚合操作<a href=\"#%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C\" aria-label=\"聚合操作 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>NumPy 支持各种聚合函数，比如 <code>np.max</code> <code>np.min</code> <code>np.sum</code> <code>np.median</code> 这些方法一看就懂，不再一一列举。不过一个比较让人迷惑的点在于如何按照不同的维度进行聚合。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[ 0.22051857  0.27287109  0.96337129  0.78381157]</span>\n<span class=\"token comment\">#  [ 0.24552893  0.39914065  0.70804662  0.80235189]</span>\n<span class=\"token comment\">#  [ 0.33662843  0.65632293  0.25875078  0.52569568]]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>默认的 sum 是将所有维度的值加在一起，而聚合函数接受一个额外的参数 axis 用与指定沿着哪一个维度进行计算。例如我们想要按照列去找每一列的最小值就需要指定 axis=0：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([ 0.66859307,  0.03783739,  0.19544769,  0.06682827])</span></code></pre></div>\n<p>结果返回四个值，对应四列的最小值。类似的我们可以找到每一行的最大值：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([ 0.8967576 ,  0.99196818,  0.6687194 ])</span></code></pre></div>\n<p>axis 是指那个<strong>将要被处理的维度</strong>，而不是将要返回的维度。因此指定 axis=0 意味着第一个维度是要被处理的维度：对于二维数组磊说，这意味着每一列的数据将要被聚合。也就是说指定的 axis 最终会被变成 1，例如这里的一个 3x4 的数组，如果指定 axis=0 那么第一维会变成 1 所以会成为一个 1x4 的数组，那么就是每一列做了聚合。类似地，如果 axis=1 那么数组会变成一个 3x1 的数组，那么数组就是按照行做了聚合。</p>\n<p>大多数聚合函数都能够处理 NaN 数值的情况：计算过程中会忽略这些 NaN 数据，很多对于 NaN 处理的函数是在 NumPy 1.8 之后添加的，旧版本并不支持。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#python-%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">Python 的数据类型</a></p>\n<ul>\n<li><a href=\"#python-int-%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF-int\">Python Int 不仅仅是 Int</a></li>\n<li><a href=\"#list-%E4%B9%9F%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E6%95%B0%E7%BB%84\">List 也不仅仅是数组</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#numpy-%E6%95%B0%E7%BB%84\">NumPy 数组</a></p>\n</li>\n<li>\n<p><a href=\"#universal-functions\">Universal Functions</a></p>\n</li>\n<li>\n<p><a href=\"#numpy-%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">NumPy 数组的基本操作</a></p>\n<ul>\n<li><a href=\"#numpy-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7\">NumPy 的基本属性</a></li>\n<li><a href=\"#numpy-%E7%9A%84%E7%B4%A2%E5%BC%95\">NumPy 的索引</a></li>\n<li><a href=\"#numpy-%E7%9A%84%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87\">NumPy 的数组切片</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E9%87%8D%E5%A1%91\">数组的重塑</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%88%86%E5%89%B2\">数组的连接与分割</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C\">聚合操作</a></p>\n</li>\n</ul>","frontmatter":{"title":"Python Data Science, NumPy 1","date":"March 18, 2017"},"excerpt":"NumPy（Numerical Python 的简称）提供了 Python 中高效计算的数据结构以…"}},"pageContext":{"id":"60e03530-c568-5e21-8297-522259f30fe1"}},"staticQueryHashes":["4202924991"]}