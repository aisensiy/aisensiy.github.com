{"componentChunkName":"component---src-templates-blog-js","path":"/styled-components","result":{"data":{"blog":{"id":"cfece9eb-c555-5e7a-8d24-261353d41ca2","html":"<p>这么久以来，各种各样的框架试图让 web 组件化。到目前为止，react 基本做到了这一点：用一个自定义标签的方式组织 html 在一起。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Wrapper</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProductList</span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Footer</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Wrapper</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>上面的这种写法在传统的 web 开发中真是不敢想象，然而在 react 中的确实现了。如果你使用 <code class=\"language-text\">create-react-app</code> 这样的脚手架工具，你可以快速的搭建起来这样的体系。然而，即便是这样子，web 组件化依然有一个点没有解决：如何将样式和组件绑定在一起。当然，试图解决这个问题的工具有很多，也有很多人不认为这是一个问题。我在这里试图解释一些观点，并阐述为什么我觉得用 <code class=\"language-text\">styled-components</code> 可以在一定程度上解决一系列问题。</p>\n<h2 id=\"写-css-的最佳方式\" style=\"position:relative;\">写 css 的最佳方式<a href=\"#%E5%86%99-css-%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E5%BC%8F\" aria-label=\"写 css 的最佳方式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>目前，react 阵营对写 css 这个问题有两个阵营。一个阵营表示 css 应当和 js 写在一起，而另一个阵营则认为 css 原本是可以和 js 分离的。我们在这里做一个简单的例子。</p>\n<p>首先是 css in js 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tmargin<span class=\"token operator\">:</span> <span class=\"token string\">\"1em 2em\"</span><span class=\"token punctuation\">,</span>\n\tcolor<span class=\"token operator\">:</span> <span class=\"token string\">\"gray\"</span><span class=\"token punctuation\">,</span>\n\tbackground<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">StyledDiv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token constant\">A</span> test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而 css 和 js 分离就很简单了：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">\n<span class=\"token selector\">.styled-div</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 1em 2em<span class=\"token punctuation\">;</span>\n\t<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"./StyledDiv.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">StyledDiv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"styled-div\"</span><span class=\"token operator\">></span><span class=\"token constant\">A</span> test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，这里展示的 css in js 只是一种非常原始的方式：用 object 直接将 style 注入到组件中。这样做的好处有两个：</p>\n<ol>\n<li>css 不在是全局的了，style 的生命周期与生命范围终于和 component 一致了，那么因为全局变量导致的可怕的为何灾难缓解了</li>\n<li>在组件内对样式的操纵可以直接进行，无需通过 className 处理，当然也避免了创建全局的 className 了</li>\n</ol>\n<p>可以看到，这里基本上就是以解决 css 的全局性为出发点的。</p>\n<p>而 css 和 js 的分离当然也有其天然的优势：</p>\n<ol>\n<li>可以用 css 的方式写 css，css 选择器随便用</li>\n<li>我还可以加各种 preprocessor 和 post processor，比如写 scss 比如加 auto-prefix</li>\n</ol>\n<p>对我来说，用 object 的方式去写 css 体验实在是太差了。而且作为 <code class=\"language-text\">css</code> 的 <code class=\"language-text\">cascade</code>，如果不能用多级的选择器去定位 css 而是在一层层的 html 元素中添加样式简直就是噩梦。我不觉得这样的可维护水平比全局 css 要高...所以我觉得如果能把两者的优势结合在一起，就应该是一个可以被更多人介绍的方式：</p>\n<ol>\n<li>用 css 的语法写 css</li>\n<li>能创建局部 className</li>\n<li>支持 preprocessor 和 postprocessor</li>\n</ol>\n<p>那么在这里就不得不提另外一个有意思的东西：<a href=\"https://github.com/css-modules/css-modules\">css-modules</a>。它的主要思想是通过为 css 生成随机的类名称的方式来建立一种局部类命名的方式。</p>\n<p><a href=\"https://www.styled-components.com\"><code class=\"language-text\">styled-components</code></a> 基本上集成了这个工作，并在此基础上基本实现了以上的三点要求。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Summary <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin-top: 2em;\n  text-align: right;\n\n  .price {\n    color: #ff0036;\n    font-size: 1.2em;\n  }\n\n  &amp;> * {\n    display: inline-block;\n    margin-left: 1em;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">Summary</code> 的 css 是以 css 的方式编写的，支持多层次的定义</li>\n<li><code class=\"language-text\">styled-components</code> 会把上面定义的 css 以一个特别的 className 的方式注入到元素上，实现了局部类定义</li>\n<li><code class=\"language-text\">styled-components</code> 支持了基本的类似于 scss 的嵌套语法（还支持 extend 语法，这里并没有展示），并且内嵌了 <code class=\"language-text\">autoprefix</code> 的模块</li>\n</ol>\n<p>我最近开始在一个项目上使用它，整体来说还是感觉不错。</p>\n<h2 id=\"兼容现在已有的-react-components-和-css-框架\" style=\"position:relative;\">兼容现在已有的 react components 和 css 框架<a href=\"#%E5%85%BC%E5%AE%B9%E7%8E%B0%E5%9C%A8%E5%B7%B2%E6%9C%89%E7%9A%84-react-components-%E5%92%8C-css-%E6%A1%86%E6%9E%B6\" aria-label=\"兼容现在已有的 react components 和 css 框架 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code class=\"language-text\">styled-components</code> 采用的 css-module 的模式有另外一个好处就是可以很好的与其他的主题库进行兼容。因为大部分的 css 框架或者 css 主题都是以 className 的方式进行样式处理的，额外的 className 和主题的 className 并不会有太大的冲突。你可以认为这是一个应当使用全局 css 的地方（所以我并不赞成用 styled-components 里面的 theming 接口去做这件事）。相对于以 object 的方式写 style 的 material-ui 真是好太多了，看看 material-ui 讲述如何进行<a href=\"http://www.material-ui.com/#/customization/styles\">样式自定义</a>就知道这并不是一个很成熟的想：</p>\n<ol>\n<li>css 内嵌到组建里影响了组件自身结构的表现</li>\n<li>inline style 意味着最高的优先级，其无法和其他的主题库配合</li>\n</ol>\n<p><code class=\"language-text\">styled-components</code> 的语法同样支持对一个 React 组件进行扩展：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> StyledDiv <span class=\"token operator\">=</span> <span class=\"token function\">styled</span><span class=\"token punctuation\">(</span>Row<span class=\"token punctuation\">)</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  position: relative;\n  height: 100%;\n  .image img {\n    width: 100%;\n  }\n  .content {\n    min-height: 30em;\n    overflow: auto;\n  }\n  .content h2 {\n    font-size: 1.8em;\n    color: black;\n    margin-bottom: 1em;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里我把 <a href=\"https://ant.design\">ant design</a> 做为我默认的样式库，在其基础上我对其一些元素做了增强。两者可以很好的在一起使用。</p>\n<p>这里符一个 <a href=\"https://github.com/aisensiy/pet-store-front-end\">github 项目</a> 里面包含了很多使用 <code class=\"language-text\">styled-components</code> 的例子。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"http://sass-lang.com/\">scss</a></li>\n<li><a href=\"https://github.com/MicheleBertoli/css-in-js\">js in css</a></li>\n<li><a href=\"https://www.styled-components.com\">styled components</a></li>\n<li><a href=\"https://github.com/postcss/autoprefixer\">auto-prefix</a></li>\n<li><a href=\"http://www.material-ui.com/\">material-ui</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#%E5%86%99-css-%E7%9A%84%E6%9C%80%E4%BD%B3%E6%96%B9%E5%BC%8F\">写 css 的最佳方式</a></li>\n<li><a href=\"#%E5%85%BC%E5%AE%B9%E7%8E%B0%E5%9C%A8%E5%B7%B2%E6%9C%89%E7%9A%84-react-components-%E5%92%8C-css-%E6%A1%86%E6%9E%B6\">兼容现在已有的 react components 和 css 框架</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></li>\n</ul>","frontmatter":{"title":"用 styled-components 在 react 中编写 css","date":"July 02, 2017"}}},"pageContext":{"id":"cfece9eb-c555-5e7a-8d24-261353d41ca2"}},"staticQueryHashes":[]}