{"componentChunkName":"component---src-templates-blog-js","path":"/2018/05/25/docker-storage/","result":{"data":{"blog":{"id":"c402fe54-bf67-5e3c-96f4-e4e00f526936","html":"<p>由于自己接触 docker 的时候和现在的 docker 不少的 api 已经有所变化，还是需要更新一下自己的知识。这篇文章大部分源自 docker 的官方文档，然后还有部分自己添油加醋。</p>\n<p>在 docker 中所有的文件是存储在容器的 <code class=\"language-text\">writable container layer</code>。存在以下的问题：</p>\n<ul>\n<li>容器里的数据不好拿出来</li>\n<li>在容器里写依赖于 <code class=\"language-text\">storage driver</code> 采用了 <code class=\"language-text\">union filesystem</code> 效率低下</li>\n</ul>\n<p>然而 docker 提供了可以直接往 host 机器写内容的方式：</p>\n<ol>\n<li>volumes</li>\n<li>bind mounts</li>\n<li>tmpfs</li>\n</ol>\n<p>采用这些方式，即使容器关了甚至删除了数据依然不会丢失。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15272493128441.jpg\" alt=\"111\"></p>\n<h2 id=\"选择适合的数据绑定方式\" style=\"position:relative;\">选择适合的数据绑定方式<a href=\"#%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F\" aria-label=\"选择适合的数据绑定方式 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先不论是采用哪种方式，在容器里看起来都是一样的。</p>\n<ul>\n<li>Volume 将数据存储在 host 但是其实是由 docker 管理的 <code class=\"language-text\">/var/lib/docker/volumes</code> 非 docker 无法使用</li>\n<li>Bind mounts 是可以将数据随意存储在任意 host system 文件系统中，任何非 docker 应用也有权利对其进行使用</li>\n<li>tmpfs mounts 将文件存储在内存中</li>\n</ul>\n<h2 id=\"更多详情\" style=\"position:relative;\">更多详情<a href=\"#%E6%9B%B4%E5%A4%9A%E8%AF%A6%E6%83%85\" aria-label=\"更多详情 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"Volume\" style=\"position:relative;\">Volume<a href=\"#Volume\" aria-label=\"Volume permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Volume 可以通过 <code class=\"language-text\">docker volume create</code> 显式创建，当然 docker 也可以在运行的时候创建 volume（比如在 <code class=\"language-text\">Dockerfile</code> 里面有 <code class=\"language-text\">VOLUME</code> 语法时如果没有没有显式绑定 volume 那么就会默认创建一个新的 volume）。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker volume create data\ndocker run -v data:/data ...</code></pre></div>\n<p><strong>注意</strong> <code class=\"language-text\">docker volume inspect xxx</code> 会得到如下的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    {\n        \"CreatedAt\": \"2018-05-22T07:53:58Z\",\n        \"Driver\": \"local\",\n        \"Labels\": null,\n        \"Mountpoint\": \"/var/lib/docker/volumes/test/_data\",\n        \"Name\": \"test\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]</code></pre></div>\n<p>其存储的位置为 <code class=\"language-text\">/var/lib/docker/volumes/test/_data</code> 但是在 Mac OS 下你会发现根本没有这个目录，那是因为 Mac 下的 docker 还是以 linux 虚拟机的形式运行的，你所看到的是其虚拟机下的目录而不是 Mac 下的目录。</p>\n<h3 id=\"Bind-mounts\" style=\"position:relative;\">Bind mounts<a href=\"#Bind-mounts\" aria-label=\"Bind mounts permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>其功能相对 volume 比较有限。但是其好处是可以绑定任意的外部目录给 docker，尤其是在做一些外部数据共享给 docker 的时候非常适合。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -v /tmp/data:/data:ro ...</code></pre></div>\n<h3 id=\"Tmpfs\" style=\"position:relative;\">Tmpfs<a href=\"#Tmpfs\" aria-label=\"Tmpfs permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>我自己是没有直接使用过。基本就是用于沙盒环境吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run --tmpfs /data ...</code></pre></div>\n<h2 id=\"注意\" style=\"position:relative;\">注意<a href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"注意 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>两个特殊的场景：</p>\n<ol>\n<li>如果你 mount 一个 empty volume 到一个 container 中已经存在的文件夹，那么 container 会将容器目录中的内容拷贝到这个空的 volume 里面</li>\n<li>如果你使用 bind mount 或者一个非空的 volume 绑定到容器中某一个目录，那么目录里面的东西就会隐藏而只能看到 bind mount 或者 volume 里面的内容。注意，原有的内容不是被删除了而仅仅是被隐藏了</li>\n</ol>\n<h2 id=\"相关文献\" style=\"position:relative;\">相关文献<a href=\"#%E7%9B%B8%E5%85%B3%E6%96%87%E7%8C%AE\" aria-label=\"相关文献 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://docs.docker.com/storage/volumes/\">Docker Volumes</a></li>\n<li><a href=\"https://docs.docker.com/storage/bind-mounts/\">Use bind mounts</a></li>\n<li><a href=\"https://docs.docker.com/storage/volumes/\">Use Volumes</a></li>\n</ol>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%96%B9%E5%BC%8F\">选择适合的数据绑定方式</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%9B%B4%E5%A4%9A%E8%AF%A6%E6%83%85\">更多详情</a></p>\n<ul>\n<li><a href=\"#volume\">Volume</a></li>\n<li><a href=\"#bind-mounts\">Bind mounts</a></li>\n<li><a href=\"#tmpfs\">Tmpfs</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%B3%A8%E6%84%8F\">注意</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%9B%B8%E5%85%B3%E6%96%87%E7%8C%AE\">相关文献</a></p>\n</li>\n</ul>","frontmatter":{"title":"docker 存储","date":"May 25, 2018"}}},"pageContext":{"id":"c402fe54-bf67-5e3c-96f4-e4e00f526936"}},"staticQueryHashes":[]}