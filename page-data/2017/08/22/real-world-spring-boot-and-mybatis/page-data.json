{"componentChunkName":"component---src-templates-blog-js","path":"/2017/08/22/real-world-spring-boot-and-mybatis/","result":{"data":{"blog":{"id":"1197e3a4-5176-59ae-8dcb-042ec50d2176","html":"<p><a href=\"https://github.com/gothinkster/realworld\">Real World</a> 是由 <a href=\"https://thinkster.io/\">thinkster</a> 这样一个在线编程教育机构发起的一个前后端分离的项目规范。用以展示并作为教材教大家用 react、angular 等不同的前端框架或者 rails、django、spring boot 等不同的后端框架实现同一个项目时的实践是什么样子的。我觉得这个主意非常的好，它让大家对技术的讨论有了一个共同的主题，在采用不同的技术栈以及设计思路解决这个共同的问题的时候我们可以更确切的看到不同的方案之间的优劣，从而更切实的（而不是零散的代码和想象）了解不同框架、语言、设计思路在实现一个项目时的差异，从而帮助我们更好的选择项目的解决方案。当然，从单个技术栈来看，它提供了一个做出完整项目需要都需要哪些具体的知识点，可以当做某一个技术栈的入门小项目来学习和借鉴。</p>\n<p>虽然这个项目叫做 real world，相比 todomvc 这样的 hello world 确实复杂了不少，但是很显然它的复杂度还仅仅是一个人几个小时就能完成的水平，当然不能全面的反映出一个框架的水平，仅做参考。</p>\n<p>本篇对项目做一个整体的介绍，后续会有一些细节的介绍。文章中会涉及到一些 DDD（领域驱动设计） 相关的概念，想要更多的了解建议看看最下面相关材料中的链接。</p>\n<h2 id=\"项目功能\" style=\"position:relative;\">项目功能<a href=\"#%E9%A1%B9%E7%9B%AE%E5%8A%9F%E8%83%BD\" aria-label=\"项目功能 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"https://demo.realworld.io/#/\">conduit</a> 是 realworld 要实现的一个博客系统。具备一下的功能：</p>\n<ol>\n<li>用户的注册和登录</li>\n<li>用户可以发表、编辑文章</li>\n<li>用户可以对文章添加评论、点赞</li>\n<li>用户可以关注别的用户，关注的用户的文章会展示在用户的 feed 中</li>\n</ol>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090236378256.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>这是一个前后端分离的项目，其提供了后端 api 的<a href=\"https://github.com/gothinkster/realworld/tree/master/api\">规范</a>。这里，我们不评论其 API 设计的好坏，要完全遵循其设计并实现它。当然，对于不同的语言和框架实现都有其 API 设计的偏好，既然这里定死了一种规范，那么在实现的过程中难免会有一些 tricky 的地方需要我们去克服。</p>\n<h2 id=\"目录结构\" style=\"position:relative;\">目录结构<a href=\"#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\" aria-label=\"目录结构 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>如标题所述，这里我提供了一个 spring boot + spring mvc + mybatis 的实现。其大概的结构如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── JacksonCustomizations.java\n├── MyBatisConfig.java\n├── RealworldApplication.java\n├── api\n├── application\n├── core\n└── infrastructure</code></pre></div>\n<ol>\n<li><code class=\"language-text\">api</code> 是 web 层，实现了和 spring mvc 的 web 接口</li>\n<li><code class=\"language-text\">core</code> 是业务层，包含了最关键的业务实体和领域服务以及其各个实体之间的交互</li>\n<li><code class=\"language-text\">application</code> 是对外的服务层，由于这个项目本身的业务并不复杂，这里处理的基本都是各种信息的查询</li>\n<li><code class=\"language-text\">core</code> 中定义的大量接口在 <code class=\"language-text\">infrastructure</code> 包含了其具体的实现，比如 data mapper 的实现，具体的密码加密的实现等</li>\n<li>其他则是一些整体的配置类，如主类 <code class=\"language-text\">RealworldApplication</code> 数据库配置类 <code class=\"language-text\">MyBatisConfig</code> 等</li>\n</ol>\n<h2 id=\"六边形架构\" style=\"position:relative;\">六边形架构<a href=\"#%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84\" aria-label=\"六边形架构 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><a href=\"http://alistair.cockburn.us/Hexagonal+architecture\">六边形架构</a> 或者说是 <a href=\"https://www.infoq.com/news/2014/10/ddd-onion-architecture\">洋葱架构</a> 其实不是一个什么新东西，因为<strong>分层架构</strong>会导致其最底层的实现是数据库，而之前很多的业务逻辑和数据库是揉在一起的（事实上很多项目也确实这样，大量的存储过程中包含着业务的逻辑，业务和数据库紧密的结合在了一起）；但实际上，一个应用最核心的东西应该是<strong>业务逻辑</strong>，而业务逻辑是不应该和技术细节有强关联的，数据库实现和视图层一样，是某种技术细节，不应该和将其与业务逻辑绑定，所以应该用应该强调内部和外部：内部是我的业务逻辑，而外部与外界沟通的基础设施和技术细节，比如具体的数据库存储，比如 restful 的 api，再比如 html 的视图。</p>\n<p><img src=\"http://o8p12ybem.bkt.clouddn.com/15090236589859.jpg?imageView2/2/w/1200/q/75%7Cimageslim\" alt=\"\"></p>\n<p>通过这样的思考方式，我们可以认为 mysql 数据库实现仅仅是众多数据库实现中的一个而已，我们可以在不同的环境中轻易的替换掉它，尤其是为对业务的测试提供了可能：我们可以采用内存数据库或者 mock 轻松的实现业务测试。</p>\n<p>我所实现的这个 realworld 项目也基本遵循这个架构，首先在 <code class=\"language-text\">core</code> 中定义了我们的业务实体 <code class=\"language-text\">User</code> <code class=\"language-text\">Article</code> 已经各种 <code class=\"language-text\">Repository</code> 的接口。他们定义了这个项目核心实体的关系以及交互行为。其中具体的 Repository 的实现以及 web 接口的实现都与它无关。对于比较简单的数据创建等行为我们直接在 web 层中处理了，而相对比较麻烦的查询业务我们按照用例在 application 中提供。</p>\n<p>在 api 层直接创建用户：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> POST<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">RegisterParam</span> registerParam<span class=\"token punctuation\">,</span>\n                                 <span class=\"token class-name\">BindingResult</span> bindingResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">checkInput</span><span class=\"token punctuation\">(</span>registerParam<span class=\"token punctuation\">,</span> bindingResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n        registerParam<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        registerParam<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        encryptService<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>registerParam<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        defaultImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">UserData</span> userData <span class=\"token operator\">=</span> userQueryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">userResponse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserWithToken</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">,</span>\n                                               jwtService<span class=\"token punctuation\">.</span><span class=\"token function\">toToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 application 层创建一个 <code class=\"language-text\">findRecentArticles</code> 的服务，用于处理相对比较复杂的查询：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArticleDataList</span> <span class=\"token function\">findRecentArticles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> tag<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">String</span> favoritedBy<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">Page</span> page<span class=\"token punctuation\">,</span> \n                                          <span class=\"token class-name\">User</span> currentUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> articleIds <span class=\"token operator\">=</span> articleReadService<span class=\"token punctuation\">.</span><span class=\"token function\">queryArticles</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> \n                                                               author<span class=\"token punctuation\">,</span> \n                                                               favoritedBy<span class=\"token punctuation\">,</span> \n                                                               page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> articleCount <span class=\"token operator\">=</span> articleReadService<span class=\"token punctuation\">.</span><span class=\"token function\">countArticle</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> favoritedBy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>articleIds<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArticleDataList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> articleCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArticleData</span><span class=\"token punctuation\">></span></span> articles <span class=\"token operator\">=</span> articleReadService<span class=\"token punctuation\">.</span><span class=\"token function\">findArticles</span><span class=\"token punctuation\">(</span>articleIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fillExtraInfo</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArticleDataList</span><span class=\"token punctuation\">(</span>articles<span class=\"token punctuation\">,</span> articleCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>注意</strong> 这里之所以没有为创建数据的用例在 application 中创建 service 纯粹是因为它们比较简单，在面向复杂的场景时是可以提供的。</p>\n<h2 id=\"CQRS\" style=\"position:relative;\">CQRS<a href=\"#CQRS\" aria-label=\"CQRS permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 DDD 中 Repository 主要负责数据的持久化：它的任务非常的简单：要么是将内存中的 aggregate 储到数据库中，要么是从数据库中将指定 id 的实体从数据库中重新在内存中构建起来。它实际上是不负责那种复杂的查询业务的，比如获取被喜爱最多的 50 篇文章。更多的内容可以看<a href=\"/some-tips-for-ddd\">这篇文章</a>。</p>\n<p>CQRS 全称 Command Query Responsibility Segregation，强调一个系统的读模型和写模型是分离的。其中 DDD 所实现的是读模型，保证了业务的实现以及数据的一致性。而读模型则纯粹是利用底层数据库的优势将用户需要的数据拼装起来，完全不涉及到实体。<strong>这样的好处在于我们可以完全实现界面所需要的数据模型和真正的业务模型的独立演进，不会因为一个界面上数据展示的变化而导致本身的业务模型出现变更</strong>。当然，这里所谓的界面就是我们的 json API 规格。对于查询业务，我们在 <code class=\"language-text\">application/data</code> 下提供了单独的 <code class=\"language-text\">Data Transfer Object</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleData</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> slug<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> body<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> favorited<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> favoritesCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> createdAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> updatedAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tagList<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@JsonProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ProfileData</span> profileData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code class=\"language-text\">ArticleData</code> 就是 <code class=\"language-text\">DTO</code> 或者说是 <code class=\"language-text\">Presentation Model</code> 它和 API 文档中对数据的格式要求完全对齐而不考虑 Article 和 Author 到底应不应当属于一个聚合。</p>\n<p>而下面则是在 core 下的实体：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>of <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> slug<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> body<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tags<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> createdAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DateTime</span> updatedAt<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很显然，这里 Article 中并不包含 Author 的概念，因为它们并不属于一个聚合，Article 只能保存另外一个聚合的 Id (userId)。</p>\n<p>具体的代码见 <a href=\"https://github.com/gothinkster/spring-boot-realworld-example-app\">GitHub</a> 欢迎 star、fork、报 bug、提供 PR。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://github.com/gothinkster/realworld\">Real World</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">CQRS</a></li>\n<li><a href=\"https://aisensiy.github.io/2016/05/17/ddd-repository/\">DDD Repository</a></li>\n<li><a href=\"https://aisensiy.github.io/2016/04/20/some-tips-for-ddd/\">Some tips about DDD</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E5%8A%9F%E8%83%BD\">项目功能</a></li>\n<li><a href=\"#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">目录结构</a></li>\n<li><a href=\"#%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84\">六边形架构</a></li>\n<li><a href=\"#cqrs\">CQRS</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></li>\n</ul>","frontmatter":{"title":"Spring Boot + Spring MVC + MyBatis 版本的 Real World 实现","date":"August 22, 2017"}}},"pageContext":{"id":"1197e3a4-5176-59ae-8dcb-042ec50d2176"}},"staticQueryHashes":[]}