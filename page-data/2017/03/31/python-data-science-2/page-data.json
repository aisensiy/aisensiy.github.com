{"componentChunkName":"component---src-templates-blog-js","path":"/2017/03/31/python-data-science-2/","result":{"data":{"blog":{"id":"d4f8f5c3-ee33-5cd3-bb99-ae2b6dd0229c","html":"<p>这篇文章延续<a href=\"/python-data-science-1\">Python Data Science, NumPy 1</a>，介绍广播、高级索引以及数组排序。</p>\n<h2 id=\"广播\" style=\"position:relative;\">广播<a href=\"#%E5%B9%BF%E6%92%AD\" aria-label=\"广播 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>广播是在长度不同的数组上执行 ufunc（例如，加法，减法，乘法等）的一组规则。</p>\n<p>对于大小相同的 NumPy 数组是逐个元素执行计算的：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">+</span> b\n<span class=\"token comment\"># array([5, 6, 7])</span></code></pre></div>\n<p>广播允许对不同大小的数组执行这些操作 - 例如，我们可以将一个标量（想象它是一个 0 维数组）和一个数组相加：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">+</span> <span class=\"token number\">5</span>\n<span class=\"token comment\"># array([5, 6, 7])</span></code></pre></div>\n<p>我们可以认为是这个操作首先把 5 转换为了数组 [5, 5, 5] 然后进行运算。NumPy 广播在实际运算中并没有这么做，但是我们可以借用这个思路来理解广播。</p>\n<p>当然，对于更高维的数组也是可以的：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nM <span class=\"token operator\">+</span> a\n<span class=\"token comment\"># array([[ 1.,  2.,  3.],</span>\n<span class=\"token comment\">#        [ 1.,  2.,  3.],</span>\n<span class=\"token comment\">#        [ 1.,  2.,  3.]])</span></code></pre></div>\n<p>一维数组 a 在第二维被拉伸（或者说是在第二维被广播）以便匹配 M 的维度。</p>\n<p>还有更复杂的情况：即两个数组各自广播后计算：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\na <span class=\"token operator\">+</span> b\n<span class=\"token comment\"># array([[0, 1, 2],</span>\n<span class=\"token comment\">#        [1, 2, 3],</span>\n<span class=\"token comment\">#        [2, 3, 4]])</span></code></pre></div>\n<p>事实上，NumPy 是严格按照一些规则进行广播运算的：</p>\n<ul>\n<li>规则1：如果连个数组的维度不同，那么维度较少的数组在自己当前维度的前面填充长度为 1 的维度。</li>\n<li>规则2：如果两个数组任意一个维度的长度不符，那么在这个维度上长度为 1 的那个数组在该维度上进行拉伸，即填充同样的数据以适应另一个数组。</li>\n<li>规则3：如果任意维度上长度不等，但两个数组在该维度的长度都不是 1，则报错</li>\n</ul>\n<p>下面用几个例子进行说明。</p>\n<h3 id=\"示例-1\" style=\"position:relative;\">示例 1<a href=\"#%E7%A4%BA%E4%BE%8B-1\" aria-label=\"示例 1 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nM <span class=\"token operator\">+</span> a</code></pre></div>\n<p>其中</p>\n<ul>\n<li>M.shape = (2, 3)</li>\n<li>a.shape = (3)</li>\n</ul>\n<p>按照规则 1 a 的维度少，在其前面补充维度：</p>\n<ul>\n<li>a.shape -> (1, 3)</li>\n</ul>\n<p>按照规则 2 第一维两者不同，所以对 a 进行拉伸：</p>\n<ul>\n<li>a.shape -> (2, 3)</li>\n</ul>\n<p>然后再进行相加。</p>\n<h3 id=\"示例-2\" style=\"position:relative;\">示例 2<a href=\"#%E7%A4%BA%E4%BE%8B-2\" aria-label=\"示例 2 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>a.shape = (3, 1)</li>\n<li>b.shape = (3)</li>\n</ul>\n<p>按照规则 1 b 扩充维度</p>\n<ul>\n<li>b.shape = (1, 3)</li>\n</ul>\n<p>按照规则 2 长度为 1 的维度扩充：</p>\n<ul>\n<li>a.shape = (3, 3)</li>\n<li>b.shape = (3, 3)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">+</span> b\n<span class=\"token comment\"># array([[0, 1, 2],</span>\n<span class=\"token comment\">#        [1, 2, 3],</span>\n<span class=\"token comment\">#        [2, 3, 4]])</span></code></pre></div>\n<h3 id=\"示例-3\" style=\"position:relative;\">示例 3<a href=\"#%E7%A4%BA%E4%BE%8B-3\" aria-label=\"示例 3 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">M <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>M.shape = (3, 2)</li>\n<li>a.shape = (3)</li>\n</ul>\n<p>按照规则 1 扩充 a 的维度</p>\n<ul>\n<li>a.shape = (1, 3)</li>\n</ul>\n<p>按照规则 2 a 被拉伸</p>\n<ul>\n<li>M.shape = (3, 2)</li>\n<li>a.shape = (3, 3)</li>\n</ul>\n<p>然而此时两者的第二维没有一个为 1 但又不相当，按照规则 3 报错。</p>\n<h2 id=\"比较、掩码、布尔运算\" style=\"position:relative;\">比较、掩码、布尔运算<a href=\"#%E6%AF%94%E8%BE%83%E3%80%81%E6%8E%A9%E7%A0%81%E3%80%81%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97\" aria-label=\"比较、掩码、布尔运算 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>上一部分介绍了 NumPy 有很多向量化快速运算的 universal functions，但是只介绍了算术运算的那些 ufuncs 实际上还有很多布尔运算的 ufuncs。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span>\n<span class=\"token comment\"># array([ True,  True, False, False, False], dtype=bool)</span>\nx <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n<span class=\"token comment\"># array([False, False,  True, False, False], dtype=bool)</span></code></pre></div>\n<p>可以看到这些运算的结果是一个布尔类型的长度相同的数组。布尔数组可以用于很多便捷的运算。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nnp<span class=\"token punctuation\">.</span>count_nonzero<span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 8</span>\nnp<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 8</span></code></pre></div>\n<p>其中 <code>np.count_nonzero</code> 可以用来计算 <code>True</code> 元素的个数，当然还可以用 <code>np.sum</code> 达到同样的目的，因为 <code>False</code> 会被认为是 0 而 <code>True</code> 会被转换为 1。</p>\n<p>还有一些其他类似的操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span>\nnp<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># True</span></code></pre></div>\n<p>当然，这些运算都可以添加 <code>axis</code> 参数按照不同的轴进行运算。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([ True, False,  True], dtype=bool)</span></code></pre></div>\n<p><strong>注意</strong> Python 有内置的 <code>sum()</code> <code>any()</code> 和 <code>all()</code> 函数，它们和 NumPy 中的运算略有区别，尤其是在用于多维数组的情况。一定要确保自己用的是 <code>np.sum()</code> <code>np.any()</code> 以及 <code>np.all()</code>。</p>\n<p>处理基本的 <code>></code> <code>&#x3C;</code> <code>!=</code> <code>==</code> <code>>=</code> <code>&#x3C;=</code> 之外，还可以用 <code>&#x26;</code>（与） <code>|</code>（或） <code>^</code>（异或） <code>~</code>（否） 进行复合布尔运算。比如</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>inches <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>inches <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>就是 <code>inches > 0.5</code> 与 <code>inches &#x3C; 1</code> 的 <code>与</code> 操作。注意考虑到运算符的优先级，这里的两个括号是必须的。</p>\n<p>在前面的部分我们看到可以直接对布尔数组进行聚合。一个更强大的方式是使用布尔数组作为掩码来获取数据本身的特定子集。回到之前的 x 数组，假设我们想要一个数组中所有小于 5 的数据，我们可以这么做：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">x<span class=\"token punctuation\">[</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>结果返回一个一维数组，其元素为满足条件式的所有数据；换言之获取的是所谓索引为 True 的元素。这些运算可以让我们轻易的获取想要的结果。</p>\n<h2 id=\"fancy-indexing\" style=\"position:relative;\">Fancy Indexing<a href=\"#fancy-indexing\" aria-label=\"fancy indexing permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Fancing indexing 的概念非常简单：用索引数组访问多个数组元素。举一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\nrand <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>RandomState<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\nx <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [51 92 14 71 60 20 82 86 74 74]</span></code></pre></div>\n<p>如果我们想要访问其中三个元素，我们可以这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ind <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([71, 86, 60])</span></code></pre></div>\n<p>使用 fancy indexing 的时候，结果的形状与索引数组的形状（而不是原数组的形状）保持一致：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ind <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nx<span class=\"token punctuation\">[</span>ind<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[71, 86],</span>\n<span class=\"token comment\">#        [60, 20]])</span></code></pre></div>\n<p>Fancy indexing 也支持多维数组，看下面这个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">X <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># array([[ 0,  1,  2,  3],</span>\n<span class=\"token comment\">#        [ 4,  5,  6,  7],</span>\n<span class=\"token comment\">#        [ 8,  9, 10, 11]])</span></code></pre></div>\n<p>和一般的索引类似，第一个索引对应行，第二个索引对应列：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">row <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncol <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nX<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([ 2,  5, 11])</span></code></pre></div>\n<p>我们可以把普通索引与 fancy indexing 一起使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">X<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([10,  8,  9])</span>\n\nX<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[ 6,  4,  5],</span>\n<span class=\"token comment\">#        [10,  8,  9]])</span></code></pre></div>\n<p>我们还可以把掩码和 fancy indexing 一起使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\nX<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># array([[ 0,  2],</span>\n<span class=\"token comment\">#        [ 4,  6],</span>\n<span class=\"token comment\">#        [ 8, 10]])</span></code></pre></div>\n<h2 id=\"排序\" style=\"position:relative;\">排序<a href=\"#%E6%8E%92%E5%BA%8F\" aria-label=\"排序 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>np.sort</code> <code>np.argsort</code> 基本就是数组排序的全部内容了，NumPy 中的 np.sort 比 Python 的 sort sorted 要快的多。如果需要进行局部排序参见 <code>np.partition</code> 的内容，这里不在赘述了。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%B9%BF%E6%92%AD\">广播</a></p>\n<ul>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-1\">示例 1</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-2\">示例 2</a></li>\n<li><a href=\"#%E7%A4%BA%E4%BE%8B-3\">示例 3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%AF%94%E8%BE%83%E3%80%81%E6%8E%A9%E7%A0%81%E3%80%81%E5%B8%83%E5%B0%94%E8%BF%90%E7%AE%97\">比较、掩码、布尔运算</a></p>\n</li>\n<li>\n<p><a href=\"#fancy-indexing\">Fancy Indexing</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%8E%92%E5%BA%8F\">排序</a></p>\n</li>\n</ul>","frontmatter":{"title":"Python Data Science, NumPy 2","date":"March 31, 2017"},"excerpt":"这篇文章延续Python Data Science, NumPy 1，介绍广播、高级索引以及数组排…"}},"pageContext":{"id":"d4f8f5c3-ee33-5cd3-bb99-ae2b6dd0229c"}},"staticQueryHashes":["4202924991"]}