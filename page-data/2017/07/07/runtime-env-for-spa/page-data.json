{"componentChunkName":"component---src-templates-blog-js","path":"/2017/07/07/runtime-env-for-spa/","result":{"data":{"blog":{"id":"b40413f7-cefb-5932-9c1f-1ff2802fa51b","html":"<p>最近攻克了一个之前部署 single-page-app 的一个痛点：支持在运行时环境变量。这里讲述一下问题以及目前的解决方案。</p>\n<h2 id=\"SPA-没有运行时环境变量的痛点\" style=\"position:relative;\">SPA 没有运行时环境变量的痛点<a href=\"#SPA-%E6%B2%A1%E6%9C%89%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%97%9B%E7%82%B9\" aria-label=\"SPA 没有运行时环境变量的痛点 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>目前我的绝大部分的项目都是一个前后端分离的方式开发的。其中前端基本都是用 <code class=\"language-text\">create-react-app</code> 创建出来的标准的 react 的 spa 应用。这种 spa 在部署是将所有的 js 和 css 打包成一个或多个文件然后用 <code class=\"language-text\">serve</code> 或者其他类似的 http server 以静态文件的形式对外提供服务，但是这种前端静态文件话的应用没有 nodejs 的支持，没办法使用 <code class=\"language-text\">process.env</code> 这样的运行时注入环境变量的功能。</p>\n<p>目前 <code class=\"language-text\">create-react-app</code> 提供了一个编译运行时环境变量的方案，因为在 <code class=\"language-text\">build</code> 的时候是有 <code class=\"language-text\">nodejs</code> 支持的，通过 <code class=\"language-text\">REACT_APP_API_URL=http://xxx.com yarn run build</code> 的方式在编译 spa 的时候注入环境变量。那么编译时的环境变量能不能解决问题呢？看情况了...可以做一个简单的对比。</p>\n<ol>\n<li>\n<p>要知道我们通常要把什么样子的环境变量注入到 spa 中。额，我这里的需求很有限，为了让前后端一起运作，我所需要的环境变量就是后端 API 的入口。对于部署流程简单到之后生产环境且生产环境固定（尤其是后端生产环境 IP、域名固定）的情况，直接在编译时将后端的入口写死注入就行了。但如果有多个环境（staging）的需求就不适用了，假如没有运行时环境变量的支持为不同的环境提供不同的入口只能重新编译应用并注入不同的变量。</p>\n</li>\n<li>\n<p>有没有需求在应用运行时修改我们的环境变量。很明显运行时的环境变量支持通过重启就能修改环境变量的功能，如果有这种灵活修改环境变量的情况，编译时环境变量很明显也不能满足。</p>\n</li>\n<li>\n<p>在编译时对代码选择和裁剪。很明显，这个是最应该使用编译时环境变量的地方了。</p>\n</li>\n</ol>\n<p>说白了，其实不同时期的环境变量的作用是不一样的。两者不可能做到相互替代，在 <code class=\"language-text\">[1]</code> <code class=\"language-text\">[2]</code> 两个场景都是使用运行时环境变量比较舒服的地方，采用编译时的环境变量实在是不太方便。下面就介绍一下目前让 spa 应用支持运行时环境变量的方法，这里还是以 <code class=\"language-text\">create-react-app</code> 的模板为示例。</p>\n<h2 id=\"全局配置--Docker-化部署\" style=\"position:relative;\">全局配置 + Docker 化部署<a href=\"#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE--Docker-%E5%8C%96%E9%83%A8%E7%BD%B2\" aria-label=\"全局配置  Docker 化部署 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>前端没有 <code class=\"language-text\">process.env</code> 这样的东西，我们只能用 javascript 的全局变量模拟。在将这个打包好的 spa 运行起来的时候，我们需要利用 shell 脚本生成这个 config.js 文件，让它把必要的环境变量翻译成全局变量。然后让默认的入口 html 文件引入这个全局变量文件。</p>\n<p>首先，我们需要一段 shell 脚本，把环境变量翻译成 <code class=\"language-text\">config.js</code> 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$CONFIG_VARS</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\n  <span class=\"token assign-left variable\">SPLIT</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> $CONFIG_VARS <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token string\">\",\"</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token variable\">)</span></span>\n  <span class=\"token assign-left variable\">ARGS</span><span class=\"token operator\">=</span>\n  <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">VAR</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">${SPLIT}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n      <span class=\"token assign-left variable\">ARGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">${ARGS}</span> -v <span class=\"token variable\">${VAR}</span> \"</span>\n  <span class=\"token keyword\">done</span>\n\n  <span class=\"token assign-left variable\">JSON</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>json_env --json $ARGS<span class=\"token variable\">`</span></span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" ==> Writing <span class=\"token variable\">${CONFIG_FILE_PATH}</span>/config.js with <span class=\"token variable\">${JSON}</span>\"</span>\n\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"window.__env = <span class=\"token variable\">${JSON}</span>\"</span> <span class=\"token operator\">></span> <span class=\"token variable\">${CONFIG_FILE_PATH}</span>/config.js\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token builtin class-name\">exec</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span></code></pre></div>\n<p>如果我们提供这样的环境变量</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">REACT_APP_API_PREFIX</span><span class=\"token operator\">=</span>http://petstore-backend.example.com\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CONFIG_VARS</span><span class=\"token operator\">=</span>REACT_APP_API_PREFIX</code></pre></div>\n<p>那么所生成的 <code class=\"language-text\">config.js</code> 文件是这个样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>__env <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'REACT_APP_API_PREFIX'</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://petstore-backend.example.com'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后，我们需要在 原来的 <code class=\"language-text\">index.html</code> 模板文件中引入这个我们生成的 <code class=\"language-text\">config.js</code> 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token name\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  ...\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span>\n      You need to enable JavaScript to run this app.\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>config.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这样，我们就拥有了一个 <code class=\"language-text\">window.__env</code> 的全局对象，它包含了所有的运行时环境变量。我们可以以如下的方式使用它：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>adapter <span class=\"token operator\">=</span> httpAdapter<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> baseUrl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> env <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>__env <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://example.com'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  baseUrl <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">REACT_APP_API_PREFIX</span> <span class=\"token operator\">||</span> <span class=\"token string\">'http://localhost:8080'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  baseUrl <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">REACT_APP_API_PREFIX</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fetcher <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseURL<span class=\"token operator\">:</span> baseUrl<span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>直接在文件中引入 <code class=\"language-text\">window.__env</code> 全局变量</li>\n<li>在需要的地方引用其中的变量即可</li>\n</ol>\n<p>当然，这种依赖 shell 生成 <code class=\"language-text\">config.js</code> 的方案只有我们将 spa 打包好的之后才会使用，为了更好的使用这个 shell 我们可以采用 docker 化的方式把其启动流程以 entrypoint 的方式固化在应用的启动流程中。<a href=\"https://github.com/SocialEngine/docker-nginx-spa\">SocialEngine/docker-nginx-spa</a> 就实现了这个方案，是一个很好的用 base image。如果我们需要创建一个支持运行时环境变量的 create-react-app spa 的时候，首先按照上面的步骤修改 <code class=\"language-text\">public/index.html</code> 并且用 <code class=\"language-text\">window.__env</code> 作为环境变量使用。然后提供一个继承自 <code class=\"language-text\">SocialEngine/docker-nginx-spa</code> 的 <code class=\"language-text\">Dockerfile</code> 即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM socialengine/nginx-spa\n\nCOPY build/ /app</code></pre></div>\n<p>其中 <code class=\"language-text\">build/</code> 是 <code class=\"language-text\">create-react-app</code> 编译生成静态文件的默认目录。然后打包运行这个应用的方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> run build\n$ docker build -t spa-app <span class=\"token builtin class-name\">.</span>\n$ docker run -e <span class=\"token assign-left variable\">CONFIG_VARS</span><span class=\"token operator\">=</span>REACT_APP_API_PREFIX -e <span class=\"token assign-left variable\">REACT_APP_API_PREFIX</span><span class=\"token operator\">=</span>http://petstore-backend.example.com -p <span class=\"token number\">3000</span>:80 spa-app</code></pre></div>\n<p>当然，我们本地开发环境不用这么麻烦。只需要在 <code class=\"language-text\">public/</code> 目录下自己创建一个 <code class=\"language-text\">config.js</code> 然后把开发需要的环境变量塞进去就可以了。在 docker 化后，entrypoint 触发的命令会自动覆盖这个 config.js 文件。</p>\n<p><a href=\"https://github.com/aisensiy/pet-store-front-end\">这里</a> 是一个样例项目。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ol>\n<li><a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a></li>\n<li><a href=\"https://github.com/mars/create-react-app-buildpack#user-content-compile-time-vs-runtime\">compile-time-vs-runtime</a></li>\n<li><a href=\"https://www.npmjs.com/package/serve\">serve</a></li>\n<li><a href=\"https://github.com/SocialEngine/docker-nginx-spa\">SocialEngine/docker-nginx-spa</a></li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"#spa-%E6%B2%A1%E6%9C%89%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%97%9B%E7%82%B9\">SPA 没有运行时环境变量的痛点</a></li>\n<li><a href=\"#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE--docker-%E5%8C%96%E9%83%A8%E7%BD%B2\">全局配置 + Docker 化部署</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></li>\n</ul>","frontmatter":{"title":"为 Single Page App 提供运行时环境变量","date":"July 07, 2017"}}},"pageContext":{"id":"b40413f7-cefb-5932-9c1f-1ff2802fa51b"}},"staticQueryHashes":[]}