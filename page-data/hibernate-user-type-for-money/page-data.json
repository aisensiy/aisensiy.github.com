{"componentChunkName":"component---src-templates-blog-js","path":"/hibernate-user-type-for-money","result":{"data":{"blog":{"id":"18daf4cd-6ef6-5a1c-9853-f8f1afd76251","html":"<p>虽然一直非常喜欢 mybatis 但从效率的角度来看，hibernate 也是一个值得尝试的工具。最近开始做一些尝试，看看是不是的利用 jpa 来进一步的简化目前很多繁琐无聊的 sql 的编写。这里记录下今天遇到的有关自定义类型的一个知识点。</p>\n<p>在 mybatis 里有 type handler 的概念，用于实现表结构和自定义的 java 对象之间的转换。而 hibernate 也有一个相似的概念，不过这里我只是记录下目前这种一个对象对应多个 column 的场景。</p>\n<h2 id=\"joda-moeny\" style=\"position:relative;\">joda moeny<a href=\"#joda-moeny\" aria-label=\"joda moeny permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>joda money 是一个轻量级的货币类型，可以用来存储货币，比如人民币，美元，日元等。它有两个关键字段，一个是 amount，一个是 currency。那么很自然的就希望在数据库里对应两个 column 分别是 decimal 类型的 amount 和 varchar 类型的 currency。</p>\n<h2 id=\"定义-jodamoneytype\" style=\"position:relative;\">定义 JodaMoneyType<a href=\"#%E5%AE%9A%E4%B9%89-jodamoneytype\" aria-label=\"定义 jodamoneytype permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>我在 <a href=\"https://www.baeldung.com/hibernate-custom-types#2-implementingusertype\">这篇文章</a> 找到了自己想要的东西。就是要实现一个 <code>JodaMoneyType</code> 实现 <code>joda money</code> 类型和数据库中两个列的映射。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JodaMoneyType</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserType</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sqlTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>VARCHAR<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>DECIMAL<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// [1]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token function\">returnedClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">nullSafeGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SharedSessionContractImplementor</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>                                                         \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">wasNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                                                        <span class=\"token comment\">// [2]</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> currency <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BigDecimal</span> amount <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getBigDecimal</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CurrencyUnit</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nullSafeSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> st<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SharedSessionContractImplementor</span> session<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                                             <span class=\"token comment\">// [3]</span>\n      st<span class=\"token punctuation\">.</span><span class=\"token function\">setNull</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>VARCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      st<span class=\"token punctuation\">.</span><span class=\"token function\">setNull</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>DECIMAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Money</span> money <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>\n      st<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrencyUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      st<span class=\"token punctuation\">.</span><span class=\"token function\">setBigDecimal</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">.</span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Money</span> money <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrencyUnit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">.</span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isMutable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                                               <span class=\"token comment\">// [4]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Serializable</span> <span class=\"token function\">disassemble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>                                             <span class=\"token comment\">// [5]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">assemble</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Serializable</span> cached<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> cached<span class=\"token punctuation\">;</span>                                                           <span class=\"token comment\">// [6]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">HibernateException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> original<span class=\"token punctuation\">;</span>                                                         <span class=\"token comment\">// [7]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>按照注释标记做一些解释：</p>\n<ol>\n<li>定义对应的 sql 类型，这里是 varchar 和 decimal。</li>\n<li>这里是根据数据库数据创建 joda money</li>\n<li>这里是将 joda money 保存到数据库</li>\n<li>由于 money 是不可变的，这里就直接返回了 false 后续 6 7 由于不可变做了简单的处理</li>\n<li>将 joda money 返回序列化结果</li>\n<li>直接返回结果</li>\n<li>由于不可变，这里直接返回 original</li>\n</ol>\n<p>然后使用的时候按照如下添加注解即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Deposit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token annotation punctuation\">@Columns</span><span class=\"token punctuation\">(</span>columns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"amount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token annotation punctuation\">@Type</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"com.example.learnjpa.deposit.JodaMoneyType\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Money</span> paidMoney<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"支持日志展示\" style=\"position:relative;\">支持日志展示<a href=\"#%E6%94%AF%E6%8C%81%E6%97%A5%E5%BF%97%E5%B1%95%E7%A4%BA\" aria-label=\"支持日志展示 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>hibernate 可以通过设置日志级别以显示丰富的信息。通常在测试和开发过程中会在 <code>application.properties</code> 设置如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\nlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</code></pre></div>\n<p>以上设置分别展示 sql 语句，对 sql 语句做一定个格式化，以及展示每一个 sql 语句的参数。但是在使用 UserType 的时候会出现如下的奇怪问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hibernate: \n    update\n        openbayes_deposits \n    set\n        currency=?,\n        amount=?,\n        owner_id=?,\n        price=? \n    where\n        id=?\n2022-03-14 23:16:50.548 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [aisensiy]\n2022-03-14 23:16:50.548 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [INTEGER] - [111]\n2022-03-14 23:16:50.548 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [13123]</code></pre></div>\n<p>明明是 5 个参数，前两个 currency 和 amount 对应的 paramter 居然没有打印出来。这个行为甚让我一开始以为自己写的 UserType 是有问题的。</p>\n<p>做了进一步了解后才了解到 hibernate 有 TypeDescriptor 的概念，而这里展示的参数也需要对应的 TypeDescriptor 支持才能展示出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> @Override\n<span class=\"token prefix unchanged\"> </span> public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session) throws HibernateException, SQLException {\n<span class=\"token prefix unchanged\"> </span>   if (Objects.isNull(value)) {\n<span class=\"token prefix unchanged\"> </span>     st.setNull(index, Types.VARCHAR);\n<span class=\"token prefix unchanged\"> </span>     st.setNull(index + 1, Types.DECIMAL);\n<span class=\"token prefix unchanged\"> </span>   } else {\n<span class=\"token prefix unchanged\"> </span>     Money money = (Money) value;\n<span class=\"token prefix unchanged\"> </span>     st.setString(index,money.getCurrencyUnit().getCode());\n<span class=\"token prefix unchanged\"> </span>     st.setBigDecimal(index+1,money.getAmount());\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>     session.remapSqlTypeDescriptor(new VarcharTypeDescriptor())\n<span class=\"token prefix inserted\">+</span>         .getBinder(StringTypeDescriptor.INSTANCE)\n<span class=\"token prefix inserted\">+</span>         .bind(st, ((Money) value).getCurrencyUnit().getCode(), index, session);\n<span class=\"token prefix inserted\">+</span>     session.remapSqlTypeDescriptor(new DecimalTypeDescriptor())\n<span class=\"token prefix inserted\">+</span>         .getBinder(BigDecimalTypeDescriptor.INSTANCE)\n<span class=\"token prefix inserted\">+</span>         .bind(st, ((Money) value).getAmount(), index + 1, session);\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   }\n<span class=\"token prefix unchanged\"> </span> }</span></code></pre></div>\n<p>通过如上代码可以添加 TypeDescriptor 支持，这样就可以展示出来了。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hibernate: \n    update\n        openbayes_deposits \n    set\n        currency=?,\n        amount=?,\n        owner_id=?,\n        price=? \n    where\n        id=?\n2022-03-14 23:16:50.547 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [USD]\n2022-03-14 23:16:50.547 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [DECIMAL] - [222.00]\n2022-03-14 23:16:50.548 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [aisensiy]\n2022-03-14 23:16:50.548 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [INTEGER] - [111]\n2022-03-14 23:16:50.548 TRACE 71555 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [5] as [VARCHAR] - [13123]</code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"#joda-moeny\">joda moeny</a></li>\n<li><a href=\"#%E5%AE%9A%E4%B9%89-jodamoneytype\">定义 JodaMoneyType</a></li>\n<li><a href=\"#%E6%94%AF%E6%8C%81%E6%97%A5%E5%BF%97%E5%B1%95%E7%A4%BA\">支持日志展示</a></li>\n</ul>","frontmatter":{"title":"Hibernate 使用 UserType 存储 joda money","date":"March 14, 2022","tags":["hibernate","java","jpa"]},"excerpt":"虽然一直非常喜欢 mybatis 但从效率的角度来看，hibernate 也是一个值得尝试的工具。…"}},"pageContext":{"id":"18daf4cd-6ef6-5a1c-9853-f8f1afd76251"}},"staticQueryHashes":["4202924991"]}