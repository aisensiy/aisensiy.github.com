{"componentChunkName":"component---src-templates-blog-js","path":"/2013/07/02/e69c80e8bf91e5b7a5e4bd9ce79a84e680bbe7bb93/","result":{"data":{"blog":{"id":"c138b5e0-4c4a-530b-857d-4e3651604700","html":"<p>每一段经历都是有意义的。一方面是在这个过程中的感受，另一方面是经历了这个之后的收获。最近又有些疏于码字了。赶紧补一补。记录一些最近工作的一些感想。</p>\n<h2 id=\"用类-dsl-去管理表单的展现\" style=\"position:relative;\">用类 dsl 去管理表单的展现<a href=\"#%E7%94%A8%E7%B1%BB-dsl-%E5%8E%BB%E7%AE%A1%E7%90%86%E8%A1%A8%E5%8D%95%E7%9A%84%E5%B1%95%E7%8E%B0\" aria-label=\"用类 dsl 去管理表单的展现 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>首先当然是讲一讲技术方面的。最近接触了一些相对来说比较复杂的表单：对，就是那种</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">对于一个下拉选框的每一个选项\n  if option == 1 then\n    表单 1\n  else if option == 2 then\n    表单 2\n  else if\n  ...\n  end\nend</code></pre></div>\n<p>其中，表单 1 到 表单 n 都不不太一样。然后，还要杂揉着表单验证以及自定义的表单组件。</p>\n<p>就具体工作来讲，对每次 select change 事件做出不同的响应是不可避免的。但是，这样的代码往往很难看，并且显得臃肿而不灵活。但是，对于这种业务逻辑与代码要紧密结合的事情，又能有更好的办法么。</p>\n<p>首先，我个人感觉，这种工作不可避免。它涉及业务逻辑。而业务逻辑就是人定义的。人的干涉不可避免。那么，就最好去简化这种工作。让人只做最关键的东西，尽量做抽象。对于目前这种工作，人需要提供的就是规则：什么时候应该显示什么表单，什么时候不应该显示什么表单。</p>\n<p>然后，我找到了一个比较理想的 lib <a href=\"https://github.com/miohtama/jquery-interdependencies\">jquery-interdependencies</a>。这个东西所提供的功能恰好就是我所需要的。它就是一个类似于 dsl 的东西：我告诉它当一个东西的值等于什么的时候，应该做什么。下面是其 github 页面上所提供的一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Start creating a new ruleset</span>\n<span class=\"token keyword\">var</span> ruleset <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span>deps<span class=\"token punctuation\">.</span><span class=\"token function\">createRuleset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 这里就是指定一条条的规则了。当一个 xx 的值 是 xx 然后就 xxx</span>\n<span class=\"token keyword\">var</span> dietRule <span class=\"token operator\">=</span> ruleset<span class=\"token punctuation\">.</span><span class=\"token function\">createRule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#diet\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"special\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndietRule<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#special-diet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make these fields visible when user checks hotel accomodation</span>\n<span class=\"token keyword\">var</span> hotelRule <span class=\"token operator\">=</span> ruleset<span class=\"token punctuation\">.</span><span class=\"token function\">createRule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#accomodation\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"==\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhotelRule<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#adults\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhotelRule<span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#children\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Make the ruleset effective on the whole page</span>\nruleset<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">log</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>写这种简单的规则让我觉得比自己建立事件并配合 switch case 要好很多。我很高兴有人已经提供了这样的 lib。</p>\n<p>但是，这里还有一个问题有待处理。如果我们使用 html 里默认的表单提交方式的话。即便是被隐藏的表单，它们的值也会被提交。这并不是我想要的。应该怎么办呢？html 有一个这样的规则，如果 form 中的一个 input 是 disabled 那么它的结果是不会被提交的。那么，我们需要在 interdependencies 帮助我们隐藏表单的同时将要隐藏的字段做 disable 处理，而在显示的时候则将其 disable 去掉即可。谢天谢地，jquery-interdependencies 给我们提供了这种 callback 的机制。</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">cfg <span class=\"token operator\">=</span>\n  <span class=\"token property\">hide</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input, textarea, select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token property\">show</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>control<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input, textarea, select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disabled'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span>\n    control<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这样的话，每次提交表单，其内容就是我们所需要的了。</p>\n<h2 id=\"用前端模版去渲染界面\" style=\"position:relative;\">用前端模版去渲染界面<a href=\"#%E7%94%A8%E5%89%8D%E7%AB%AF%E6%A8%A1%E7%89%88%E5%8E%BB%E6%B8%B2%E6%9F%93%E7%95%8C%E9%9D%A2\" aria-label=\"用前端模版去渲染界面 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>其实之前的项目就有这么做了。但这次有多学了一招。</p>\n<p>之前使用 handlebars 都是和 backbone 做配合。而这次呢，是要简化复杂的界面呈现。这里用到了一个 gem <a href=\"https://github.com/leshill/handlebars_assets\">handlebars_assets</a>。它可以帮助预编译前端的 handlebars 模版。而不必每次使用的时候都去使用 <code>Handlebars compile</code> 去重新编译。并且，利用 assets pipeline 可以将每个模版写成独立的文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   templates/\n      contacts/\n        new.hbs\n        edit.hbs\n        show.hbs</code></pre></div>\n<p>这样的支持让我不用在代码的组织上费什么脑筋了。</p>\n<h2 id=\"coffee-对象的封装\" style=\"position:relative;\">coffee 对象的封装<a href=\"#coffee-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B0%81%E8%A3%85\" aria-label=\"coffee 对象的封装 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>项目中是用 coffee 而不是用 javascript。在考虑将一坨一坨的代码按照 js 的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var abc = (function() {\n  bla bla…\n\n  return {\n    bla bla...\n  };\n})();</code></pre></div>\n<p>进行的时候发现 coffee 中对应的语法显得非常古怪。我甚至想要放弃 coffee 了。但是，转念一想，coffee 简化了 js 中类的定义和使用。<a href=\"https://coffeescript.org/#classes\">coffee#class</a> 有比较详尽的说明。</p>\n<p>用这个做封装其实刚刚好。</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DateRangeGenerator</span>\n  day <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">86400</span>\n  week <span class=\"token operator\">=</span> day <span class=\"token operator\">*</span> <span class=\"token number\">7</span>\n  year <span class=\"token operator\">=</span> day <span class=\"token operator\">*</span> <span class=\"token number\">365</span>\n\n  date_format <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>date<span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"<span class=\"token interpolation variable\">#{date.getFullYear()}</span>-<span class=\"token interpolation variable\">#{date.getMonth() + 1}</span>-<span class=\"token interpolation variable\">#{date.getDate()}</span>\"</span>\n\n  generate_range <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">date_format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> time <span class=\"token operator\">*</span> period<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> period <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token property\">day_range</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">generate_range</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n\n  <span class=\"token property\">week_range</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">generate_range</span><span class=\"token punctuation\">(</span>week<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n\n  <span class=\"token property\">year_range</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token function\">generate_range</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面是我建立的一个类的示例。把代码这里整理之后其实比 jquery 那种胡乱点点的函数用来用去要强很多。</p>\n<hr>\n<p>下面就是吐槽了。</p>\n<p>其实很多时候，当我们接受一个半途的项目的时候，都会有强烈吐槽的欲望。可能代码的风格不和你的意，可能项目的理念和你不相投。可能代码就是一片混乱，难以下手。但是，静下来看看，总还是可以着手去工作的。与其以一个极端对立的态度给自己打退堂鼓，不如说静下心来想办法如何应对。</p>\n<p>当然，上一段说的有点扯淡。关键是应该要怎么想，要怎么做吧。</p>\n<p>别人的代码搓是别人的代码。不能说别人的不好，我的也无所谓了。最起码的，别人的东西我不帮忙收拾就罢了，但是从我的开始，我会让它尽量好起来。起码要对自己的代码负责任，然后再能者多劳吧。</p>\n<p>给别人做项目的时候要有一定的主动权。其实很多客户给你提要求的时候并不一定是深思熟虑了。他们可能也是一时随口一说。但是如果自己不好好权衡和争取的话，可能会拖慢了进度又做不出客户想要的结果。而且，有的时候真正的客户也不是给你钱的人，那么就更要多沟通，灵活点。</p>","tableOfContents":"<ul>\n<li><a href=\"#%E7%94%A8%E7%B1%BB-dsl-%E5%8E%BB%E7%AE%A1%E7%90%86%E8%A1%A8%E5%8D%95%E7%9A%84%E5%B1%95%E7%8E%B0\">用类 dsl 去管理表单的展现</a></li>\n<li><a href=\"#%E7%94%A8%E5%89%8D%E7%AB%AF%E6%A8%A1%E7%89%88%E5%8E%BB%E6%B8%B2%E6%9F%93%E7%95%8C%E9%9D%A2\">用前端模版去渲染界面</a></li>\n<li><a href=\"#coffee-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B0%81%E8%A3%85\">coffee 对象的封装</a></li>\n</ul>","frontmatter":{"title":"最近工作的总结","date":"July 02, 2013","tags":["jquery","工作","总结"]},"excerpt":"每一段经历都是有意义的。一方面是在这个过程中的感受，另一方面是经历了这个之后的收获。最近又有些疏于…"}},"pageContext":{"id":"c138b5e0-4c4a-530b-857d-4e3651604700"}},"staticQueryHashes":["4202924991"]}