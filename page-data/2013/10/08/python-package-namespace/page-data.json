{"componentChunkName":"component---src-templates-blog-js","path":"/2013/10/08/python-package-namespace/","result":{"data":{"blog":{"id":"c604237d-f079-550f-9675-7e36b0ac2108","html":"<h1 id=\"python-namespace-and-package\" style=\"position:relative;\">python namespace and package<a href=\"#python-namespace-and-package\" aria-label=\"python namespace and package permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>最近使用了一下 python，用到了 package 去组织文件。但是用的很恼火。今天好好的查了一下相关的内容，算是搞的差不多了。</p>\n<p>首先，python 的 package 通常是在文件 <code>__name__</code> 不是 <code>__main__</code> 的时候有效的。如果一个文件要以 main 直接执行，那么它就应该以绝对路径的方式引入。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── __init__.py\n├── main.py\n├── importer\n│   ├── __init__.py\n│   ├── db_migrator.py\n├── spider\n│   ├── __init__.py\n│   ├── fetcher.py\n└── util\n    ├── __init__.py\n    ├── other.py\n    └── tool.py</code></pre></div>\n<p>如上的结构</p>\n<p>main.py:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> spider<span class=\"token punctuation\">.</span>fetcher\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n  spider<span class=\"token punctuation\">.</span>fetcher<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>spider.fetcher.py:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> importer<span class=\"token punctuation\">.</span>db_migrator\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"docstring for fetch\"\"\"</span>\n  <span class=\"token keyword\">print</span> <span class=\"token string\">'fetch'</span></code></pre></div>\n<p>如果执行 <code>main.py</code> 而 <code>spider/fetcher.py</code> 永远以类库的形式被引用，那么这样的写法是没有问题的。</p>\n<p>但是，如果 <code>spider/fetcher.py</code> 包含 <code>__main__</code> 部分的话，例如</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> importer<span class=\"token punctuation\">.</span>db_migrator\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"docstring for fetch\"\"\"</span>\n  <span class=\"token keyword\">print</span> <span class=\"token string\">'fetch'</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n  fetch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>直接执行 <code>python spider/fetcher.py</code> 是会报错的。应该为其提供绝对路径的 path 才可以。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n\nPROJECT_ROOT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>PROJECT_ROOT<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> importer<span class=\"token punctuation\">.</span>db_migrator\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token triple-quoted-string string\">\"\"\"docstring for fetch\"\"\"</span>\n  <span class=\"token keyword\">print</span> <span class=\"token string\">'fetch'</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n  fetch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>增加的内容就是强制将项目的路径添加到寻找 package 的路径列表里，使得在运行时可以找到需要的包。</p>","tableOfContents":"<ul>\n<li><a href=\"#python-namespace-and-package\">python namespace and package</a></li>\n</ul>","frontmatter":{"title":"python package and namespace","date":"October 07, 2013"},"excerpt":"python namespace and package 最近使用了一下 python，用到了 p…"}},"pageContext":{"id":"c604237d-f079-550f-9675-7e36b0ac2108"}},"staticQueryHashes":["4202924991"]}