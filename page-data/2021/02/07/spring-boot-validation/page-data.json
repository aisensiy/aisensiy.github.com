{"componentChunkName":"component---src-templates-blog-js","path":"/2021/02/07/spring-boot-validation/","result":{"data":{"blog":{"id":"6ca6d951-2e12-58b4-bbce-0b52a4b3f2c4","html":"<p>之前在 <a href=\"/spring-boot-current-status\">当前的校验异常处理</a> 提到了目前校验和异常处理的一些问题。最近找到了一些看起来更专业化的方案。这里首先对几种模式做一些罗列。文中大量的内容都是从 <a href=\"https://www.naturalprogrammer.com/\">naturalprogrammer</a> 学习到的，后文也会再去引用里面的内容。</p>\n<p>有关预定义的 Bean Validation 注解（<code class=\"language-text\">@Email</code>, <code class=\"language-text\">@NotBlank</code> 之类的）就不再赘述了。</p>\n<h2 id=\"Bean-Validation-的异常处理时机\" style=\"position:relative;\">Bean Validation 的异常处理时机<a href=\"#Bean-Validation-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%97%B6%E6%9C%BA\" aria-label=\"Bean Validation 的异常处理时机 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在 Spring Controller 中的方法里，标记有 <code class=\"language-text\">@Valid</code> 注解的字段会触发 Bean Validation。在 <a href=\"/spring-boot-exception-handler\">spring boot 异常处理</a> 也讲了，如果出现校验报错，会抛出异常 <code class=\"language-text\">MethodArgumentNotValidException</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionApplication</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hello</span> <span class=\"token function\">postHello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Hello</span> hello<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> hello<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@NotBlank</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>不过除了在 <code class=\"language-text\">Controller</code> 层级做校验外，可能在 <code class=\"language-text\">Application Service</code> 层级也经常有校验的需求。这部分的校验可以通过 <code class=\"language-text\">@Validated</code> 注解配合实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionApplication</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">HelloService</span> helloService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hello</span> <span class=\"token function\">postHello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Hello</span> hello<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    helloService<span class=\"token punctuation\">.</span><span class=\"token function\">processHello</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hello<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Validated</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processHello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Hello</span> hello<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如上述代码所示，在 <code class=\"language-text\">HelloService</code> 上添加注解 <code class=\"language-text\">Validated</code> 并给其参数 <code class=\"language-text\">Hello</code> 增加注解 <code class=\"language-text\">@Valid</code> 在该参数传递时也会触发校验逻辑。如果报错就抛出异常 <code class=\"language-text\">ConstraintViolationException</code>。</p>\n<h2 id=\"Bean-Validation-自定义注解\" style=\"position:relative;\">Bean Validation 自定义注解<a href=\"#Bean-Validation-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\" aria-label=\"Bean Validation 自定义注解 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"包含自定义校验\" style=\"position:relative;\">包含自定义校验<a href=\"#%E5%8C%85%E5%90%AB%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C\" aria-label=\"包含自定义校验 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>除了预定义的注解之外，我们可以创建自定义的注解以及对应的校验，下面就直接给出这么一个例子（直接依葫芦画瓢而来）：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy<span class=\"token operator\">=</span><span class=\"token class-name\">NameValidator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"Invalid name\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NameValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Name</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> RESERVED_NAMES <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"administration\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"private\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>RESERVED_NAMES<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code class=\"language-text\">@Name</code> 上面首先包含了两个预定义的校验注解 <code class=\"language-text\">@NotBlank</code> 和 <code class=\"language-text\">@Size</code> 然后引入一个自定义的 <code class=\"language-text\">NameValidator</code> 校验所注册的名字是否为我们的保留字段，如果是就报错。</p>\n<p><img src=\"https://images-1300693298.cos.ap-beijing.myqcloud.com/20210208184451.png\" alt=\"name validation\"></p>\n<p>然后这里有一个没有解决的细节：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 虽然明明有额外的 @NotBlank 字段，但是依然不能保证这里传递的 name 是非空，</span>\n    <span class=\"token comment\">// 感觉是这个 Validator 的优先级要高于其他预定义的校验</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>RESERVED_NAMES<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"不包含自定义校验\" style=\"position:relative;\">不包含自定义校验<a href=\"#%E4%B8%8D%E5%8C%85%E5%90%AB%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C\" aria-label=\"不包含自定义校验 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>当然，也可以给一个不包含额外 Validator 的注解：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// validator 为空</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"Invalid name\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样的好处自然就是把一些公共的校验逻辑抽取出来作为一个标准，方便理解，当然也方便复用。</p>\n<h3 id=\"跨字段校验\" style=\"position:relative;\">跨字段校验<a href=\"#%E8%B7%A8%E5%AD%97%E6%AE%B5%E6%A0%A1%E9%AA%8C\" aria-label=\"跨字段校验 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>上面提到的是单个字段的校验，如果涉及到多个字段一起的校验，就需要用到类级别的标注了：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy<span class=\"token operator\">=</span><span class=\"token class-name\">ConfirmValueValidator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ConfirmValue</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"Can not confirm value\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfirmValueValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfirmValue</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Hello</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getConfirmValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Hello</span>\n<span class=\"token annotation punctuation\">@ConfirmValue</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Name</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> confirmValue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getConfirmValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> confirmValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>报错信息如下：</p>\n<p><img src=\"https://images-1300693298.cos.ap-beijing.myqcloud.com/20210208185553.png\" alt=\"\"></p>\n<p>在上面的报错信息可以看到一个细节：报错信息无法下达到具体一个字段，而是落在了 <code class=\"language-text\">hello.</code> 这个对象上。如果我们希望校验信息是落在具体的 <code class=\"language-text\">hello.value</code> 上可以有如下的修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfirmValueValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConfirmValue</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Hello</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> isValid <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getConfirmValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">disableDefaultConstraintViolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      context\n        <span class=\"token punctuation\">.</span><span class=\"token function\">buildConstraintViolationWithTemplate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"{my.custom.template}\"</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">addPropertyNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addConstraintViolation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> isValid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ConstraintValidatorContext</code> 允许我们设置具体如何覆盖默认的报错行为，以便展示我们想要的报错内容。这部分内容在 <a href=\"https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#example-custom-error\">6.2.1. Custom property paths</a> 找到的。</p>\n<h3 id=\"Validator-中的依赖注入\" style=\"position:relative;\">Validator 中的依赖注入<a href=\"#Validator-%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\" aria-label=\"Validator 中的依赖注入 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>最后，Validator 是可以像其他类一样做依赖注入的：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Constraint</span><span class=\"token punctuation\">(</span>validatedBy<span class=\"token operator\">=</span><span class=\"token class-name\">UniqueEmailValidator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">UniqueEmail</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"duplicated email\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UniqueEmailValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConstraintValidator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UniqueEmail</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Autowired</span> <span class=\"token class-name\">EmailService</span> emailService<span class=\"token punctuation\">;</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConstraintValidatorContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>emailService<span class=\"token punctuation\">.</span><span class=\"token function\">containsEmail</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> email<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a@b.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是说，然后与数据库通讯的东西也是可以做校验的，仅仅是把与数据链接的对象注入就可以使用了。</p>\n<h2 id=\"Error-Message-的处理\" style=\"position:relative;\">Error Message 的处理<a href=\"#Error-Message-%E7%9A%84%E5%A4%84%E7%90%86\" aria-label=\"Error Message 的处理 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>另外 validation 的报错信息也是需要做自定义的。这里给一个我觉得还不错的方案。不过没有深究一些细节，仅仅是 work 而已。</p>\n<h3 id=\"国际化\" style=\"position:relative;\">国际化<a href=\"#%E5%9B%BD%E9%99%85%E5%8C%96\" aria-label=\"国际化 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>首先，error message 是按照国际化的思路处理的：给一个 <code class=\"language-text\">ValidationMessages_&lt;LANG>.properties</code> 文件。然后在注解的 <code class=\"language-text\">message</code> 字段通过 <code class=\"language-text\">{&lt;KEY_NAME>}</code> 的方式给传递过来，这里给一些例子看就明白：</p>\n<p>首先修改前面的 <code class=\"language-text\">@Name</code> 注解里面的 <code class=\"language-text\">message</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Name</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"{validation.name.default}\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;----- 修改了这里</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">groups</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后给两个新的 <code class=\"language-text\">properties</code> 文件，放在 src/main/resources 目录下（就是默认的放资源文件的地方，懂的都懂）：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// ValidationMessages_en.properties</span>\nvalidation<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token class-name\">Invalid</span> name\n\n<span class=\"token comment\">// ValidationMessages_zh_CN.properties</span>\nvalidation<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token operator\">=</span>错误的名字格式</code></pre></div>\n<p>发个请求试试看，报错信息已经成了中文：</p>\n<p><img src=\"https://images-1300693298.cos.ap-beijing.myqcloud.com/20210208194218.png\" alt=\"\"></p>\n<p>当然，如果强行给一个 <code class=\"language-text\">Accept-Language: en</code> 的 http 头就可以返回对应的英文信息：</p>\n<p><img src=\"https://images-1300693298.cos.ap-beijing.myqcloud.com/20210208194626.png\" alt=\"\"></p>\n<p>然后，再介绍下 message 中两种可以传递的参数：</p>\n<ol>\n<li>注解中的参数可以直接用 <code class=\"language-text\">{xx}</code> 的形式传递，例如对于 <code class=\"language-text\">@Size</code> 注解有两个参数 <code class=\"language-text\">min</code> 和 <code class=\"language-text\">max</code> 可以将 message 写成以下的样子：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ValidationMessages_en.properties\nvalidation.name.size=name long shound between {min} and {max}\n\n// ValidationMessages_zh_CN.properties\nvalidation.name.size=名字的长度要在 {min} 和 {max} 之间</code></pre></div>\n<p>然后还有一个 <code class=\"language-text\">${}</code> 可以做特殊的表达式解析，具体的文章可以看 <a href=\"https://www.baeldung.com/spring-validation-message-interpolation\">Spring Validation Message Interpolation</a>。最常用的自然是 <code class=\"language-text\">${validatedValue}</code> 其中 <code class=\"language-text\">validatedValue</code> 就是用户的输入。这个规则甚至是在 <code class=\"language-text\">Class Level Contraint</code> 也是工作的：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// ValidationMessages_en.properties</span>\nvalidation<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token class-name\">Invalid</span> name\nvalidation<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>size<span class=\"token operator\">=</span>name <span class=\"token keyword\">long</span> shound between <span class=\"token punctuation\">{</span>min<span class=\"token punctuation\">}</span> and <span class=\"token punctuation\">{</span>max<span class=\"token punctuation\">}</span>\nvalidation<span class=\"token punctuation\">.</span>confirm<span class=\"token operator\">=</span>value not equal<span class=\"token operator\">:</span> $<span class=\"token punctuation\">{</span>validatedValue<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span> <span class=\"token operator\">!=</span> $<span class=\"token punctuation\">{</span>validatedValue<span class=\"token punctuation\">.</span>confirmValue<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>注意</strong> 这里遇到一个小坑，如果这里的 <code class=\"language-text\">validatedValue</code> 所在的 <code class=\"language-text\">Class</code> 不是 <code class=\"language-text\">public</code> 的，那么反射会出问题，导致解析失败。目前我测试的就是必须要把上文中 <code class=\"language-text\">Hello.class</code> 移动到一个独立的文件并且标记为 <code class=\"language-text\">public</code> 才可以工作。</p>\n</blockquote>\n<h3 id=\"中文处理\" style=\"position:relative;\">中文处理<a href=\"#%E4%B8%AD%E6%96%87%E5%A4%84%E7%90%86\" aria-label=\"中文处理 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>既然用到了 <code class=\"language-text\">.properties</code> 文件自然就遇到了这个 java 中臭名昭著的编码问题了：中文显示乱码了。这里找了个<a href=\"https://my.oschina.net/LevelCoder/blog/1625594\">解决方案</a>，解决了。幸好是 Intellij ?</p>\n<p>顺便提一句，Intellij 里面的 <a href=\"https://www.jetbrains.com/help/idea/resource-bundle.html\">Resource bundles</a> 也挺好用的。</p>\n<p><img src=\"https://images-1300693298.cos.ap-beijing.myqcloud.com/20210208212752.png\" alt=\"\"></p>\n<p>这部分介绍就到这里了，后文会继续介绍如何建立自定义 exception handler 体系以捕捉各种层级的报错并统一返回格式了。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#bean-validation-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%97%B6%E6%9C%BA\">Bean Validation 的异常处理时机</a></p>\n</li>\n<li>\n<p><a href=\"#bean-validation-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\">Bean Validation 自定义注解</a></p>\n<ul>\n<li><a href=\"#%E5%8C%85%E5%90%AB%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C\">包含自定义校验</a></li>\n<li><a href=\"#%E4%B8%8D%E5%8C%85%E5%90%AB%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C\">不包含自定义校验</a></li>\n<li><a href=\"#%E8%B7%A8%E5%AD%97%E6%AE%B5%E6%A0%A1%E9%AA%8C\">跨字段校验</a></li>\n<li><a href=\"#validator-%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\">Validator 中的依赖注入</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#error-message-%E7%9A%84%E5%A4%84%E7%90%86\">Error Message 的处理</a></p>\n<ul>\n<li><a href=\"#%E5%9B%BD%E9%99%85%E5%8C%96\">国际化</a></li>\n<li><a href=\"#%E4%B8%AD%E6%96%87%E5%A4%84%E7%90%86\">中文处理</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"spring boot validation","date":"February 07, 2021"}}},"pageContext":{"id":"6ca6d951-2e12-58b4-bbce-0b52a4b3f2c4"}},"staticQueryHashes":[]}