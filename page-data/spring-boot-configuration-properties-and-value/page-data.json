{"componentChunkName":"component---src-templates-blog-js","path":"/spring-boot-configuration-properties-and-value","result":{"data":{"blog":{"id":"e29a53d7-10fb-5773-bb74-881ea888eabc","html":"<p><code>@ConfigurationProperties</code> 和 <code>@Value</code> 都是 Spring 提供的用于从配置文件注入配置信息的方式。很显然，<code>@Value</code> 比较适用于配置比较少的场景，而 <code>@ConfigurationProperties</code> 则更适用于有很多配置的情况。之前写项目的时候从来都没有使用过 <code>@ConfigurationProperties</code> 几乎每次都是使用 <code>@Value</code>。这次遇到了一个比较适合它的场景，在使用的时候还真遇到了一些令人讨厌的小问题，导致开发速度受到了一定的影响。这里记录下来他们之间的使用方式和可能出现的坑，加深一下印象。</p>\n<p><strong>注意</strong>，我们这里使用 <code>application.yml</code> 而不是 <code>application.properties</code> 不过他们基本是可以相互替代的。</p>\n<h2 id=\"demo-for-value\" style=\"position:relative;\">Demo for @Value<a href=\"#demo-for-value\" aria-label=\"demo for value permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sso</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clientId</span><span class=\"token punctuation\">:</span> clientId\n  <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> clientSecret</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ValueConfiguration</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${sso.clientId}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${sso.clientSecret}\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientId <span class=\"token operator\">=</span> clientId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientSecret <span class=\"token operator\">=</span> clientSecret<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code>@Value</code> 是使用非常的简单，只要将注解添加在参数前即可。</p>\n<h2 id=\"demo-for-configurationproperties\" style=\"position:relative;\">Demo for @ConfigurationProperties<a href=\"#demo-for-configurationproperties\" aria-label=\"demo for configurationproperties permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在有大量参数的时候，一个个添加 <code>@Value</code> 就显得麻烦了一点，Spring 提供了另一种方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span> <span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoForSpringBootConfigurationApplication</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoForSpringBootConfigurationApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token class-name\">CommandLineRunner</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ValueConfiguration</span> valueConfiguration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> args <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>valueConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token class-name\">CommandLineRunner</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertiesConfiguration</span> configuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">return</span> args <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>  <span class=\"token comment\">// 3</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PropertiesConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sso</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">clientId</span><span class=\"token punctuation\">:</span> clientId\n  <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> clientSecret\n\n<span class=\"token key atrule\">oauth</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">client_id</span><span class=\"token punctuation\">:</span> id                           // 4\n  <span class=\"token key atrule\">client-secret</span><span class=\"token punctuation\">:</span> secret\n  <span class=\"token key atrule\">redirect_uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//aisensiy.github.io\n  <span class=\"token key atrule\">grantType</span><span class=\"token punctuation\">:</span> code</code></pre></div>\n<ol>\n<li>为了使用 <code>@ConfigurationProperties</code> 需要在 spring boot application 上添加 <code>EnableConfigurationProperties</code> 的注解，这里遇到的第一个坑</li>\n<li><code>@ConfigurationProperties</code> 可以添加前缀，然后其属性就会按照变量的名称默认在 <code>application.*</code> 中寻找指定的变量。这里就是去寻找 <code>oauth.clientId</code> 这样的配置。** 如果想要从其他配置文件获取配置内容，可以添加一个额外的注释 <code>@PropertySource(\"classpath:xxx.yml\")</code>**</li>\n<li>这里的 <code>@Setter</code> 是来自 lombok 的注解，它可以自动的帮助添加默认的属性的 setter 方法。注意，<strong>这里的 setter 方法是必须的，如果没有 setter 方法，是无法成功获取配置的</strong>，这也是我在使用它的时候遇到的又一个坑</li>\n<li><code>@ConfigurationProperties</code> 与 <code>@Value</code> 的一个重大区别在于它采用比较灵活的方式寻找配置。可以看到这里的配置可以是驼峰形式，也可以是下划线分割的，还可以是中横线分割的</li>\n</ol>\n<h2 id=\"添加参数验证\" style=\"position:relative;\">添加参数验证<a href=\"#%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81\" aria-label=\"添加参数验证 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><code>@ConfigurationProperties</code> 是可以和 validation 注解一起使用的，这样的好处显而易见：对于一些配置是必须的或者是对格式有要求的，在运行开始的时候就能检测到这些问题可以避免上线之后因为配置不符合有找不到头绪而导致的 debug 的痛苦过程。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PropertiesConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> clientSecret<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@URL</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@NotBlank</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>直接在成员变量上添加注解就可以了，非常的简单。然后可以去尝试添加一些非法的配置试试效果。</p>\n<p>完整的 demo 项目在<a href=\"https://github.com/aisensiy/demo-for-spring-boot-configuration\">这里</a>。</p>\n<h2 id=\"相关资料\" style=\"position:relative;\">相关资料<a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" aria-label=\"相关资料 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://projectlombok.org/\">lombok</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-relaxed-binding\">relaxed binding</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-vs-value\">@ConfigurationProperties vs. @Value</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html\">Configuration</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#demo-for-value\">Demo for @Value</a></li>\n<li><a href=\"#demo-for-configurationproperties\">Demo for @ConfigurationProperties</a></li>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81\">添加参数验证</a></li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\">相关资料</a></li>\n</ul>","frontmatter":{"title":"Spring Boot @ConfigurationProperties 与 @Value","date":"August 31, 2017"},"excerpt":"@ConfigurationProperties 和 @Value 都是 Spring 提供的用于…"}},"pageContext":{"id":"e29a53d7-10fb-5773-bb74-881ea888eabc"}},"staticQueryHashes":["4202924991"]}