{"version":3,"file":"component---src-pages-tags-js-cd36ee116c69a923055d.js","mappings":"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","sources":["webpack://aisensiy-s-blog/./src/components/seo.jsx","webpack://aisensiy-s-blog/./src/pages/tags.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"@reach/router\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation();\n  const { site } = useStaticQuery(query);\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata;\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  };\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n};\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`","import { graphql, Link } from \"gatsby\";\nimport React from \"react\";\nimport Base from \"../layouts/base\";\nimport Seo from \"../components/seo\";\n\nexport default function Archive({ data }) {\n  const groupByTagResult = groupByTag(data.allMarkdownRemark.nodes);\n\n  return (\n    <Base>\n      <Seo title=\"Tags\" />\n      <div>\n        <h1>Tags</h1>\n        {groupByTagResult.map(({ key, value }) => (\n          <div key={key}>\n            <h2 className=\"text-2xl font-bold tracking-tight my-4\">{key}</h2>\n            <YearItems blogs={value} />\n          </div>\n        ))}\n      </div>\n    </Base>\n  );\n}\n\nfunction YearItems({ blogs }) {\n  return (\n    <ul className=\"space-y-1\">\n      {blogs.map((blog) => (\n        <li className=\"list-disc list-inside\" key={blog.id}>\n          <Link to={blog.fields.slug_without_date}>\n            {blog.frontmatter.title} - {blog.frontmatter.date}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport const query = graphql`\n  query QueryBlogTitlesAndTags {\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n      nodes {\n        id\n        frontmatter {\n          title\n          tags\n          date(formatString: \"MMMM-DD\")\n          year: date(formatString: \"YYYY\")\n        }\n        fields {\n          slug_without_date\n        }\n      }\n    }\n  }\n`;\n\nfunction groupByTag(blogs) {\n  const result = {};\n  for (let blog of blogs) {\n    if (!blog.frontmatter.tags) continue;\n    for (let tag of blog.frontmatter.tags) {\n      if (!result[tag]) result[tag] = [];\n      result[tag].push(blog);\n    }\n  }\n  // map to list\n  let listResult = Object.keys(result).filter( key => result[key].length > 1).map((key) => ({ key, value: result[key], weight: result[key].length }));\n  listResult\n    .sort((a, b) => {\n      return a.weight - b.weight;\n    })\n    .reverse();\n  return listResult;\n}\n"],"names":["SEO","title","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","name","content","property","defaultProps","Archive","groupByTagResult","blogs","result","blog","frontmatter","tags","tag","push","listResult","Object","keys","filter","key","length","map","value","weight","sort","a","b","reverse","groupByTag","data","allMarkdownRemark","nodes","className","YearItems","id","Link","to","fields","slug_without_date","date"],"sourceRoot":""}