{"version":3,"file":"component---src-pages-index-js-19efc7568c2cc85d6708.js","mappings":"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","sources":["webpack://aisensiy-s-blog/./src/components/Blog.jsx","webpack://aisensiy-s-blog/./src/components/seo.jsx","webpack://aisensiy-s-blog/./src/pages/index.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nfunction TableOfContent({ html }) {\n  return (\n    <div className=\"table-of-content\">\n      <h2>Table of Contents</h2>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n\nconst Tag = ({ tag }) => (\n  <span className=\"text-xs font-semibold inline-block py-1 px-2 rounded text-rose-700 bg-rose-200 last:mr-0 mr-1\">\n    {tag}\n  </span>\n);\n\nconst TagList = ({ tags }) => (\n  <div className=\"\">\n    {tags.map(tag => (\n      <Tag key={tag} tag={tag} />\n    ))}\n  </div>\n);\n\nexport default function Blog({ data }) {\n  const { frontmatter, html, fields, tableOfContents } = data;\n  return (\n    <div>\n      <h1>\n        {(fields && fields.slug_without_date && (\n          <Link to={fields.slug_without_date}>{frontmatter.title}</Link>\n        )) ||\n          `${frontmatter.title}`}\n      </h1>\n      <h2>{frontmatter.date}</h2>\n      { frontmatter.tags && <TagList tags={frontmatter.tags} /> }\n      {tableOfContents && <TableOfContent html={tableOfContents} />}\n      <div\n        className=\"prose prose-blog dark:prose-invert max-w-none lg:prose-lg xl:prose-xl\"\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"@reach/router\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation();\n  const { site } = useStaticQuery(query);\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata;\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  };\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n};\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`","import React from \"react\";\nimport { graphql, Link } from \"gatsby\"\nimport Blog from \"../components/Blog\"\nimport Base from \"../layouts/base\"\nimport Seo from \"../components/seo\"\n\nexport default function BlogPage({ data }) {\n  const { nodes: blogs, pageInfo } = data.blogs\n  const pages = blogs.map(blog => (\n    <div className=\"\">\n      <Blog data={blog} key={blog.id}/>\n      <hr className=\"mt-8\" />\n    </div>\n  ))\n  const { pageCount, hasPreviousPage, currentPage } = pageInfo\n  const hasNextPage = currentPage < pageCount\n  return (\n    <Base>\n      <Seo />\n      <div>\n        {pages}\n        <div className=\"flex justify-center mt-8\">\n          {hasPreviousPage && <Link to={`/page/${currentPage - 1}`} className=\"w-32 text-center px-4 py-1 border mx-4 border-gray-800 border-solid\">Previous</Link>}\n          {hasNextPage && <Link to={`/page/${currentPage + 1}`} className=\"w-32 text-center px-4 py-1 border mx-4 border-gray-800 border-solid\">Next</Link>}\n        </div>\n      </div>\n    </Base>\n  )\n}\n\nexport const pageQuery = graphql`\n  query QueryFirstBlogPages { \n    site(siteMetadata: {title: {}}) {\n      siteMetadata {\n        title\n      }\n    }\n    blogs: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: 3\n      skip: 0\n    ) {\n      nodes {\n        id\n        frontmatter {\n          title\n          date(formatString: \"YYYY MMMM-DD\")\n        }\n        html\n        fields {\n          slug_without_date\n        }\n      }\n      pageInfo {\n        pageCount\n        hasPreviousPage\n        currentPage\n      }\n    }\n  }\n`;\n"],"names":["TableOfContent","html","className","dangerouslySetInnerHTML","__html","Tag","tag","TagList","tags","map","key","Blog","data","frontmatter","fields","tableOfContents","slug_without_date","Link","to","title","date","SEO","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","name","content","property","defaultProps","BlogPage","blogs","nodes","pageInfo","pages","blog","id","pageCount","hasPreviousPage","currentPage","hasNextPage"],"sourceRoot":""}